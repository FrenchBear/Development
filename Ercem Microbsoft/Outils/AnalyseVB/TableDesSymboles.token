Attributes Attribute      <Attribute> <VB_Name> <=> <"TableDesSymboles"> 
Externe    Option         <Option> <Explicit> 
Externe    Dim            <Private> <colSymboles> <As> <New> <Collection> 
Externe    Dim            <Public> <sNomProcédureCourante> <As> <String> 
Enum       Enum           <Enum> <ePortée> 
Enum       ConstEnum      <poInconnue> 
Enum       ConstEnum      <poLocal> 
Enum       ConstEnum      <poModule> 
Enum       ConstEnum      <poGlobal> 
Enum       EndEnum        <End> <Enum> 
Enum       Enum           <Enum> <eTypeSymbole> 
Enum       ConstEnum      <tsInconnu> 
Enum       ConstEnum      <tsProcédure> 
Enum       ConstEnum      <tsParamètre> 
Enum       ConstEnum      <tsVariable> 
Enum       ConstEnum      <tsEtiquette> 
Enum       ConstEnum      <tsObjet> 
Enum       ConstEnum      <tsConstante> 
Enum       ConstEnum      <tsType> 
Enum       ConstEnum      <tsEnum> 
Enum       EndEnum        <End> <Enum> 
Procédure  Procédure      <Public> <Function> <sPortée> <(> <ByVal> <p> <As> <ePortée> <)> 
Procédure  Select         <Select> <Case> <p> 
Procédure  Case           <Case> <poInconnue> 
Procédure  =              <sPortée> <=> <"???   "> 
Procédure  Case           <Case> <poLocal> 
Procédure  =              <sPortée> <=> <"Local "> 
Procédure  Case           <Case> <poModule> 
Procédure  =              <sPortée> <=> <"Module"> 
Procédure  Case           <Case> <poGlobal> 
Procédure  =              <sPortée> <=> <"Global"> 
Procédure  EndSelect      <End> <Select> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  sPortée

Symbole                   TypeSymb  Portée Type                 U Définition
p                         Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 30 
===============================================

Procédure  Procédure      <Public> <Function> <sTypeSymbole> <(> <ByVal> <t> <As> <eTypeSymbole> <)> 
Procédure  Select         <Select> <Case> <t> 
Procédure  Case           <Case> <tsInconnu> 
Procédure  =              <sTypeSymbole> <=> <"Inconnu  "> 
Procédure  Case           <Case> <tsProcédure> 
Procédure  =              <sTypeSymbole> <=> <"Procédure"> 
Procédure  Case           <Case> <tsParamètre> 
Procédure  =              <sTypeSymbole> <=> <"Paramètre"> 
Procédure  Case           <Case> <tsVariable> 
Procédure  =              <sTypeSymbole> <=> <"Variable "> 
Procédure  Case           <Case> <tsEtiquette> 
Procédure  =              <sTypeSymbole> <=> <"Étiquette"> 
Procédure  Case           <Case> <tsObjet> 
Procédure  =              <sTypeSymbole> <=> <"Objet    "> 
Procédure  Case           <Case> <tsConstante> 
Procédure  =              <sTypeSymbole> <=> <"Constante"> 
Procédure  Case           <Case> <tsType> 
Procédure  =              <sTypeSymbole> <=> <"Type     "> 
Procédure  Case           <Case> <tsEnum> 
Procédure  =              <sTypeSymbole> <=> <"Enum     "> 
Procédure  EndSelect      <End> <Select> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  sTypeSymbole

Symbole                   TypeSymb  Portée Type                 U Définition
t                         Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 39 
===============================================

Procédure  Procédure      <Public> <Sub> <SorTableSymboles> <(> <ByVal> <poPortée> <As> <ePortée> <)> 
Procédure  Print          <Print> <#> <2> <,> <""> 
Procédure  Print          <Print> <#> <2> <,> <"==============================================="> 
Procédure  Print          <Print> <#> <2> <,> <"Table des symboles "> <&> <sPortée> <(> <poPortée> <)> <&> <" "> <&> <sNomProcédureCourante> 
Procédure  Print          <Print> <#> <2> <,> <""> 
Procédure  Print          <Print> <#> <2> <,> <"Symbole                   TypeSymb  Portée Type                 U Définition"> 
Procédure  Dim            <Dim> <s> <As> <Symbole> 
Procédure  ForEach        <For> <Each> <s> <In> <colSymboles> 
Procédure  If             <If> <s.poPortée> <=> <poPortée> <Then> 
Procédure  Print          <Print> <#> <2> <,> <clf> <(> <s.sNom> <,> <25> <)> <;> <" "> <;> <sTypeSymbole> <(> <s.tsTypeSymbole> <)> <;> <" "> <;> <sPortée> <(> <s.poPortée> <)> <;> <" "> <;> <;> 
Procédure  Print          <Print> <#> <2> <,> <clf> <(> <s.sTypeBasic> <,> <20> <)> <;> <" "> <;> <clf> <(> <s.bUtilisé> <,> <1> <)> <;> <" "> <;> 
Procédure  If             <If> <s.iDefLigne> <>> <0> <Then> 
Procédure  Print          <Print> <#> <2> <,> <s.sDefFichier> <;> <","> <;> <s.iDefLigne> <;> 
Procédure  Print          <Print> <#> <2> <,> <""> 
Procédure  If             <If> <(> <poPortée> <=> <poLocal> <Or> <poPortée> <=> <poModule> <)> <And> <Not> <s.bUtilisé> <And> <(> <s.tsTypeSymbole> <<>> <tsParamètre> <And> <s.tsTypeSymbole> <<>> <tsObjet> <)> <Then> 
Procédure  If             <If> <s.tsTypeSymbole> <=> <tsProcédure> <Then> 
Procédure  Dim            <Dim> <p> <As> <Integer> <,> <bPb> <As> <Boolean> 
Procédure  =              <p> <=> <InStr> <(> <s.sNom> <,> <"_"> <)> 
Procédure  If             <If> <p> <>> <0> <Then> 
Procédure  =              <bPb> <=> <Not> <bExisteObjet> <(> <Left> <(> <s.sNom> <,> <p> <-> <1> <)> <)> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  =              <bPb> <=> <True> 
Procédure  EndIf          <End> <If> 
Procédure  If             <If> <bPb> <Then> 
Procédure  Call           <frmAnalyse.AddProblème> <s.sDefFichier> <&> <"("> <&> <s.iDefLigne> <&> <"): "> <&> <sNomProcédureCourante> <&> <": "> <&> <sTypeSymbole> <(> <s.tsTypeSymbole> <)> <&> <" "> <&> <s.sNom> <&> <" inutilisé(e) !"> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  Call           <frmAnalyse.AddProblème> <s.sDefFichier> <&> <"("> <&> <s.iDefLigne> <&> <"): "> <&> <sNomProcédureCourante> <&> <": "> <&> <sTypeSymbole> <(> <s.tsTypeSymbole> <)> <&> <" "> <&> <s.sNom> <&> <" inutilisé(e) !"> 
Procédure  EndIf          <End> <If> 
Procédure  EndIf          <End> <If> 
Procédure  EndIf          <End> <If> 
Procédure  Next           <Next> 
Procédure  Print          <Print> <#> <2> <,> <"==============================================="> 
Procédure  Print          <Print> <#> <2> <,> <""> 
Procédure  Dim            <Dim> <i> <As> <Integer> 
Procédure  For            <For> <i> <=> <colSymboles.Count> <To> <1> <Step> <-1> 
Procédure  If             <If> <colSymboles> <(> <i> <)> <.poPortée> <=> <poPortée> <Then> 
Procédure  Call           <colSymboles.Remove> <i> 
Procédure  Next           <Next> 
Procédure  Call           <DoEvents> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  SorTableSymboles

Symbole                   TypeSymb  Portée Type                 U Définition
poPortée                  Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 54 
s                         Variable  Local  Symbole              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 62 
p                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 73 
bPb                       Variable  Local  Boolean              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 73 
i                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 90 
===============================================

Procédure  Procédure      <Private> <Function> <bExisteObjet> <(> <ByVal> <sNom> <As> <String> <)> 
Procédure  =              <bExisteObjet> <=> <True> 
Procédure  Select         <Select> <Case> <tfTypeFichier> 
Procédure  Case           <Case> <tfFeuille> 
Procédure  If             <If> <ChEq> <(> <sNom> <,> <"Form"> <)> <Or> <ChEq> <(> <sNom> <,> <"MDIForm"> <)> <Then> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <tfClasse> 
Procédure  If             <If> <ChEq> <(> <sNom> <,> <"Class"> <)> <Then> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <tfUserControl> 
Procédure  If             <If> <ChEq> <(> <sNom> <,> <"UserControl"> <)> <Then> 
Procédure  Exit           <Exit> <Function> 
Procédure  EndSelect      <End> <Select> 
Procédure  Dim            <Dim> <s> <As> <Symbole> 
Procédure  ForEach        <For> <Each> <s> <In> <colSymboles> 
Procédure  If             <If> <s.tsTypeSymbole> <=> <tsObjet> <And> <ChEq> <(> <s.sNom> <,> <sNom> <)> <Then> 
Procédure  Exit           <Exit> <Function> 
Procédure  EndIf          <End> <If> 
Procédure  Next           <Next> 
Procédure  =              <bExisteObjet> <=> <False> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bExisteObjet

Symbole                   TypeSymb  Portée Type                 U Définition
sNom                      Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 99 
s                         Variable  Local  Symbole              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 108 
===============================================

Procédure  Procédure      <Public> <Sub> <AnalyseSymboles> <(> <)> 
Procédure  Select         <Select> <Case> <tlTypeLigne> 
Procédure  Case           <Case> <tlProcédure> 
Procédure  Call           <AnalyseLigneProcédure> 
Procédure  Case           <Case> <tlLabel> 
Procédure  Call           <AnalyseLigneLabel> 
Procédure  Case           <Case> <tlDim> 
Procédure  Call           <AnalyseLigneDim> 
Procédure  Case           <Case> <tlConst> 
Procédure  Call           <AnalyseLigneConst> 
Procédure  Case           <Case> <tlType> 
Procédure  Call           <AnalyseLigneType> 
Procédure  Case           <Case> <tlEnum> 
Procédure  Call           <AnalyseLigneEnum> 
Procédure  Case           <Case> <tlBegin> 
Procédure  Call           <AnalyseLigneBegin> 
Procédure  Case           <Case> <tlGoTo> <,> <tlGosub> 
Procédure  Call           <AnalyseLigneGoTo> 
Procédure  Case           <Case> <tlOn> 
Procédure  Call           <AnalyseLigneOn> 
Procédure  Case           <Case> <tlResume> 
Procédure  Call           <AnalyseLigneResume> 
Procédure  Case           <Case> <tlAffectation> 
Procédure  Call           <AnalyseLigneAffectation> 
Procédure  Case           <Case> <tlCall> 
Procédure  Call           <AnalyseLigneCall> 
Procédure  Case           <Case> <tlRedim> 
Procédure  Call           <AnalyseLigneRedim> 
Procédure  Case           <Case> <tlWith> 
Procédure  Call           <AnalyseLigneWith> 
Procédure  Case           <Case> <tlFor> 
Procédure  Call           <AnalyseLigneFor> 
Procédure  Case           <Case> <tlForEach> 
Procédure  Call           <AnalyseLigneForEach> 
Procédure  Case           <Case> <tlWhile> 
Procédure  Call           <AnalyseLigneWhile> 
Procédure  Case           <Case> <tlDo> 
Procédure  Call           <AnalyseLigneDoLoop> 
Procédure  Case           <Case> <tlLoop> 
Procédure  Call           <AnalyseLigneDoLoop> 
Procédure  Case           <Case> <tlSelect> 
Procédure  Call           <AnalyseLigneSelect> 
Procédure  Case           <Case> <tlCase> 
Procédure  Call           <AnalyseLigneCase> 
Procédure  Case           <Case> <tlIf> <,> <tlElseIf> 
Procédure  Call           <AnalyseLigneIf> 
Procédure  Case           <Case> <tlOpen> 
Procédure  Call           <AnalyseLigneOpen> 
Procédure  Case           <Case> <tlPrint> <,> <tlWrite> 
Procédure  Call           <AnalyseLignePrint> 
Procédure  Case           <Case> <tlInput> 
Procédure  Call           <AnalyseLigneInput> 
Procédure  Case           <Case> <tlVersion> 
Procédure  Case           <Case> <tlAttribute> 
Procédure  Case           <Case> <tlOption> 
Procédure  Case           <Case> <tlDef> 
Procédure  Case           <Case> <tlDeclare> 
Procédure  Case           <Case> <tlPréprocesseur> 
Procédure  Case           <Case> <tlBeginProperty> 
Procédure  Case           <Case> <tlEndProperty> 
Procédure  Case           <Case> <tlElse> 
Procédure  Case           <Case> <tlEnd> 
Procédure  Case           <Case> <tlEndEnum> 
Procédure  Case           <Case> <tlEndType> 
Procédure  Case           <Case> <tlEndIf> 
Procédure  Case           <Case> <tlEndSelect> 
Procédure  Case           <Case> <tlEndSub> 
Procédure  Case           <Case> <tlEndWith> 
Procédure  Case           <Case> <tlWend> 
Procédure  Case           <Case> <tlExit> 
Procédure  Case           <Case> <tlNext> 
Procédure  Case           <Case> <tlStop> 
Procédure  Case           <Case> <tlReturn> 
Procédure  Case           <Case> <tlEOF> 
Procédure  Case           <Case> <tlConstEnum> 
Procédure  Case           <Case> <tlChampType> 
Procédure  Case           <Case> 
Procédure  Else           <Else> 
Procédure  EOF            
Procédure  Stop           <Stop> 
Procédure  EndSelect      <End> <Select> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseSymboles

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneProcédure> <(> <)> 
Procédure  Dim            <Dim> <i> <As> <Integer> <,> <iNiv> <As> <Integer> 
Procédure  Dim            <Dim> <pPortée> <As> <ePortée> 
Procédure  Dim            <Dim> <sTypeBasic> <As> <String> 
Procédure  Select         <Select> <Case> <tfTypeFichier> 
Procédure  Case           <Case> <tfFeuille> 
Procédure  =              <pPortée> <=> <poModule> 
Procédure  Case           <Case> <tfModule> 
Procédure  =              <pPortée> <=> <poGlobal> 
Procédure  Case           <Case> <tfClasse> 
Procédure  =              <pPortée> <=> <poGlobal> 
Procédure  Case           <Case> <tfUserControl> 
Procédure  =              <pPortée> <=> <poGlobal> 
Procédure  EndSelect      <End> <Select> 
Procédure  =              <i> <=> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Private"> <Then> 
Procédure  =              <pPortée> <=> <poModule> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Public"> <Then> 
Procédure  =              <pPortée> <=> <poGlobal> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Friend"> <Then> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Static"> <Then> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  Select         <Select> <Case> <tToken> <(> <i> <)> 
Procédure  Case           <Case> <"Sub"> 
Procédure  =              <sTypeBasic> <=> <"Sub"> 
Procédure  Case           <Case> <"Function"> 
Procédure  =              <sTypeBasic> <=> <"Function"> 
Procédure  Case           <Case> <"Property"> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  =              <sTypeBasic> <=> <"Property "> <&> <tToken> <(> <i> <)> 
Procédure  EndSelect      <End> <Select> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  =              <sNomProcédureCourante> <=> <tToken> <(> <i> <)> 
Procédure  Call           <AjouteSymbole> <tsProcédure> <,> <sNomProcédureCourante> <,> <pPortée> <,> <sTypeBasic> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  Do             <Do> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <")"> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Optional"> <Then> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"ByVal"> <Then> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"ByRef"> <Then> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"ParamArray"> <Then> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  Call           <AjouteSymbole> <tsParamètre> <,> <tToken> <(> <i> <)> <,> <poLocal> <,> <""> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  =              <iNiv> <=> <0> 
Procédure  Do             <Do> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"("> <Then> 
Procédure  =              <iNiv> <=> <iNiv> <+> <1> 
Procédure  ElseIf         <ElseIf> <tToken> <(> <i> <)> <=> <")"> <Then> 
Procédure  If             <If> <iNiv> <=> <0> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  =              <iNiv> <=> <iNiv> <-> <1> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  If             <If> <iNiv> <=> <0> <And> <tToken> <(> <i> <)> <=> <","> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  EndIf          <End> <If> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  Loop           <Loop> 
Procédure  Call           <Assert> <tToken> <(> <i> <)> <=> <","> <Or> <tToken> <(> <i> <)> <=> <")"> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <")"> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  Loop           <Loop> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneProcédure

Symbole                   TypeSymb  Portée Type                 U Définition
sTypeBasic                Variable  Local  String               T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 190 
i                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 188 
iNiv                      Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 188 
pPortée                   Variable  Local  ePortée              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 189 
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneLabel> <(> <)> 
Procédure  Call           <Assert> <iNbToken> <=> <2> 
Procédure  Call           <AjouteSymbole> <tsEtiquette> <,> <tToken> <(> <2> <)> <,> <poLocal> <,> <""> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneLabel

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AjouteSymboleSimple> <(> <ByVal> <tsTypeSymbole> <As> <eTypeSymbole> <,> <ByVal> <sNom> <As> <String> <,> <ByVal> <poPortée> <As> <ePortée> <,> <ByVal> <sTypeBasic> <As> <String> <)> 
Procédure  If             <If> <isMotClé> <(> <sNom> <)> <Then> 
Procédure  Exit           <Exit> <Sub> 
Procédure  Dim            <Dim> <bDéfini> <As> <Boolean> 
Procédure  Dim            <Dim> <s> <As> <Symbole> 
Procédure  =              <bDéfini> <=> <False> 
Procédure  ForEach        <For> <Each> <s> <In> <colSymboles> 
Procédure  If             <If> <ChEq> <(> <s.sNom> <,> <sNom> <)> <And> <(> <poPortée> <=> <poInconnue> <Or> <s.poPortée> <=> <poInconnue> <Or> <poPortée> <=> <s.poPortée> <)> <Then> 
Procédure  =              <bDéfini> <=> <True> 
Procédure  Exit           <Exit> <For> 
Procédure  EndIf          <End> <If> 
Procédure  Next           <Next> 
Procédure  If             <If> <Not> <bDéfini> <Then> 
Procédure  =              <Set> <s> <=> <New> <Symbole> 
Procédure  Call           <colSymboles.Add> <s> 
Procédure  =              <s.sNom> <=> <sNom> 
Procédure  =              <s.bUtilisé> <=> <False> 
Procédure  EndIf          <End> <If> 
Procédure  =              <s.tsTypeSymbole> <=> <tsTypeSymbole> 
Procédure  =              <s.poPortée> <=> <poPortée> 
Procédure  =              <s.sTypeBasic> <=> <sTypeBasic> 
Procédure  =              <s.sDefFichier> <=> <sNomFichier> 
Procédure  =              <s.iDefLigne> <=> <iNuméroLigne> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AjouteSymboleSimple

Symbole                   TypeSymb  Portée Type                 U Définition
tsTypeSymbole             Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 258 
sNom                      Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 258 
poPortée                  Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 258 
sTypeBasic                Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 258 
bDéfini                   Variable  Local  Boolean              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 261 
s                         Variable  Local  Symbole              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 262 
===============================================

Procédure  Procédure      <Private> <Sub> <AjouteSymbole> <(> <ByVal> <tsTypeSymbole> <As> <eTypeSymbole> <,> <ByVal> <sNom> <As> <String> <,> <ByVal> <poPortée> <As> <ePortée> <,> <ByVal> <sTypeBasic> <As> <String> <)> 
Procédure  Dim            <Dim> <p> <As> <Integer> 
Procédure  Do             <Do> 
Procédure  =              <p> <=> <InStr2> <(> <1> <,> <sNom> <,> <"."> <)> 
Procédure  If             <If> <p> <>> <1> <Then> 
Procédure  Call           <AjouteSymboleSimple> <tsTypeSymbole> <,> <Left> <(> <sNom> <,> <p> <-> <1> <)> <,> <poPortée> <,> <sTypeBasic> 
Procédure  =              <sNom> <=> <Mid> <(> <sNom> <,> <p> <+> <1> <)> 
Procédure  Loop           <Loop> <Until> <sNom> <=> <""> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AjouteSymbole

Symbole                   TypeSymb  Portée Type                 U Définition
tsTypeSymbole             Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 287 
sNom                      Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 287 
poPortée                  Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 287 
sTypeBasic                Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 287 
p                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 288 
===============================================

Procédure  Procédure      <Public> <Sub> <UtiliseSymboleSimple> <(> <ByVal> <tsTypeSymbole> <As> <eTypeSymbole> <,> <ByVal> <sNom> <As> <String> <)> 
Procédure  If             <If> <isMotClé> <(> <sNom> <)> <Then> 
Procédure  Exit           <Exit> <Sub> 
Procédure  Dim            <Dim> <s> <As> <Symbole> 
Procédure  ForEach        <For> <Each> <s> <In> <colSymboles> 
Procédure  If             <If> <ChEq> <(> <s.sNom> <,> <sNom> <)> <Then> 
Procédure  =              <s.bUtilisé> <=> <True> 
Procédure  Exit           <Exit> <Sub> 
Procédure  EndIf          <End> <If> 
Procédure  Next           <Next> 
Procédure  =              <Set> <s> <=> <New> <Symbole> 
Procédure  =              <s.tsTypeSymbole> <=> <tsTypeSymbole> 
Procédure  =              <s.sNom> <=> <sNom> 
Procédure  =              <s.poPortée> <=> <poInconnue> 
Procédure  =              <s.sTypeBasic> <=> <""> 
Procédure  =              <s.sDefFichier> <=> <""> 
Procédure  =              <s.iDefLigne> <=> <-1> 
Procédure  =              <s.bUtilisé> <=> <True> 
Procédure  Call           <colSymboles.Add> <s> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  UtiliseSymboleSimple

Symbole                   TypeSymb  Portée Type                 U Définition
tsTypeSymbole             Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 297 
sNom                      Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 297 
s                         Variable  Local  Symbole              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 301 
===============================================

Procédure  Procédure      <Public> <Sub> <UtiliseSymbole> <(> <ByVal> <tsTypeSymbole> <As> <eTypeSymbole> <,> <ByVal> <sNom> <As> <String> <)> 
Procédure  Dim            <Dim> <p> <As> <Integer> 
Procédure  Do             <Do> 
Procédure  =              <p> <=> <InStr2> <(> <1> <,> <sNom> <,> <"."> <)> 
Procédure  If             <If> <p> <>> <1> <Then> 
Procédure  Call           <UtiliseSymboleSimple> <tsTypeSymbole> <,> <Left> <(> <sNom> <,> <p> <-> <1> <)> 
Procédure  =              <sNom> <=> <Mid> <(> <sNom> <,> <p> <+> <1> <)> 
Procédure  Loop           <Loop> <Until> <sNom> <=> <""> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  UtiliseSymbole

Symbole                   TypeSymb  Portée Type                 U Définition
tsTypeSymbole             Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 323 
sNom                      Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 323 
p                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 324 
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneDim> <(> <)> 
Procédure  Dim            <Dim> <poPortée> <As> <ePortée> 
Procédure  Select         <Select> <Case> <elEtat> 
Procédure  Case           <Case> <elExterne> 
Procédure  If             <If> <tfTypeFichier> <=> <tfModule> <Then> 
Procédure  =              <poPortée> <=> <poGlobal> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  =              <poPortée> <=> <poModule> 
Procédure  EndIf          <End> <If> 
Procédure  Case           <Case> <elProcédure> 
Procédure  =              <poPortée> <=> <poLocal> 
Procédure  Case           <Case> 
Procédure  Else           <Else> 
Procédure  EOF            
Procédure  Stop           <Stop> 
Procédure  EndSelect      <End> <Select> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Private"> <Then> 
Procédure  Call           <Assert> <elEtat> <=> <elExterne> 
Procédure  =              <poPortée> <=> <poModule> 
Procédure  EndIf          <End> <If> 
Procédure  Dim            <Dim> <iTokenNom> <As> <Integer> <,> <iTokenType> <As> <Integer> 
Procédure  Dim            <Dim> <iToken> <As> <Integer> <,> <iNiv> <As> <Integer> 
Procédure  =              <iToken> <=> <1> 
Procédure  Do             <Do> 
Procédure  =              <iToken> <=> <iToken> <+> <1> 
Procédure  =              <iTokenNom> <=> <iToken> 
Procédure  =              <iTokenType> <=> <-1> 
Procédure  =              <iToken> <=> <iToken> <+> <1> 
Procédure  If             <If> <iToken> <>> <iNbToken> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  =              <iNiv> <=> <0> 
Procédure  Do             <Do> 
Procédure  If             <If> <tToken> <(> <iToken> <)> <=> <"("> <Then> 
Procédure  =              <iNiv> <=> <iNiv> <+> <1> 
Procédure  ElseIf         <ElseIf> <tToken> <(> <iToken> <)> <=> <")"> <Then> 
Procédure  =              <iNiv> <=> <iNiv> <-> <1> 
Procédure  ElseIf         <ElseIf> <tToken> <(> <iToken> <)> <=> <"As"> <Then> 
Procédure  If             <If> <tToken> <(> <iToken> <+> <1> <)> <=> <"New"> <Then> 
Procédure  =              <iTokenType> <=> <iToken> <+> <2> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  =              <iTokenType> <=> <iToken> <+> <1> 
Procédure  EndIf          <End> <If> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  If             <If> <iNiv> <=> <0> <And> <tToken> <(> <iToken> <)> <=> <","> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  EndIf          <End> <If> 
Procédure  =              <iToken> <=> <iToken> <+> <1> 
Procédure  If             <If> <iToken> <>> <iNbToken> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  Loop           <Loop> 
Procédure  If             <If> <iTokenType> <>> <0> <Then> 
Procédure  Call           <AjouteSymbole> <tsVariable> <,> <tToken> <(> <iTokenNom> <)> <,> <poPortée> <,> <tToken> <(> <iTokenType> <)> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  Call           <AjouteSymbole> <tsVariable> <,> <tToken> <(> <iTokenNom> <)> <,> <poPortée> <,> <""> 
Procédure  EndIf          <End> <If> 
Procédure  =              <iTokenNom> <=> <-1> 
Procédure  If             <If> <iToken> <>> <iNbToken> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  Call           <Assert> <tToken> <(> <iToken> <)> <=> <","> 
Procédure  Loop           <Loop> 
Procédure  If             <If> <iTokenNom> <>> <0> <Then> 
Procédure  If             <If> <iTokenType> <>> <0> <Then> 
Procédure  Call           <AjouteSymbole> <tsVariable> <,> <tToken> <(> <iTokenNom> <)> <,> <poPortée> <,> <tToken> <(> <iTokenType> <)> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  Call           <AjouteSymbole> <tsVariable> <,> <tToken> <(> <iTokenNom> <)> <,> <poPortée> <,> <""> 
Procédure  EndIf          <End> <If> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneDim

Symbole                   TypeSymb  Portée Type                 U Définition
poPortée                  Variable  Local  ePortée              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 334 
iTokenNom                 Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 353 
iTokenType                Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 353 
iToken                    Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 354 
iNiv                      Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 354 
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneConst> <(> <)> 
Procédure  Dim            <Dim> <poPortée> <As> <ePortée> 
Procédure  Dim            <Dim> <iToken> <As> <Integer> 
Procédure  Select         <Select> <Case> <elEtat> 
Procédure  Case           <Case> <elExterne> 
Procédure  If             <If> <tfTypeFichier> <=> <tfModule> <Then> 
Procédure  =              <poPortée> <=> <poGlobal> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  =              <poPortée> <=> <poModule> 
Procédure  EndIf          <End> <If> 
Procédure  Case           <Case> <elProcédure> 
Procédure  =              <poPortée> <=> <poLocal> 
Procédure  Case           <Case> 
Procédure  Else           <Else> 
Procédure  EOF            
Procédure  Stop           <Stop> 
Procédure  EndSelect      <End> <Select> 
Procédure  =              <iToken> <=> <1> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Private"> <Then> 
Procédure  Call           <Assert> <elEtat> <=> <elExterne> 
Procédure  =              <poPortée> <=> <poModule> 
Procédure  =              <iToken> <=> <iToken> <+> <1> 
Procédure  EndIf          <End> <If> 
Procédure  If             <If> <tToken> <(> <iToken> <)> <=> <"Public"> <Or> <tToken> <(> <iToken> <)> <=> <"Global"> <Then> 
Procédure  Call           <Assert> <elEtat> <=> <elExterne> 
Procédure  =              <poPortée> <=> <poGlobal> 
Procédure  =              <iToken> <=> <iToken> <+> <1> 
Procédure  EndIf          <End> <If> 
Procédure  Call           <Assert> <tToken> <(> <iToken> <)> <=> <"Const"> 
Procédure  Dim            <Dim> <iTokenNom> <As> <Integer> <,> <iTokenType> <As> <Integer> 
Procédure  Dim            <Dim> <iNiv> <As> <Integer> 
Procédure  Do             <Do> 
Procédure  =              <iToken> <=> <iToken> <+> <1> 
Procédure  =              <iTokenNom> <=> <iToken> 
Procédure  =              <iTokenType> <=> <-1> 
Procédure  =              <iToken> <=> <iToken> <+> <1> 
Procédure  If             <If> <iToken> <>> <iNbToken> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  =              <iNiv> <=> <0> 
Procédure  Do             <Do> 
Procédure  If             <If> <tToken> <(> <iToken> <)> <=> <"("> <Then> 
Procédure  =              <iNiv> <=> <iNiv> <+> <1> 
Procédure  ElseIf         <ElseIf> <tToken> <(> <iToken> <)> <=> <")"> <Then> 
Procédure  =              <iNiv> <=> <iNiv> <-> <1> 
Procédure  ElseIf         <ElseIf> <tToken> <(> <iToken> <)> <=> <"As"> <Then> 
Procédure  =              <iTokenType> <=> <iToken> <+> <1> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  If             <If> <iNiv> <=> <0> <And> <tToken> <(> <iToken> <)> <=> <","> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  EndIf          <End> <If> 
Procédure  =              <iToken> <=> <iToken> <+> <1> 
Procédure  If             <If> <iToken> <>> <iNbToken> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  Loop           <Loop> 
Procédure  If             <If> <iTokenType> <>> <0> <Then> 
Procédure  Call           <AjouteSymbole> <tsConstante> <,> <tToken> <(> <iTokenNom> <)> <,> <poPortée> <,> <tToken> <(> <iTokenType> <)> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  Call           <AjouteSymbole> <tsConstante> <,> <tToken> <(> <iTokenNom> <)> <,> <poPortée> <,> <""> 
Procédure  EndIf          <End> <If> 
Procédure  =              <iTokenNom> <=> <-1> 
Procédure  If             <If> <iToken> <>> <iNbToken> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  Call           <Assert> <tToken> <(> <iToken> <)> <=> <","> 
Procédure  Loop           <Loop> 
Procédure  If             <If> <iTokenNom> <>> <0> <Then> 
Procédure  If             <If> <iTokenType> <>> <0> <Then> 
Procédure  Call           <AjouteSymbole> <tsConstante> <,> <tToken> <(> <iTokenNom> <)> <,> <poPortée> <,> <tToken> <(> <iTokenType> <)> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  Call           <AjouteSymbole> <tsConstante> <,> <tToken> <(> <iTokenNom> <)> <,> <poPortée> <,> <""> 
Procédure  EndIf          <End> <If> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneConst

Symbole                   TypeSymb  Portée Type                 U Définition
poPortée                  Variable  Local  ePortée              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 410 
iToken                    Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 411 
iTokenNom                 Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 439 
iTokenType                Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 439 
iNiv                      Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 440 
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneType> <(> <)> 
Procédure  Dim            <Dim> <poPortée> <As> <ePortée> 
Procédure  Dim            <Dim> <iToken> <As> <Integer> 
Procédure  If             <If> <(> <tfTypeFichier> <=> <tfModule> <)> <Then> 
Procédure  =              <poPortée> <=> <poGlobal> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  =              <poPortée> <=> <poModule> 
Procédure  EndIf          <End> <If> 
Procédure  =              <iToken> <=> <1> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Private"> <Then> 
Procédure  =              <poPortée> <=> <poModule> 
Procédure  =              <iToken> <=> <iToken> <+> <1> 
Procédure  EndIf          <End> <If> 
Procédure  If             <If> <tToken> <(> <iToken> <)> <=> <"Public"> <Then> 
Procédure  =              <poPortée> <=> <poGlobal> 
Procédure  =              <iToken> <=> <iToken> <+> <1> 
Procédure  EndIf          <End> <If> 
Procédure  Call           <Assert> <tToken> <(> <iToken> <)> <=> <"Type"> 
Procédure  Call           <AjouteSymbole> <tsType> <,> <tToken> <(> <iToken> <+> <1> <)> <,> <poPortée> <,> <""> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneType

Symbole                   TypeSymb  Portée Type                 U Définition
poPortée                  Variable  Local  ePortée              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 492 
iToken                    Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 493 
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneEnum> <(> <)> 
Procédure  Dim            <Dim> <poPortée> <As> <ePortée> 
Procédure  Dim            <Dim> <iToken> <As> <Integer> 
Procédure  =              <poPortée> <=> <poGlobal> 
Procédure  =              <iToken> <=> <1> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Private"> <Then> 
Procédure  =              <poPortée> <=> <poModule> 
Procédure  =              <iToken> <=> <iToken> <+> <1> 
Procédure  EndIf          <End> <If> 
Procédure  If             <If> <tToken> <(> <iToken> <)> <=> <"Public"> <Then> 
Procédure  =              <poPortée> <=> <poGlobal> 
Procédure  =              <iToken> <=> <iToken> <+> <1> 
Procédure  EndIf          <End> <If> 
Procédure  Call           <Assert> <tToken> <(> <iToken> <)> <=> <"Enum"> 
Procédure  Call           <AjouteSymbole> <tsEnum> <,> <tToken> <(> <iToken> <+> <1> <)> <,> <poPortée> <,> <""> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneEnum

Symbole                   TypeSymb  Portée Type                 U Définition
poPortée                  Variable  Local  ePortée              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 519 
iToken                    Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 520 
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneBegin> <(> <)> 
Procédure  If             <If> <iNbToken> <=> <3> <Then> 
Procédure  Call           <AjouteSymbole> <tsObjet> <,> <tToken> <(> <3> <)> <,> <poModule> <,> <tToken> <(> <2> <)> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneBegin

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneGoTo> <(> <)> 
Procédure  Call           <UtiliseSymbole> <tsEtiquette> <,> <tToken> <(> <2> <)> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneGoTo

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneOn> <(> <)> 
Procédure  =              <iTokenExp> <=> <2> 
Procédure  Call           <Expression> 
Procédure  If             <If> <tToken> <(> <iTokenExp> <)> <=> <"Resume"> <Then> 
Procédure  Exit           <Exit> <Sub> 
Procédure  Call           <Assert> <tToken> <(> <iTokenExp> <)> <=> <"GoTo"> <Or> <tToken> <(> <iTokenExp> <)> <=> <"GoSub"> 
Procédure  If             <If> <tToken> <(> <iTokenExp> <+> <1> <)> <<>> <"0"> <Then> 
Procédure  Call           <UtiliseSymbole> <tsEtiquette> <,> <tToken> <(> <iTokenExp> <+> <1> <)> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneOn

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneResume> <(> <)> 
Procédure  If             <If> <iNbToken> <=> <1> <Then> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <tToken> <(> <2> <)> <=> <"Next"> <Then> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <tToken> <(> <2> <)> <=> <"0"> <Then> 
Procédure  Exit           <Exit> <Sub> 
Procédure  Call           <UtiliseSymbole> <tsEtiquette> <,> <tToken> <(> <2> <)> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneResume

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneAffectation> <(> <)> 
Procédure  =              <iTokenExp> <=> <1> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Let"> <Or> <tToken> <(> <1> <)> <=> <"Set"> <Then> 
Procédure  =              <iTokenExp> <=> <iTokenExp> <+> <1> 
Procédure  Do             <Do> 
Procédure  Call           <Expression> 
Procédure  If             <If> <iTokenExp> <>> <iNbToken> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  =              <iTokenExp> <=> <iTokenExp> <+> <1> 
Procédure  Loop           <Loop> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneAffectation

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseExpressions> <(> <ByVal> <iStart> <As> <Integer> <)> 
Procédure  =              <iTokenExp> <=> <iStart> 
Procédure  Do             <Do> 
Procédure  Call           <Expression> 
Procédure  If             <If> <iTokenExp> <>> <iNbToken> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  Call           <Assert> <tToken> <(> <iTokenExp> <)> <=> <","> <Or> <tToken> <(> <iTokenExp> <)> <=> <";"> 
Procédure  =              <iTokenExp> <=> <iTokenExp> <+> <1> 
Procédure  Loop           <Loop> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseExpressions

Symbole                   TypeSymb  Portée Type                 U Définition
iStart                    Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 585 
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseUneExpression> <(> <ByVal> <iStart> <As> <Integer> <)> 
Procédure  =              <iTokenExp> <=> <iStart> 
Procédure  Call           <Expression> 
Procédure  Call           <Assert> <iTokenExp> <>> <iNbToken> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseUneExpression

Symbole                   TypeSymb  Portée Type                 U Définition
iStart                    Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 597 
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneCall> <(> <)> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Call"> <Then> 
Procédure  Call           <AnalyseUneExpression> <2> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  Call           <UtiliseSymbole> <tsProcédure> <,> <tToken> <(> <1> <)> 
Procédure  Call           <AnalyseExpressions> <2> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneCall

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneRedim> <(> <)> 
Procédure  Dim            <Dim> <i> <As> <Integer> 
Procédure  =              <i> <=> <2> 
Procédure  If             <If> <tToken> <(> <2> <)> <=> <"Preserve"> <Then> 
Procédure  =              <i> <=> <3> 
Procédure  Call           <AnalyseExpressions> <i> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneRedim

Symbole                   TypeSymb  Portée Type                 U Définition
i                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 615 
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneWith> <(> <)> 
Procédure  Call           <AnalyseUneExpression> <2> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneWith

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneFor> <(> <)> 
Procédure  Call           <AnalyseUneExpression> <2> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneFor

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneForEach> <(> <)> 
Procédure  Call           <AnalyseUneExpression> <3> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneForEach

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneWhile> <(> <)> 
Procédure  Call           <AnalyseUneExpression> <2> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneWhile

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneDoLoop> <(> <)> 
Procédure  If             <If> <iNbToken> <=> <1> <Then> 
Procédure  Exit           <Exit> <Sub> 
Procédure  Call           <Assert> <tToken> <(> <2> <)> <=> <"While"> <Or> <tToken> <(> <2> <)> <=> <"Until"> 
Procédure  Call           <AnalyseUneExpression> <3> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneDoLoop

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneSelect> <(> <)> 
Procédure  Call           <AnalyseUneExpression> <3> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneSelect

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneCase> <(> <)> 
Procédure  Call           <AnalyseExpressions> <2> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneCase

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneIf> <(> <)> 
Procédure  =              <iTokenExp> <=> <2> 
Procédure  Call           <Expression> 
Procédure  Call           <Assert> <tToken> <(> <iTokenExp> <)> <=> <"Then"> 
Procédure  =              <iTokenExp> <=> <iTokenExp> <+> <1> 
Procédure  Call           <Assert> <iTokenExp> <>> <iNbToken> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneIf

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLignePrint> <(> <)> 
Procédure  Call           <AnalyseExpressions> <2> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLignePrint

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneInput> <(> <)> 
Procédure  Dim            <Dim> <i> <As> <Integer> 
Procédure  =              <i> <=> <2> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Line"> <Then> 
Procédure  =              <i> <=> <3> 
Procédure  Call           <AnalyseExpressions> <i> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneInput

Symbole                   TypeSymb  Portée Type                 U Définition
i                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 665 
===============================================

Procédure  Procédure      <Private> <Sub> <AnalyseLigneOpen> <(> <)> 
Procédure  =              <iTokenExp> <=> <2> 
Procédure  Call           <Expression> 
Procédure  Call           <Assert> <tToken> <(> <iTokenExp> <)> <=> <"For"> 
Procédure  Do             <Do> 
Procédure  =              <iTokenExp> <=> <iTokenExp> <+> <1> 
Procédure  Call           <Assert> <tToken> <(> <iTokenExp> <)> <<>> <""> 
Procédure  If             <If> <tToken> <(> <iTokenExp> <)> <=> <"As"> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  Loop           <Loop> 
Procédure  =              <iTokenExp> <=> <iTokenExp> <+> <1> 
Procédure  Call           <Expression> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  AnalyseLigneOpen

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <isMotClé> <(> <ByVal> <sNom> <As> <String> <)> 
Procédure  =              <isMotClé> <=> <True> 
Procédure  Select         <Select> <Case> <sNom> 
Procédure  Case           <Case> <"To"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Step"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Is"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"In"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"As"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Len"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Space"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Tab"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Err"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Error"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Name"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Kill"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Open"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Close"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Reset"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Print"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Write"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Input"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Now"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Timer"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Date"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Time"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Year"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Month"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"WeekDay"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Day"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Hour"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Minute"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Second"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Abs"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Atn"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Cos"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Exp"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Fix"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Int"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Log"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Rnd"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Sgn"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Sin"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Sqr"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Tan"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"CBool"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"CByte"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"CCur"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"CDate"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"CDbl"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"CDec"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"CInt"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"CLng"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"CSng"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"CVar"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"CStr"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Asc"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Chr"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Format"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Hex"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Oct"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Str"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Val"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Mid"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Left"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Right"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"InStr"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"LCase"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"UCase"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"IsNumeric"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"IsArray"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"IsDate"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"IsEmpty"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"IsError"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"IsMissing"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"IsNull"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"IsObject"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"PSet"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Circle"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Line"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"False"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"True"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"Me"> 
Procédure  Exit           <Exit> <Function> 
Procédure  Case           <Case> <"DoEvents"> 
Procédure  Exit           <Exit> <Function> 
Procédure  EndSelect      <End> <Select> 
Procédure  =              <isMotClé> <=> <False> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  isMotClé

Symbole                   TypeSymb  Portée Type                 U Définition
sNom                      Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 686 
===============================================


===============================================
Table des symboles Module 

Symbole                   TypeSymb  Portée Type                 U Définition
colSymboles               Variable  Module Collection           T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 8 
bExisteObjet              Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 99 
AnalyseLigneProcédure     Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 187 
AnalyseLigneLabel         Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 252 
AnalyseLigneDim           Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 333 
AnalyseLigneConst         Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 409 
AnalyseLigneType          Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 491 
AnalyseLigneEnum          Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 518 
AnalyseLigneBegin         Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 541 
AnalyseLigneGoTo          Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 549 
AnalyseLigneOn            Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 553 
AnalyseLigneResume        Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 563 
AnalyseLigneAffectation   Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 573 
AnalyseLigneCall          Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 605 
AnalyseLigneRedim         Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 614 
AnalyseLigneWith          Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 621 
AnalyseLigneFor           Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 625 
AnalyseLigneForEach       Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 629 
AnalyseLigneWhile         Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 633 
AnalyseLigneDoLoop        Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 637 
AnalyseLigneSelect        Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 643 
AnalyseLigneCase          Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 647 
AnalyseLigneIf            Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 651 
AnalyseLigneOpen          Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 671 
AnalyseLignePrint         Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 659 
AnalyseLigneInput         Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 664 
AjouteSymbole             Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 287 
AjouteSymboleSimple       Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 258 
isMotClé                  Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 686 
AnalyseExpressions        Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 585 
AnalyseUneExpression      Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\TableDesSymboles.bas, 597 
===============================================


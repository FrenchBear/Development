Attributes Attribute      <Attribute> <VB_Name> <=> <"SyntaxeLigne"> 
Externe    Option         <Option> <Explicit> 
Enum       Enum           <Enum> <eTypeLigne> 
Enum       ConstEnum      <tlEOF> 
Enum       ConstEnum      <tlVersion> 
Enum       ConstEnum      <tlBeginProperty> 
Enum       ConstEnum      <tlEndProperty> 
Enum       ConstEnum      <tlAttribute> 
Enum       ConstEnum      <tlOption> 
Enum       ConstEnum      <tlPréprocesseur> 
Enum       ConstEnum      <tlDeclare> 
Enum       ConstEnum      <tlConst> 
Enum       ConstEnum      <tlDef> 
Enum       ConstEnum      <tlForEach> 
Enum       ConstEnum      <tlFor> 
Enum       ConstEnum      <tlNext> 
Enum       ConstEnum      <tlExit> 
Enum       ConstEnum      <tlIf> 
Enum       ConstEnum      <tlElse> 
Enum       ConstEnum      <tlElseIf> 
Enum       ConstEnum      <tlEndIf> 
Enum       ConstEnum      <tlWhile> 
Enum       ConstEnum      <tlWend> 
Enum       ConstEnum      <tlDo> 
Enum       ConstEnum      <tlLoop> 
Enum       ConstEnum      <tlSelect> 
Enum       ConstEnum      <tlCase> 
Enum       ConstEnum      <tlEndSelect> 
Enum       ConstEnum      <tlLabel> 
Enum       ConstEnum      <tlGoTo> 
Enum       ConstEnum      <tlGosub> 
Enum       ConstEnum      <tlReturn> 
Enum       ConstEnum      <tlOn> 
Enum       ConstEnum      <tlResume> 
Enum       ConstEnum      <tlWith> 
Enum       ConstEnum      <tlEndWith> 
Enum       ConstEnum      <tlProcédure> 
Enum       ConstEnum      <tlEndSub> 
Enum       ConstEnum      <tlEnum> 
Enum       ConstEnum      <tlConstEnum> 
Enum       ConstEnum      <tlEndEnum> 
Enum       ConstEnum      <tlType> 
Enum       ConstEnum      <tlEndType> 
Enum       ConstEnum      <tlChampType> 
Enum       ConstEnum      <tlBegin> 
Enum       ConstEnum      <tlEnd> 
Enum       ConstEnum      <tlDim> 
Enum       ConstEnum      <tlRedim> 
Enum       ConstEnum      <tlStop> 
Enum       ConstEnum      <tlOpen> 
Enum       ConstEnum      <tlInput> 
Enum       ConstEnum      <tlPrint> 
Enum       ConstEnum      <tlWrite> 
Enum       ConstEnum      <tlAffectation> 
Enum       ConstEnum      <tlCall> 
Enum       EndEnum        <End> <Enum> 
Externe    Dim            <Public> <tlTypeLigne> <As> <eEtatLigne> 
Procédure  Procédure      <Function> <sTypeLigne> <(> <tl> <As> <eTypeLigne> <)> <As> <String> 
Procédure  Select         <Select> <Case> <tl> 
Procédure  Case           <Case> <tlEOF> 
Procédure  =              <sTypeLigne> <=> <"EOF"> 
Procédure  Case           <Case> <tlVersion> 
Procédure  =              <sTypeLigne> <=> <"Version"> 
Procédure  Case           <Case> <tlBeginProperty> 
Procédure  =              <sTypeLigne> <=> <"BeginProperty"> 
Procédure  Case           <Case> <tlEndProperty> 
Procédure  =              <sTypeLigne> <=> <"EndProperty"> 
Procédure  Case           <Case> <tlAttribute> 
Procédure  =              <sTypeLigne> <=> <"Attribute"> 
Procédure  Case           <Case> <tlOption> 
Procédure  =              <sTypeLigne> <=> <"Option"> 
Procédure  Case           <Case> <tlPréprocesseur> 
Procédure  =              <sTypeLigne> <=> <"#"> 
Procédure  Case           <Case> <tlDeclare> 
Procédure  =              <sTypeLigne> <=> <"Declare"> 
Procédure  Case           <Case> <tlConst> 
Procédure  =              <sTypeLigne> <=> <"Const"> 
Procédure  Case           <Case> <tlDef> 
Procédure  =              <sTypeLigne> <=> <"Def"> 
Procédure  Case           <Case> <tlForEach> 
Procédure  =              <sTypeLigne> <=> <"ForEach"> 
Procédure  Case           <Case> <tlFor> 
Procédure  =              <sTypeLigne> <=> <"For"> 
Procédure  Case           <Case> <tlNext> 
Procédure  =              <sTypeLigne> <=> <"Next"> 
Procédure  Case           <Case> <tlExit> 
Procédure  =              <sTypeLigne> <=> <"Exit"> 
Procédure  Case           <Case> <tlIf> 
Procédure  =              <sTypeLigne> <=> <"If"> 
Procédure  Case           <Case> <tlElse> 
Procédure  =              <sTypeLigne> <=> <"Else"> 
Procédure  Case           <Case> <tlElseIf> 
Procédure  =              <sTypeLigne> <=> <"ElseIf"> 
Procédure  Case           <Case> <tlEndIf> 
Procédure  =              <sTypeLigne> <=> <"EndIf"> 
Procédure  Case           <Case> <tlWhile> 
Procédure  =              <sTypeLigne> <=> <"While"> 
Procédure  Case           <Case> <tlWend> 
Procédure  =              <sTypeLigne> <=> <"Wend"> 
Procédure  Case           <Case> <tlDo> 
Procédure  =              <sTypeLigne> <=> <"Do"> 
Procédure  Case           <Case> <tlLoop> 
Procédure  =              <sTypeLigne> <=> <"Loop"> 
Procédure  Case           <Case> <tlSelect> 
Procédure  =              <sTypeLigne> <=> <"Select"> 
Procédure  Case           <Case> <tlCase> 
Procédure  =              <sTypeLigne> <=> <"Case"> 
Procédure  Case           <Case> <tlEndSelect> 
Procédure  =              <sTypeLigne> <=> <"EndSelect"> 
Procédure  Case           <Case> <tlLabel> 
Procédure  =              <sTypeLigne> <=> <"Label"> 
Procédure  Case           <Case> <tlGoTo> 
Procédure  =              <sTypeLigne> <=> <"GoTo"> 
Procédure  Case           <Case> <tlGosub> 
Procédure  =              <sTypeLigne> <=> <"GoSub"> 
Procédure  Case           <Case> <tlReturn> 
Procédure  =              <sTypeLigne> <=> <"Return"> 
Procédure  Case           <Case> <tlOn> 
Procédure  =              <sTypeLigne> <=> <"On"> 
Procédure  Case           <Case> <tlResume> 
Procédure  =              <sTypeLigne> <=> <"Resume"> 
Procédure  Case           <Case> <tlWith> 
Procédure  =              <sTypeLigne> <=> <"With"> 
Procédure  Case           <Case> <tlEndWith> 
Procédure  =              <sTypeLigne> <=> <"EndWith"> 
Procédure  Case           <Case> <tlProcédure> 
Procédure  =              <sTypeLigne> <=> <"Procédure"> 
Procédure  Case           <Case> <tlEndSub> 
Procédure  =              <sTypeLigne> <=> <"EndSub"> 
Procédure  Case           <Case> <tlEnum> 
Procédure  =              <sTypeLigne> <=> <"Enum"> 
Procédure  Case           <Case> <tlConstEnum> 
Procédure  =              <sTypeLigne> <=> <"ConstEnum"> 
Procédure  Case           <Case> <tlEndEnum> 
Procédure  =              <sTypeLigne> <=> <"EndEnum"> 
Procédure  Case           <Case> <tlType> 
Procédure  =              <sTypeLigne> <=> <"Type"> 
Procédure  Case           <Case> <tlEndType> 
Procédure  =              <sTypeLigne> <=> <"EndType"> 
Procédure  Case           <Case> <tlChampType> 
Procédure  =              <sTypeLigne> <=> <"ChampType"> 
Procédure  Case           <Case> <tlBegin> 
Procédure  =              <sTypeLigne> <=> <"Begin"> 
Procédure  Case           <Case> <tlEnd> 
Procédure  =              <sTypeLigne> <=> <"End"> 
Procédure  Case           <Case> <tlDim> 
Procédure  =              <sTypeLigne> <=> <"Dim"> 
Procédure  Case           <Case> <tlRedim> 
Procédure  =              <sTypeLigne> <=> <"ReDim"> 
Procédure  Case           <Case> <tlStop> 
Procédure  =              <sTypeLigne> <=> <"Stop"> 
Procédure  Case           <Case> <tlOpen> 
Procédure  =              <sTypeLigne> <=> <"Open"> 
Procédure  Case           <Case> <tlInput> 
Procédure  =              <sTypeLigne> <=> <"Input"> 
Procédure  Case           <Case> <tlPrint> 
Procédure  =              <sTypeLigne> <=> <"Print"> 
Procédure  Case           <Case> <tlWrite> 
Procédure  =              <sTypeLigne> <=> <"Write"> 
Procédure  Case           <Case> <tlAffectation> 
Procédure  =              <sTypeLigne> <=> <"="> 
Procédure  Case           <Case> <tlCall> 
Procédure  =              <sTypeLigne> <=> <"Call"> 
Procédure  Case           <Case> 
Procédure  Else           <Else> 
Procédure  EOF            
Procédure  Stop           <Stop> 
Procédure  EndSelect      <End> <Select> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  sTypeLigne

Symbole                   TypeSymb  Portée Type                 U Définition
tl                        Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 66 
===============================================

Procédure  Procédure      <Sub> <DétermineTypeLigne> <(> <)> 
Procédure  If             <If> <iNbToken> <=> <0> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlEOF> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeVersion> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlVersion> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeBeginProperty> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlBeginProperty> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeEndProperty> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlEndProperty> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeOption> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlOption> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypePréprocesseur> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlPréprocesseur> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeDeclare> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlDeclare> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeConst> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlConst> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeDef> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlDef> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeForEach> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlForEach> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeFor> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlFor> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeNext> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlNext> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeExit> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlExit> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeIf> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlIf> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeElse> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlElse> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeElseIf> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlElseIf> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeEndIf> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlEndIf> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeWhile> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlWhile> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeWend> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlWend> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeDo> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlDo> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeLoop> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlLoop> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeSelect> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlSelect> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeCase> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlCase> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeEndSelect> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlEndSelect> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeLabel> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlLabel> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeGoTo> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlGoTo> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeGoSub> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlGosub> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeReturn> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlReturn> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeOn> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlOn> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeResume> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlResume> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeWith> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlWith> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeEndWith> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlEndWith> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeProcédure> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlProcédure> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeEndSub> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlEndSub> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeEnum> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlEnum> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeEndEnum> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlEndEnum> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeType> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlType> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeEndType> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlEndType> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeChampType> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlChampType> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeBegin> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlBegin> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeEnd> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlEnd> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeDim> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlDim> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeReDim> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlRedim> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeStop> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlStop> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeOpen> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlOpen> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeInput> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlInput> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypePrint> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlPrint> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeWrite> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlWrite> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeAttribute> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlAttribute> 
Procédure  Exit           <Exit> <Sub> 
Procédure  If             <If> <bTypeAffectation> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlAffectation> 
Procédure  Exit           <Exit> <Sub> 
Procédure  =              <tlTypeLigne> <=> <tlCall> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  DétermineTypeLigne

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeBeginProperty> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeBeginProperty> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"BeginProperty"> <Then> 
Procédure  =              <bTypeBeginProperty> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeBeginProperty

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeEndProperty> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeEndProperty> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"EndProperty"> <Then> 
Procédure  =              <bTypeEndProperty> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeEndProperty

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeOption> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeOption> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Option"> <Then> 
Procédure  =              <bTypeOption> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeOption

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypePréprocesseur> <(> <)> <As> <Boolean> 
Procédure  =              <bTypePréprocesseur> <=> <False> 
Procédure  If             <If> <Left> <(> <tToken> <(> <1> <)> <,> <1> <)> <=> <"#"> <Then> 
Procédure  =              <bTypePréprocesseur> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypePréprocesseur

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeDeclare> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeDeclare> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Declare"> <Then> 
Procédure  =              <bTypeDeclare> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeDeclare

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeForEach> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeForEach> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"For"> <And> <tToken> <(> <2> <)> <=> <"Each"> <Then> 
Procédure  =              <bTypeForEach> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeForEach

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeFor> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeFor> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"For"> <Then> 
Procédure  =              <bTypeFor> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeFor

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeNext> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeNext> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Next"> <Then> 
Procédure  =              <bTypeNext> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeNext

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeIf> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeIf> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"If"> <Then> 
Procédure  =              <bTypeIf> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeIf

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeElse> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeElse> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Else"> <Then> 
Procédure  =              <bTypeElse> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeElse

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeElseIf> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeElseIf> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"ElseIf"> <Then> 
Procédure  =              <bTypeElseIf> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeElseIf

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeEndIf> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeEndIf> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"End"> <And> <tToken> <(> <2> <)> <=> <"If"> <Then> 
Procédure  =              <bTypeEndIf> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeEndIf

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeSelect> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeSelect> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Select"> <Then> 
Procédure  =              <bTypeSelect> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeSelect

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeCase> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeCase> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Case"> <Then> 
Procédure  =              <bTypeCase> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeCase

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeEndSelect> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeEndSelect> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"End"> <And> <tToken> <(> <2> <)> <=> <"Select"> <Then> 
Procédure  =              <bTypeEndSelect> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeEndSelect

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeWhile> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeWhile> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"While"> <Then> 
Procédure  =              <bTypeWhile> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeWhile

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeWend> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeWend> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Wend"> <Then> 
Procédure  =              <bTypeWend> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeWend

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeDo> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeDo> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Do"> <Then> 
Procédure  =              <bTypeDo> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeDo

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeLoop> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeLoop> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Loop"> <Then> 
Procédure  =              <bTypeLoop> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeLoop

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeLabel> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeLabel> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"_Label"> <Then> 
Procédure  =              <bTypeLabel> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeLabel

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeGoTo> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeGoTo> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"GoTo"> <Then> 
Procédure  =              <bTypeGoTo> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeGoTo

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeGoSub> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeGoSub> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"GoSub"> <Then> 
Procédure  =              <bTypeGoSub> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeGoSub

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeReturn> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeReturn> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Return"> <Then> 
Procédure  =              <bTypeReturn> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeReturn

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeExit> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeExit> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Exit"> <Then> 
Procédure  =              <bTypeExit> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeExit

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeEndSub> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeEndSub> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"End"> <And> <(> <tToken> <(> <2> <)> <=> <"Sub"> <Or> <tToken> <(> <2> <)> <=> <"Function"> <Or> <tToken> <(> <2> <)> <=> <"Property"> <)> <Then> 
Procédure  =              <bTypeEndSub> <=> <True> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeEndSub

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeProcédure> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeProcédure> <=> <False> 
Procédure  Dim            <Dim> <i> <As> <Integer> 
Procédure  =              <i> <=> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Private"> <Or> <tToken> <(> <i> <)> <=> <"Public"> <Or> <tToken> <(> <i> <)> <=> <"Friend"> <Then> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Static"> <Then> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Function"> <Or> <tToken> <(> <i> <)> <=> <"Sub"> <Or> <tToken> <(> <i> <)> <=> <"Property"> <Then> 
Procédure  =              <bTypeProcédure> <=> <True> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeProcédure

Symbole                   TypeSymb  Portée Type                 U Définition
i                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 334 
===============================================

Procédure  Procédure      <Private> <Function> <bTypeDim> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeDim> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Dim"> <Or> <tToken> <(> <1> <)> <=> <"Static"> <Or> <tToken> <(> <1> <)> <=> <"Private"> <Or> <tToken> <(> <1> <)> <=> <"Public"> <Or> <tToken> <(> <1> <)> <=> <"Global"> <Then> 
Procédure  =              <bTypeDim> <=> <True> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeDim

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeReDim> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeReDim> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"ReDim"> <Then> 
Procédure  =              <bTypeReDim> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeReDim

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeConst> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeConst> <=> <False> 
Procédure  Dim            <Dim> <i> <As> <Integer> 
Procédure  =              <i> <=> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Private"> <Or> <tToken> <(> <i> <)> <=> <"Public"> <Or> <tToken> <(> <i> <)> <=> <"Global"> <Then> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Const"> <Then> 
Procédure  =              <bTypeConst> <=> <True> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeConst

Symbole                   TypeSymb  Portée Type                 U Définition
i                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 358 
===============================================

Procédure  Procédure      <Private> <Function> <bTypeEnum> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeEnum> <=> <False> 
Procédure  Dim            <Dim> <i> <As> <Integer> 
Procédure  =              <i> <=> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Private"> <Or> <tToken> <(> <i> <)> <=> <"Public"> <Then> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Enum"> <Then> 
Procédure  =              <bTypeEnum> <=> <True> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeEnum

Symbole                   TypeSymb  Portée Type                 U Définition
i                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 368 
===============================================

Procédure  Procédure      <Private> <Function> <bTypeEndEnum> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeEndEnum> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"End"> <And> <tToken> <(> <2> <)> <=> <"Enum"> <Then> 
Procédure  =              <bTypeEndEnum> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeEndEnum

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeType> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeType> <=> <False> 
Procédure  Dim            <Dim> <i> <As> <Integer> 
Procédure  =              <i> <=> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Private"> <Or> <tToken> <(> <i> <)> <=> <"Public"> <Then> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Type"> <Then> 
Procédure  =              <bTypeType> <=> <True> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeType

Symbole                   TypeSymb  Portée Type                 U Définition
i                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 384 
===============================================

Procédure  Procédure      <Private> <Function> <bTypeEndType> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeEndType> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"End"> <And> <tToken> <(> <2> <)> <=> <"Type"> <Then> 
Procédure  =              <bTypeEndType> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeEndType

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeChampType> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeChampType> <=> <False> 
Procédure  Dim            <Dim> <i> <As> <Integer> <,> <iNiv> <As> <Integer> 
Procédure  =              <i> <=> <2> 
Procédure  =              <iNiv> <=> <0> 
Procédure  Do             <Do> <While> <i> <<> <iNbToken> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"("> <Then> 
Procédure  =              <iNiv> <=> <iNiv> <+> <1> 
Procédure  ElseIf         <ElseIf> <tToken> <(> <i> <)> <=> <")"> <Then> 
Procédure  =              <iNiv> <=> <iNiv> <-> <1> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  If             <If> <iNiv> <=> <0> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  EndIf          <End> <If> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  Loop           <Loop> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"As"> <Then> 
Procédure  =              <bTypeChampType> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeChampType

Symbole                   TypeSymb  Portée Type                 U Définition
i                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 400 
iNiv                      Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 400 
===============================================

Procédure  Procédure      <Private> <Function> <bTypeDef> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeDef> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"DefBool"> <Or> <tToken> <(> <1> <)> <=> <"DefByte"> <Or> <tToken> <(> <1> <)> <=> <"DefInt"> <Or> <tToken> <(> <1> <)> <=> <"DefLng"> <Or> <tToken> <(> <1> <)> <=> <"DefCur"> <Or> <tToken> <(> <1> <)> <=> <"DefSng"> <Or> <tToken> <(> <1> <)> <=> <"DefDbl"> <Or> <tToken> <(> <1> <)> <=> <"DefDec"> <Or> <tToken> <(> <1> <)> <=> <"DefDate"> <Or> <tToken> <(> <1> <)> <=> <"DefStr"> <Or> <tToken> <(> <1> <)> <=> <"DefObj"> <Or> <tToken> <(> <1> <)> <=> <"DefVar"> <Then> 
Procédure  =              <bTypeDef> <=> <True> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeDef

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeOn> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeOn> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"On"> <Then> 
Procédure  =              <bTypeOn> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeOn

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeResume> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeResume> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Resume"> <Then> 
Procédure  =              <bTypeResume> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeResume

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeWith> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeWith> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"With"> <Then> 
Procédure  =              <bTypeWith> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeWith

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeEndWith> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeEndWith> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"End"> <And> <tToken> <(> <2> <)> <=> <"With"> <Then> 
Procédure  =              <bTypeEndWith> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeEndWith

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeAttribute> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeAttribute> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Attribute"> <Then> 
Procédure  =              <bTypeAttribute> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeAttribute

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeAffectation> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeAffectation> <=> <False> 
Procédure  Dim            <Dim> <i> <As> <Integer> <,> <iNiv> <As> <Integer> 
Procédure  =              <i> <=> <1> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Let"> <Or> <tToken> <(> <1> <)> <=> <"Set"> <Then> 
Procédure  =              <i> <=> <2> 
Procédure  If             <If> <tToken> <(> <i> <+> <1> <)> <=> <"="> <Then> 
Procédure  =              <bTypeAffectation> <=> <True> 
Procédure  ElseIf         <ElseIf> <tToken> <(> <i> <+> <1> <)> <=> <"("> <Then> 
Procédure  =              <i> <=> <i> <+> <2> 
Procédure  =              <iNiv> <=> <1> 
Procédure  Do             <Do> <While> <i> <<> <iNbToken> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"("> <Then> 
Procédure  =              <iNiv> <=> <iNiv> <+> <1> 
Procédure  ElseIf         <ElseIf> <tToken> <(> <i> <)> <=> <")"> <Then> 
Procédure  =              <iNiv> <=> <iNiv> <-> <1> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  If             <If> <iNiv> <=> <0> <And> <Left> <(> <tToken> <(> <i> <)> <,> <1> <)> <<>> <"."> <And> <Left> <(> <tToken> <(> <i> <)> <,> <1> <)> <<>> <"!"> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  EndIf          <End> <If> 
Procédure  =              <i> <=> <i> <+> <1> 
Procédure  Loop           <Loop> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"="> <Then> 
Procédure  =              <bTypeAffectation> <=> <True> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeAffectation

Symbole                   TypeSymb  Portée Type                 U Définition
i                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 458 
iNiv                      Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 458 
===============================================

Procédure  Procédure      <Private> <Function> <bTypeBegin> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeBegin> <=> <False> 
Procédure  If             <If> <LCase> <(> <tToken> <(> <1> <)> <)> <=> <"begin"> <Then> 
Procédure  =              <bTypeBegin> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeBegin

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeEnd> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeEnd> <=> <False> 
Procédure  If             <If> <LCase> <(> <tToken> <(> <1> <)> <)> <=> <"end"> <Then> 
Procédure  =              <bTypeEnd> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeEnd

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeVersion> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeVersion> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"VERSION"> <Then> 
Procédure  =              <bTypeVersion> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeVersion

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeStop> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeStop> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Stop"> <Then> 
Procédure  =              <bTypeStop> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeStop

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeOpen> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeOpen> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Open"> <Then> 
Procédure  =              <bTypeOpen> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeOpen

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeInput> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeInput> <=> <False> 
Procédure  Dim            <Dim> <i> <As> <Integer> 
Procédure  =              <i> <=> <1> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Line"> <Then> 
Procédure  =              <i> <=> <2> 
Procédure  If             <If> <tToken> <(> <i> <)> <=> <"Input"> <Then> 
Procédure  =              <bTypeInput> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeInput

Symbole                   TypeSymb  Portée Type                 U Définition
i                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 512 
===============================================

Procédure  Procédure      <Private> <Function> <bTypePrint> <(> <)> <As> <Boolean> 
Procédure  =              <bTypePrint> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Print"> <Then> 
Procédure  =              <bTypePrint> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypePrint

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Private> <Function> <bTypeWrite> <(> <)> <As> <Boolean> 
Procédure  =              <bTypeWrite> <=> <False> 
Procédure  If             <If> <tToken> <(> <1> <)> <=> <"Write"> <Then> 
Procédure  =              <bTypeWrite> <=> <True> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  bTypeWrite

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================


===============================================
Table des symboles Module 

Symbole                   TypeSymb  Portée Type                 U Définition
bTypeVersion              Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 494 
bTypeBeginProperty        Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 201 
bTypeEndProperty          Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 206 
bTypeOption               Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 212 
bTypePréprocesseur        Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 217 
bTypeDeclare              Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 222 
bTypeConst                Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 356 
bTypeDef                  Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 417 
bTypeForEach              Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 227 
bTypeFor                  Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 232 
bTypeNext                 Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 237 
bTypeExit                 Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 320 
bTypeIf                   Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 242 
bTypeElse                 Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 247 
bTypeElseIf               Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 252 
bTypeEndIf                Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 257 
bTypeWhile                Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 279 
bTypeWend                 Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 284 
bTypeDo                   Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 289 
bTypeLoop                 Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 294 
bTypeSelect               Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 263 
bTypeCase                 Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 268 
bTypeEndSelect            Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 273 
bTypeLabel                Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 299 
bTypeGoTo                 Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 304 
bTypeGoSub                Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 309 
bTypeReturn               Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 314 
bTypeOn                   Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 428 
bTypeResume               Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 433 
bTypeWith                 Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 439 
bTypeEndWith              Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 444 
bTypeProcédure            Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 332 
bTypeEndSub               Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 325 
bTypeEnum                 Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 366 
bTypeEndEnum              Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 376 
bTypeType                 Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 382 
bTypeEndType              Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 392 
bTypeChampType            Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 398 
bTypeBegin                Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 482 
bTypeEnd                  Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 489 
bTypeDim                  Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 343 
bTypeReDim                Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 350 
bTypeStop                 Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 500 
bTypeOpen                 Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 505 
bTypeInput                Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 510 
bTypePrint                Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 518 
bTypeWrite                Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 523 
bTypeAttribute            Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 450 
bTypeAffectation          Procédure Module Function             T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeLigne.bas, 456 
===============================================


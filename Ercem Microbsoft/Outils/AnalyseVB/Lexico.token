Attributes Attribute      <Attribute> <VB_Name> <=> <"Lexico"> 
Externe    Option         <Option> <Explicit> 
Externe    Dim            <Public> <sLigneSource> <As> <String> 
Externe    Dim            <Public> <iNuméroLigne> <As> <Long> 
Externe    Dim            <Private> <m_iOff> <As> <Integer> 
Externe    Dim            <Private> <m_iNextOff> <As> <Integer> 
Externe    Dim            <Private> <m_iNbToken> <As> <Integer> 
Externe    Dim            <Private> <m_tToken> <(> <)> <As> <Variant> 
Procédure  Procédure      <Private> <Sub> <NextLigneInterne> <(> <)> 
Procédure  Dim            <Dim> <s2> <As> <String> 
Procédure  Dim            <Dim> <bSuite> <As> <Boolean> 
Procédure  =              <sLigneSource> <=> <""> 
Procédure  =              <m_iNbToken> <=> <0> 
Procédure  ReDim          <ReDim> <tToken> <(> <iNbToken> <)> 
Procédure  Do             <Do> 
Procédure  Input          <Line> <Input> <#> <1> <,> <s2> 
Procédure  =              <iNuméroLigne> <=> <iNuméroLigne> <+> <1> 
Procédure  =              <frmAnalyse.txtLigneEnCours> <=> <iNuméroLigne> 
Procédure  If             <If> <iNuméroLigne> <Mod> <10> <=> <0> <Then> 
Procédure  Call           <frmAnalyse.txtLigneEnCours.Refresh> 
Procédure  EndIf          <End> <If> 
Procédure  Dim            <Dim> <p> <As> <Integer> <,> <p0> <As> <Integer> 
Procédure  =              <p> <=> <1> 
Procédure  =              <sLigneSource> <=> <sLigneSource> <&> <s2> 
Procédure  =              <s2> <=> <Trim> <(> <s2> <)> 
Procédure  If             <If> <s2> <=> <""> <Then> 
Procédure  Exit           <Exit> <Sub> 
Procédure  =              <bSuite> <=> <False> 
Procédure  Do             <Do> 
Procédure  =              <p0> <=> <p> 
Procédure  Select         <Select> <Case> <Mid> <(> <s2> <,> <p> <,> <1> <)> 
Procédure  Case           <Case> <" "> 
Procédure  Stop           <Stop> 
Procédure  Case           <Case> <"'"> 
Procédure  GoTo           <GoTo> <FinInstruction> 
Procédure  Case           <Case> <""""> 
Procédure  Do             <Do> 
Procédure  =              <p> <=> <p> <+> <1> 
Procédure  Loop           <Loop> <Until> <Mid> <(> <s2> <,> <p> <,> <1> <)> <=> <Chr> <(> <34> <)> <And> <Mid> <(> <s2> <,> <p> <+> <1> <,> <1> <)> <<>> <Chr> <(> <34> <)> 
Procédure  If             <If> <Mid> <(> <s2> <,> <p> <+> <1> <,> <1> <)> <=> <":"> <And> <Mid> <(> <s2> <,> <p> <+> <2> <,> <1> <)> <<>> <""> <And> <Mid> <(> <s2> <,> <p> <+> <2> <,> <1> <)> <<>> <" "> <Then> 
Procédure  =              <p> <=> <p> <+> <1> 
Procédure  While          <While> <Mid> <(> <s2> <,> <p> <+> <1> <,> <1> <)> <<>> <""> <And> <Mid> <(> <s2> <,> <p> <+> <1> <,> <1> <)> <<>> <" "> 
Procédure  =              <p> <=> <p> <+> <1> 
Procédure  Wend           <Wend> 
Procédure  EndIf          <End> <If> 
Procédure  Case           <Case> <"-"> 
Procédure  If             <If> <Mid> <(> <s2> <,> <p> <+> <1> <,> <1> <)> <>=> <"0"> <And> <Mid> <(> <s2> <,> <p> <+> <1> <,> <1> <)> <<=> <"9"> <Then> 
Procédure  GoTo           <GoTo> <CasNormal> 
Procédure  Case           <Case> <":"> 
Procédure  If             <If> <iNbToken> <=> <1> <Then> 
Procédure  =              <m_iNbToken> <=> <m_iNbToken> <+> <1> 
Procédure  ReDim          <ReDim> <Preserve> <m_tToken> <(> <m_iNbToken> <)> 
Procédure  =              <m_tToken> <(> <2> <)> <=> <m_tToken> <(> <1> <)> 
Procédure  =              <m_tToken> <(> <1> <)> <=> <"_Label"> 
Procédure  EndIf          <End> <If> 
Procédure  If             <If> <Mid> <(> <s2> <,> <p> <+> <1> <,> <1> <)> <=> <"="> <Then> 
Procédure  =              <p> <=> <p> <+> <1> 
Procédure  Case           <Case> <"#"> 
Procédure  Dim            <Dim> <pSauve> <As> <Integer> 
Procédure  =              <pSauve> <=> <p> 
Procédure  =              <p> <=> <p> <+> <1> 
Procédure  While          <While> <Mid> <(> <s2> <,> <p> <,> <1> <)> <<>> <""> <And> <InStr> <(> <"0123456789 :/AMP"> <,> <Mid> <(> <s2> <,> <p> <,> <1> <)> <)> <<>> <0> 
Procédure  =              <p> <=> <p> <+> <1> 
Procédure  Wend           <Wend> 
Procédure  If             <If> <Mid> <(> <s2> <,> <p> <,> <1> <)> <<>> <"#"> <Then> 
Procédure  =              <p> <=> <pSauve> 
Procédure  Case           <Case> <","> <,> <"("> <,> <")"> 
Procédure  Case           <Case> <"_"> 
Procédure  If             <If> <p> <<>> <Len> <(> <s2> <)> <Then> 
Procédure  GoTo           <GoTo> <CasNormal> 
Procédure  =              <bSuite> <=> <True> 
Procédure  Case           <Case> 
Procédure  Else           <Else> 
Procédure  EOF            
Procédure  Label          <_Label> <CasNormal> 
Procédure  Do             <Do> 
Procédure  =              <p> <=> <p> <+> <1> 
Procédure  If             <If> <p> <>> <Len> <(> <s2> <)> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  Loop           <Loop> <Until> <InStr> <(> <Chr> <(> <9> <)> <&> <" :,;()"> <,> <Mid> <(> <s2> <,> <p> <,> <1> <)> <)> <<>> <0> 
Procédure  =              <p> <=> <p> <-> <1> 
Procédure  EndSelect      <End> <Select> 
Procédure  If             <If> <bSuite> <Then> 
Procédure  GoTo           <GoTo> <LigneSuivante> 
Procédure  =              <m_iNbToken> <=> <m_iNbToken> <+> <1> 
Procédure  ReDim          <ReDim> <Preserve> <m_tToken> <(> <m_iNbToken> <)> 
Procédure  =              <m_tToken> <(> <iNbToken> <)> <=> <Mid> <(> <s2> <,> <p0> <,> <p> <-> <p0> <+> <1> <)> 
Procédure  =              <p> <=> <p> <+> <1> 
Procédure  If             <If> <m_tToken> <(> <iNbToken> <)> <=> <"Then"> <Then> 
Procédure  =              <m_iNbToken> <=> <m_iNbToken> <+> <1> 
Procédure  ReDim          <ReDim> <Preserve> <m_tToken> <(> <m_iNbToken> <)> 
Procédure  =              <m_tToken> <(> <iNbToken> <)> <=> <":"> 
Procédure  EndIf          <End> <If> 
Procédure  If             <If> <m_tToken> <(> <iNbToken> <)> <=> <"Else"> <Then> 
Procédure  =              <m_iNbToken> <=> <m_iNbToken> <+> <2> 
Procédure  ReDim          <ReDim> <Preserve> <m_tToken> <(> <m_iNbToken> <)> 
Procédure  =              <m_tToken> <(> <iNbToken> <-> <2> <)> <=> <":"> 
Procédure  =              <m_tToken> <(> <iNbToken> <-> <1> <)> <=> <"Else"> 
Procédure  =              <m_tToken> <(> <iNbToken> <)> <=> <":"> 
Procédure  EndIf          <End> <If> 
Procédure  Do             <Do> 
Procédure  If             <If> <p> <>> <Len> <(> <s2> <)> <Then> 
Procédure  GoTo           <GoTo> <FinInstruction> 
Procédure  If             <If> <Mid> <(> <s2> <,> <p> <,> <1> <)> <<>> <" "> <And> <Mid> <(> <s2> <,> <p> <,> <1> <)> <<>> <Chr> <(> <9> <)> <Then> 
Procédure  Exit           <Exit> <Do> 
Procédure  =              <p> <=> <p> <+> <1> 
Procédure  Loop           <Loop> 
Procédure  Loop           <Loop> 
Procédure  Stop           <Stop> 
Procédure  Label          <_Label> <LigneSuivante> 
Procédure  =              <sLigneSource> <=> <Left> <(> <sLigneSource> <,> <Len> <(> <sLigneSource> <)> <-> <1> <)> 
Procédure  Loop           <Loop> 
Procédure  Stop           <Stop> 
Procédure  Label          <_Label> <FinInstruction> 
Procédure  If             <If> <IsNumeric> <(> <m_tToken> <(> <1> <)> <)> <Then> 
Procédure  =              <m_iNbToken> <=> <m_iNbToken> <+> <2> 
Procédure  ReDim          <ReDim> <Preserve> <m_tToken> <(> <m_iNbToken> <)> 
Procédure  =              <m_tToken> <(> <2> <)> <=> <m_tToken> <(> <1> <)> 
Procédure  =              <m_tToken> <(> <1> <)> <=> <"_Label"> 
Procédure  =              <m_tToken> <(> <3> <)> <=> <":"> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  NextLigneInterne

Symbole                   TypeSymb  Portée Type                 U Définition
s2                        Variable  Local  String               T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 20 
bSuite                    Variable  Local  Boolean              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 21 
p                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 34 
p0                        Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 34 
FinInstruction            Étiquette Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 137 
CasNormal                 Étiquette Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 90 
pSauve                    Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 75 
LigneSuivante             Étiquette Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 131 
===============================================

Procédure  Procédure      <Sub> <NextLigne> <(> <)> 
Procédure  Do             <Do> 
Procédure  Label          <_Label> <restart> 
Procédure  If             <If> <m_iNextOff> <=> <0> <Then> 
Procédure  If             <If> <EOF> <(> <1> <)> <Then> 
Procédure  =              <m_iNbToken> <=> <0> 
Procédure  =              <bFinModule> <=> <True> 
Procédure  Exit           <Exit> <Sub> 
Procédure  EndIf          <End> <If> 
Procédure  Call           <NextLigneInterne> 
Procédure  If             <If> <m_iNbToken> <=> <0> <Then> 
Procédure  GoTo           <GoTo> <restart> 
Procédure  =              <m_iNextOff> <=> <0> 
Procédure  EndIf          <End> <If> 
Procédure  Dim            <Dim> <i> <As> <Integer> 
Procédure  For            <For> <i> <=> <1> <+> <m_iNextOff> <To> <UBound> <(> <m_tToken> <)> 
Procédure  If             <If> <m_tToken> <(> <i> <)> <=> <":"> <Then> 
Procédure  =              <m_iNbToken> <=> <i> <-> <1> <-> <m_iNextOff> 
Procédure  =              <m_iOff> <=> <m_iNextOff> 
Procédure  =              <m_iNextOff> <=> <i> 
Procédure  Exit           <Exit> <Sub> 
Procédure  EndIf          <End> <If> 
Procédure  Next           <Next> 
Procédure  =              <m_iOff> <=> <m_iNextOff> 
Procédure  =              <m_iNextOff> <=> <0> 
Procédure  =              <m_iNbToken> <=> <UBound> <(> <m_tToken> <)> <-> <m_iOff> 
Procédure  If             <If> <m_iNbToken> <>> <0> <Then> 
Procédure  Exit           <Exit> <Sub> 
Procédure  Loop           <Loop> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  NextLigne

Symbole                   TypeSymb  Portée Type                 U Définition
restart                   Étiquette Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 157 
i                         Variable  Local  Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 170 
===============================================

Procédure  Procédure      <Public> <Function> <tToken> <(> <ByVal> <i> <As> <Integer> <)> <As> <Variant> 
Procédure  If             <If> <m_iOff> <+> <i> <>> <UBound> <(> <m_tToken> <)> <Then> 
Procédure  =              <tToken> <=> <""> 
Procédure  EOF            
Procédure  Else           <Else> 
Procédure  =              <tToken> <=> <m_tToken> <(> <m_iOff> <+> <i> <)> 
Procédure  EndIf          <End> <If> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  tToken

Symbole                   TypeSymb  Portée Type                 U Définition
i                         Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 189 
===============================================

Procédure  Procédure      <Public> <Function> <iNbToken> <(> <)> <As> <Integer> 
Procédure  =              <iNbToken> <=> <m_iNbToken> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  iNbToken

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================


===============================================
Table des symboles Module 

Symbole                   TypeSymb  Portée Type                 U Définition
m_iOff                    Variable  Module Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 12 
m_iNextOff                Variable  Module Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 13 
m_iNbToken                Variable  Module Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 14 
m_tToken                  Variable  Module Variant              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 15 
NextLigneInterne          Procédure Module Sub                  T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\Lexico.bas, 19 
===============================================


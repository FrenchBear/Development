Attributes Attribute      <Attribute> <VB_Name> <=> <"SyntaxeModule"> 
Externe    Option         <Option> <Explicit> 
Enum       Enum           <Enum> <eEtatLigne> 
Enum       ConstEnum      <elInitial> 
Enum       ConstEnum      <elPropriétés> 
Enum       ConstEnum      <elAttributes> 
Enum       ConstEnum      <elExterne> 
Enum       ConstEnum      <elType> 
Enum       ConstEnum      <elEnum> 
Enum       ConstEnum      <elProcédure> 
Enum       EndEnum        <End> <Enum> 
Externe    Dim            <Public> <elEtat> <As> <eEtatLigne> 
Externe    Dim            <Private> <elNextEtat> <As> <eEtatLigne> 
Externe    Dim            <Public> <bFinModule> <As> <Boolean> 
Externe    Dim            <Private> <iNivSelect> <As> <Integer> 
Externe    Dim            <Private> <iNivWith> <As> <Integer> 
Externe    Dim            <Private> <iNivDo> <As> <Integer> 
Externe    Dim            <Private> <iNivWhile> <As> <Integer> 
Externe    Dim            <Private> <iNivBegin> <As> <Integer> 
Procédure  Procédure      <Public> <Function> <sEtatLigne> <(> <ByVal> <e> <As> <eEtatLigne> <)> 
Procédure  Select         <Select> <Case> <e> 
Procédure  Case           <Case> <elInitial> 
Procédure  =              <sEtatLigne> <=> <"Initial"> 
Procédure  Case           <Case> <elPropriétés> 
Procédure  =              <sEtatLigne> <=> <"Propriétés"> 
Procédure  Case           <Case> <elAttributes> 
Procédure  =              <sEtatLigne> <=> <"Attributes"> 
Procédure  Case           <Case> <elExterne> 
Procédure  =              <sEtatLigne> <=> <"Externe"> 
Procédure  Case           <Case> <elType> 
Procédure  =              <sEtatLigne> <=> <"Type"> 
Procédure  Case           <Case> <elEnum> 
Procédure  =              <sEtatLigne> <=> <"Enum"> 
Procédure  Case           <Case> <elProcédure> 
Procédure  =              <sEtatLigne> <=> <"Procédure"> 
Procédure  Case           <Case> 
Procédure  Else           <Else> 
Procédure  EOF            
Procédure  Stop           <Stop> 
Procédure  EndSelect      <End> <Select> 
Procédure  EndSub         <End> <Function> 

===============================================
Table des symboles Local  sEtatLigne

Symbole                   TypeSymb  Portée Type                 U Définition
e                         Paramètre Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeModule.bas, 30 
===============================================

Procédure  Procédure      <Public> <Sub> <InitModule> <(> <)> 
Procédure  =              <bFinModule> <=> <False> 
Procédure  =              <iNuméroLigne> <=> <0> 
Procédure  =              <elEtat> <=> <elInitial> 
Procédure  =              <elNextEtat> <=> <elInitial> 
Procédure  =              <iNivSelect> <=> <0> 
Procédure  =              <iNivWith> <=> <0> 
Procédure  =              <iNivDo> <=> <0> 
Procédure  =              <iNivWhile> <=> <0> 
Procédure  =              <iNivBegin> <=> <0> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  InitModule

Symbole                   TypeSymb  Portée Type                 U Définition
===============================================

Procédure  Procédure      <Public> <Sub> <NextLigneModule> <(> <)> 
Procédure  =              <elEtat> <=> <elNextEtat> 
Procédure  Call           <NextLigne> 
Procédure  Call           <DétermineTypeLigne> 
Procédure  If             <If> <tlTypeLigne> <=> <tlEnd> <And> <elEtat> <=> <elProcédure> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlStop> 
Procédure  EndIf          <End> <If> 
Procédure  If             <If> <elEtat> <=> <elAttributes> <And> <tlTypeLigne> <<>> <tlAttribute> <Then> 
Procédure  =              <elEtat> <=> <elExterne> 
Procédure  EndIf          <End> <If> 
Procédure  =              <elNextEtat> <=> <elEtat> 
Procédure  Select         <Select> <Case> <tlTypeLigne> 
Procédure  Case           <Case> <tlAttribute> 
Procédure  If             <If> <(> <elEtat> <=> <elInitial> <)> <Or> <(> <elEtat> <=> <elAttributes> <)> <Then> 
Procédure  Call           <Assert> <iNivBegin> <=> <0> 
Procédure  =              <elEtat> <=> <elAttributes> 
Procédure  =              <elNextEtat> <=> <elAttributes> 
Procédure  ElseIf         <ElseIf> <elEtat> <=> <elProcédure> <Then> 
Procédure  =              <elEtat> <=> <elAttributes> 
Procédure  EndIf          <End> <If> 
Procédure  Case           <Case> <tlBegin> 
Procédure  Call           <Assert> <(> <elEtat> <=> <elInitial> <)> <Or> <(> <elEtat> <=> <elPropriétés> <)> 
Procédure  =              <elEtat> <=> <elPropriétés> 
Procédure  =              <elNextEtat> <=> <elPropriétés> 
Procédure  =              <iNivBegin> <=> <iNivBegin> <+> <1> 
Procédure  Case           <Case> <tlEnd> 
Procédure  Call           <Assert> <iNivBegin> <>> <0> 
Procédure  =              <iNivBegin> <=> <iNivBegin> <-> <1> 
Procédure  If             <If> <iNivBegin> <=> <0> <Then> 
Procédure  =              <elNextEtat> <=> <elInitial> 
Procédure  Case           <Case> <tlProcédure> 
Procédure  Call           <Assert> <elEtat> <=> <elExterne> 
Procédure  =              <elEtat> <=> <elProcédure> 
Procédure  =              <elNextEtat> <=> <elProcédure> 
Procédure  Case           <Case> <tlEndSub> 
Procédure  Call           <Assert> <elEtat> <=> <elProcédure> 
Procédure  Call           <Assert> <iNivSelect> <=> <0> 
Procédure  Call           <Assert> <iNivWith> <=> <0> 
Procédure  Call           <Assert> <iNivDo> <=> <0> 
Procédure  Call           <Assert> <iNivWhile> <=> <0> 
Procédure  =              <elNextEtat> <=> <elExterne> 
Procédure  Case           <Case> <tlType> 
Procédure  Call           <Assert> <elEtat> <=> <elExterne> 
Procédure  =              <elEtat> <=> <elType> 
Procédure  =              <elNextEtat> <=> <elType> 
Procédure  Case           <Case> <tlEndType> 
Procédure  Call           <Assert> <elEtat> <=> <elType> 
Procédure  =              <elNextEtat> <=> <elExterne> 
Procédure  Case           <Case> <tlEnum> 
Procédure  Call           <Assert> <elEtat> <=> <elExterne> 
Procédure  =              <elEtat> <=> <elEnum> 
Procédure  =              <elNextEtat> <=> <elEnum> 
Procédure  GoTo           <GoTo> <SuiteModule> 
Procédure  Case           <Case> <tlEndEnum> 
Procédure  Call           <Assert> <elEtat> <=> <elEnum> 
Procédure  =              <elNextEtat> <=> <elExterne> 
Procédure  GoTo           <GoTo> <SuiteModule> 
Procédure  Case           <Case> <tlSelect> 
Procédure  =              <iNivSelect> <=> <iNivSelect> <+> <1> 
Procédure  Case           <Case> <tlEndSelect> 
Procédure  =              <iNivSelect> <=> <iNivSelect> <-> <1> 
Procédure  Case           <Case> <tlWith> 
Procédure  =              <iNivWith> <=> <iNivWith> <+> <1> 
Procédure  Case           <Case> <tlEndWith> 
Procédure  =              <iNivWith> <=> <iNivWith> <-> <1> 
Procédure  Case           <Case> <tlDo> 
Procédure  =              <iNivDo> <=> <iNivDo> <+> <1> 
Procédure  Case           <Case> <tlLoop> 
Procédure  =              <iNivDo> <=> <iNivDo> <-> <1> 
Procédure  Case           <Case> <tlWhile> 
Procédure  =              <iNivWhile> <=> <iNivWhile> <+> <1> 
Procédure  Case           <Case> <tlWend> 
Procédure  =              <iNivWhile> <=> <iNivWhile> <-> <1> 
Procédure  EndSelect      <End> <Select> 
Procédure  If             <If> <elEtat> <=> <elEnum> <Then> 
Procédure  =              <tlTypeLigne> <=> <tlConstEnum> 
Procédure  Label          <_Label> <SuiteModule> 
Procédure  EndSub         <End> <Sub> 

===============================================
Table des symboles Local  NextLigneModule

Symbole                   TypeSymb  Portée Type                 U Définition
SuiteModule               Étiquette Local                       T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeModule.bas, 142 
===============================================


===============================================
Table des symboles Module 

Symbole                   TypeSymb  Portée Type                 U Définition
elNextEtat                Variable  Module eEtatLigne           T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeModule.bas, 19 
iNivSelect                Variable  Module Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeModule.bas, 24 
iNivWith                  Variable  Module Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeModule.bas, 25 
iNivDo                    Variable  Module Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeModule.bas, 26 
iNivWhile                 Variable  Module Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeModule.bas, 27 
iNivBegin                 Variable  Module Integer              T C:\Development\GitHub\Development\Ercem Microbsoft\Outils\AnalyseVB\SyntaxeModule.bas, 28 
===============================================


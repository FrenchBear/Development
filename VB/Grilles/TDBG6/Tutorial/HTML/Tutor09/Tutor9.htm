<HTML>
<HEAD>
<TITLE>True DBGrid Pro 6.0 (OLEDB)</TITLE>
</HEAD>
<BODY>
Tutorial 9 - Attaching an Arbitrary Drop-down Control to a Grid Cell<P>

<OBJECT CLASSID="CLSID:BD96C556-65A3-11D0-983A-00C04FC29E33" ID="adcTutor" HEIGHT=1 WIDTH=1>
	<PARAM NAME="Server" VALUE="http://passat">
	<PARAM NAME="Connect" VALUE="DSN=TDBGDemo">
	<PARAM NAME="SQL" VALUE="SELECT * FROM Contacts INNER JOIN Customers ON Contacts.UserCode = Customers.UserCode">
</OBJECT>
<OBJECT id=tDBGrid CLASSID="clsid:0D6234D0-DBA2-11D1-B5DF-0060976089D0" WIDTH=650 HEIGHT=200>
	<PARAM NAME="DataSource" DATASRC="#adcTutor">
</OBJECT>
</BODY>
</HTML>
<SCRIPT LANGUAGE=VBSCRIPT>
Dim RSClone

Sub tDBGrid_DatasourceChanged()
' The following is necessary to work around a bug in ADO: the ADO Recordset
' Bookmark property has incorrect type and so it would reject bookmark values
' originated from the grid (see UnboundColumnFetch, RSClone.Bookmark = Bookmark).
' The TDBGrid.BookmarkType property helps to avoid this bug. Setting it to
' the actual type of Recordset.Bookmark (it may vary in different situations,
' it is generally unpredictable) makes the grid convert all bookmarks it passes
' to the user to the specified type.

	tDBGrid.BookmarkType = VarType(adcTutor.RecordSet.Bookmark)
End Sub

Sub window_OnLoad()
' The initialization code for the grid. Since design time property
' pages of the grid are unavailable, all initialization has to be
' done manually.

	Dim TempCol
	Dim I

	' Remove all columns
	For I = 0 to tDBGrid.Columns.Count - 1
		tDBGrid.Columns.Remove(0)
	Next

	' Add columns manually
	set TempCol = tDBGrid.Columns.Add(0)
	TempCol.Caption = "Customer Name"
	TempCol.DataField = ""
	TempCol.Visible = True
	set TempCol = tDBGrid.Columns.Add(1)
	TempCol.Caption = "CustType"
	TempCol.DataField = "CustType"
	TempCol.Button = True
	TempCol.Visible = True
	set TempCol = tDBGrid.Columns.Add(2)
	TempCol.Caption = "ContactType"
	TempCol.DataField = "ContactType"
	TempCol.Visible = True
	set TempCol = tDBGrid.Columns.Add(3)
	TempCol.Caption = "Callback"
	TempCol.DataField = "Callback"
	TempCol.Visible = True
	set TempCol = tDBGrid.Columns.Add(4)
	TempCol.Caption = "ContactDate"
	TempCol.DataField = "ContactDate"
	TempCol.Visible = True

	' We need MarqueeStyle different from dbgFloatingEditor (default)
	' for the BeforeColEdit event to work (when F2 is pressed, for example)
	tDBGrid.MarqueeStyle = 2 ' dbgHighlightCell
	set RSClone = adcTutor.RecordSet.Clone

	' Force the grid to refetch data
	tDBGrid.HoldFields
	tDBGrid.ReBind
	tDBGrid.ExtendRightColumn = True
End Sub

Sub tDBGrid_BeforeColEdit(ColIndex, KeyAscii, Cancel)
' BeforeColEdit is called before the grid enters into
' edit mode.  You can decide what happens and whether
' standard editing proceeds.  This allows you to
' substitute different kinds of editing for the current
' cell, as is done here.
	If ColIndex = 1 Then
		' Let the user edit by entering a key
		If KeyAscii Then Exit Sub

		' Otherwise call ButtonClick

		Cancel = True	' cancel built-in editing

		' Call the ButtonClick event to edit cell
		tDBGrid_ButtonClick (ColIndex)
    End If
End Sub

Sub tDBGrid_ButtonClick(ColIndex)
' This sample code shows how to use an InputBox instead
' of the default grid editing features. The InputBox can
' be changed to any dialog you need, or any other editing
' option you can think of in much the same way as it is
' written here.

	Dim CellValue, NL
	NL = CHR(10) & CHR(13)
	CellValue = InputBox("Enter the new value for the cell. " & _
		NL & "You can enter numbers from 1 to 5. " & NL & _
		"Click Cancel to abort. " & NL & _
		"In the code, you can substitute this InputBox " & NL & _
		"with your own editing feature", "Select Customer Type")
	If CStr(CellValue) <> "1" and (CStr(CellValue) <> "2") and (CStr(CellValue) <> "3") _
		and (CStr(CellValue) <> "4") and (CStr(CellValue) <> "5") then
		MsgBox "You must enter a number from 1 to 5",,"Error"
	Else
		tDBGrid.Columns.Item(ColIndex).Text = CellValue
	End If
End Sub

Sub tDBGrid_UnboundColumnFetch(Bookmark, Col, Value)
	RSClone.Bookmark = Bookmark
	Value = RSClone.Fields.Item("FirstName") & " " & RSClone.Fields.Item("LastName")
End Sub
</SCRIPT>
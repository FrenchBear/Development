From: "Saved by Windows Internet Explorer 7"
Subject: Dot Net Tips & Tricks
Date: Tue, 6 May 2008 00:35:24 +0200
MIME-Version: 1.0
Content-Type: multipart/related;
	type="multipart/alternative";
	boundary="----=_NextPart_000_0000_01C8AF11.12FDB1E0"
X-MimeOLE: Produced By Microsoft MimeOLE V6.0.6001.18000

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01C8AF11.12FDB1E0
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.mddotnetrix.pwp.blueyonder.co.uk/general.css

FORM {
	MARGIN: 0px
}
FORM.menu {
	BORDER-BOTTOM: orangered 2px solid; HEIGHT: 20px; BACKGROUND-COLOR: =
wheat
}
BODY {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; FONT-WEIGHT: bold; =
PADDING-BOTTOM: 3px; MARGIN: 0px; COLOR: #38246a; PADDING-TOP: 3px; =
BACKGROUND-COLOR: lightsteelblue
}
BODY.Dialog {
	PADDING-RIGHT: 12px; PADDING-LEFT: 12px; PADDING-BOTTOM: 12px; CURSOR: =
wait; PADDING-TOP: 12px; BACKGROUND-COLOR: buttonface; TEXT-ALIGN: =
center
}
BODY.PDialog {
	PADDING-RIGHT: 12px; BACKGROUND-POSITION: 12pt 24pt; PADDING-LEFT: =
60px; BACKGROUND-IMAGE: url(images/face05.png); PADDING-BOTTOM: 12px; =
PADDING-TOP: 12px; BACKGROUND-REPEAT: no-repeat; BACKGROUND-COLOR: =
buttonface; TEXT-ALIGN: left
}
DIV.body {
	PADDING-RIGHT: 12px; PADDING-LEFT: 12px; PADDING-BOTTOM: 12px; MARGIN: =
12px; PADDING-TOP: 12px
}
TABLE {
	WIDTH: 100%
}
TABLE.menu {
	WIDTH: auto; CURSOR: default; COLOR: orangered; BACKGROUND-COLOR: =
transparent
}
TABLE.comment {
	BORDER-RIGHT: white thin solid; BORDER-TOP: white thin solid; =
BORDER-LEFT: white thin solid; WIDTH: 95%; COLOR: orangered; =
BORDER-BOTTOM: white thin solid; BACKGROUND-COLOR: wheat
}
TD {
	PADDING-RIGHT: 6px; PADDING-LEFT: 6px; PADDING-BOTTOM: 1px; =
PADDING-TOP: 1px
}
TD.title {
	FONT-SIZE: 24px; COLOR: ivory; BACKGROUND-COLOR: silver
}
TD.menu {
	BORDER-RIGHT: orangered 1px solid; PADDING-RIGHT: 12px; PADDING-LEFT: =
12px; CURSOR: default
}
TD.comment {
	TEXT-ALIGN: justify
}
TD.body {
	FONT-WEIGHT: bold
}
UL {
	LIST-STYLE-TYPE: decimal
}
HR {
	MARGIN-BOTTOM: 12px; HEIGHT: 4px; BACKGROUND-COLOR: blue
}
IMG {
	BORDER-RIGHT: medium none; BORDER-TOP: medium none; BORDER-LEFT: medium =
none; MARGIN-RIGHT: 6px; BORDER-BOTTOM: medium none
}
A.not {
	COLOR: #ff0000
}
A.any {
	COLOR: #aa00aa
}
A.google {
	TEXT-DECORATION: none
}
.VBComment {
	COLOR: green
}
.Link {
	CURSOR: hand
}

------=_NextPart_000_0000_01C8AF11.12FDB1E0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.mddotnetrix.pwp.blueyonder.co.uk/general.js

function NewWindow(dest)
{
 window.open(dest, '_blank');
}

function ShowDlg(sOption)
{
 bname=3Dnavigator.appName
 if (window.showModalDialog)
  =
window.showModalDialog(sOption,0,'dialogHeight:150px;dialogWidth:400px;ce=
nter:1;status:0;help:0;resizable:0;');
 else
 {
  window.top.captureEvents (Event.CLICK|Event.FOCUS);
  window.top.onclick=3DIgnoreEvents;
  window.top.onfocus=3DHandleFocus;
  winModalWindow =3D window.open (sOption,"ModalChild", =
"dependent=3Dyes,width=3D400,height=3D150");
  winModalWindow.focus();
 }
}

function IgnoreEvents(e)
{
  return false;
}

function HandleFocus()
{
  if (winModalWindow)
  {
    if (!winModalWindow.closed)
    {
      winModalWindow.focus();
    }
    else
    {
      window.top.releaseEvents (Event.CLICK|Event.FOCUS);
      window.top.onclick =3D "";
    }
  }
  return false;
}


function MailMe()
{
 window.open('mailto:mickdoherty@dotnetrix.co.uk');
}

function SetNavBar(sender,caption)
{
 document.getElementById(sender).innerHTML =3D CreateTitle(caption);
}

function CreateTitle(caption)
{
 var sTitle =3D "<table cellspacing=3D0><tr><td class=3D'title' =
align=3D'left'>";
 sTitle +=3D ShadowText(caption);
 sTitle +=3D "</td></tr><tr><td class=3D'title' align=3D'left'>";

 sTitle +=3D "<!-- Search Google -->"
 sTitle +=3D "<center>"
 sTitle +=3D "<form method=3D'get' =
action=3D'http://www.dotnetrix.co.uk/adsense.html' target=3D'_top'>"
 sTitle +=3D "<table border=3D'0'>"
 sTitle +=3D "<tr><td nowrap=3D'nowrap' valign=3D'top' align=3D'left' =
height=3D'32'>"
 sTitle +=3D "<a href=3D'http://www.google.com/'>"
 sTitle +=3D "<img src=3D'http://www.google.com/logos/Logo_25gry.gif' =
border=3D'0' alt=3D'Google' align=3D'middle'></img></a>"
 sTitle +=3D "<label for=3D'sbi' style=3D'display: none'>Enter your =
search terms</label>"
 sTitle +=3D "<input type=3D'text' name=3D'q' size=3D'31' =
maxlength=3D'255' value=3D'' id=3D'sbi'></input>"
 sTitle +=3D "<label for=3D'sbb' style=3D'display: none'>Submit search =
form</label>"
 sTitle +=3D "<input type=3D'submit' name=3D'sa' value=3D'Search' =
id=3D'sbb'></input>"
 sTitle +=3D "<input type=3D'hidden' name=3D'client' =
value=3D'pub-0015957635717445'></input>"
 sTitle +=3D "<input type=3D'hidden' name=3D'forid' =
value=3D'1'></input>"
 sTitle +=3D "<input type=3D'hidden' name=3D'ie' =
value=3D'ISO-8859-1'></input>"
 sTitle +=3D "<input type=3D'hidden' name=3D'oe' =
value=3D'ISO-8859-1'></input>"
 sTitle +=3D "<input type=3D'hidden' name=3D'safe' =
value=3D'active'></input>"
 sTitle +=3D "<input type=3D'hidden' name=3D'cof' "=20
 sTitle +=3D =
"value=3D'GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:F00;LBGC=
:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:11'><=
/input>"
 sTitle +=3D "<input type=3D'hidden' name=3D'hl' value=3D'en'></input>"
 sTitle +=3D "</td></tr></table>"
 sTitle +=3D "</form>"
 sTitle +=3D "</center>"
 sTitle +=3D "<!-- Search Google -->"

 sTitle +=3D "</td></tr></table>";
 sTitle +=3D TopMenu();
 return sTitle;
}

function ShadowText(caption)
{
 var sText =3D "<img src=3D'images/logosm.png' width=3D'48px', =
height=3D'48px'>"
 sText +=3D "<div nowrap style=3D'z-index:1; color:#585768; position: =
absolute; top:15px; left:65px;'>";
 sText +=3D caption + "</div><div nowrap style=3D'z-index:2; position: =
absolute; top:14px; left: 64px;'>";
 sText +=3D caption + "</div>";
 return sText;
}

function TopMenu()
{
 var sMenu =3D "<form id =3D 'Menu1' class=3Dmenu><table class=3Dmenu =
cellspacing=3D0>";
 sMenu +=3D "<tr>";
 sMenu +=3D AddLinkMenu("","item1","Home","home.html","_self");
 sMenu +=3D AddLinkMenu("tips","item2","Tips","tips.html","_self");
 sMenu +=3D AddLinkMenu("","item3","Controls","controls.html","_self");
 sMenu +=3D AddLinkMenu("fun","item4","Fun","fun.html","_self");
 sMenu +=3D AddLinkMenu("links","item5","Links","links.html","_self");
 sMenu +=3D AddMethodMenu("item6","Contact","MailMe()","");
 sMenu +=3D "</tr></table></form>";
 return sMenu;
}

function AddLinkMenu(sender,mnuID,caption,link,linkTarget)
{
 var sMenu =3D "<td class=3D'menu' id=3D";
 sMenu +=3D mnuID + " onmouseover=3D'PopupMenu(\"";
 sMenu +=3D sender + "\",";
 sMenu +=3D mnuID + ")' "
 sMenu +=3D =
"onmouseout=3D'this.style.backgroundColor=3D\"transparent\";" ;
 sMenu +=3D "this.style.color=3D\"orangered\";' ";
 sMenu +=3D "onclick=3D'window.open(\"";
 sMenu +=3D link + "\",\"";
 sMenu +=3D linkTarget + "\")'>";
 sMenu +=3D caption +"</td>";
 return sMenu;
}

function AddMethodMenu(mnuID,caption,method)
{
 var sMenu =3D "<td class=3D'menu' id=3D";
 sMenu +=3D mnuID + " onmouseover=3D'PopupMenu(\"\",";
 sMenu +=3D mnuID + ");' ";
 sMenu +=3D =
"onmouseout=3D'this.style.backgroundColor=3D\"transparent\";" ;
 sMenu +=3D "this.style.color=3D\"orangered\";' ";
 sMenu +=3D "onclick=3D'";
 sMenu +=3D method + "'>";
 sMenu +=3D caption +"</td>";
 return sMenu;
}

var Popup;

function PopupMenu(target,sender)
{
 sender.style.backgroundColor=3D'orangered';
 sender.style.color=3D'wheat';
 Popup=3Dwindow.createPopup();
 var PopBody =3D Popup.document.body;
 PopBody.style.backgroundColor =3D "wheat";
 PopBody.style.border =3D "solid orangered 1px";
 PopBody.style.color =3D "orangered";
 PopBody.innerHTML =3D CreateMenu(target);
 Popup.show(0, 0, 0, 0);
 var popHeight=3DPopBody.scrollHeight;
 var popWidth=3DPopBody.scrollWidth;
 Popup.hide();
 Popup.show(0, sender.offsetHeight+3, popWidth, popHeight, sender);
 if(target=3D=3D"")Popup.hide();
}

function CreateMenu(target)
{
 var item =3D "";
 switch(target)
 {
  case 'tips':
   item +=3D AddLinkMenuItem("TabControl","tabcontrols.html","_self");
   item +=3D AddLinkMenuItem("ComboBox","combobox.html","_self");
   item +=3D AddLinkMenuItem("Menus","menus.html","_self");
   item +=3D AddLinkMenuItem("Buttons","buttons.html","_self");
   item +=3D AddLinkMenuItem("Custom Controls","custom.html","_self");
   item +=3D AddLinkMenuItem("Forms","forms.html","_self");
   item +=3D AddLinkMenuItem("Misc...","misc.html","_self");
   break;
  case 'fun':
   item +=3D AddLinkMenuItem("Nothing","nothing.html","_self");
   item +=3D AddLinkMenuItem("Lotto Picker","lotto.html","_self");
   break;
  case 'links':
   item +=3D AddLinkMenuItem("Google =
Toolbar","http://toolbar.google.com", "_top");
   item +=3D =
AddLinkMenuItem("PInvoke.Net","http://blogs.msdn.com/adam_nathan/archive/=
2004/05/06/127403.aspx", "_top");
   item +=3D AddLinkMenuItem("GotDotNet =
Community","http://www.gotdotnet.com/community/messageboard/Home.aspx", =
"_top");
   item +=3D AddLinkMenuItem("Microsoft Technical =
Forums","http://forums.microsoft.com/msdn/default.aspx", "_top");
   item +=3D AddLinkMenuItem("Herfried K.Wagners =
VB.Any","http://dotnet.mvps.org/","_top");
   item +=3D AddLinkMenuItem("The Code =
Project","http://www.codeproject.com/","_top");
   item +=3D =
AddLinkMenuItem("BobPowell.net","http://www.bobpowell.net","_top");
   item +=3D AddLinkMenuItem("George Sheppards Windows Forms =
FAQ","http://www.syncfusion.com/faq/windowsforms/Default.aspx","_top");
   item +=3D AddLinkMenuItem("Divelements =
articles","http://www.divil.co.uk/net/articles/","_top");
   item +=3D AddLinkMenuItem("Free Web =
Counter","http://www.counting4free.com", "_top");
   break;
  default:
   item =3D"";
 }
 return item;
}

function AddLinkMenuItem(caption,link,linkTarget)
{
 var sMenu =3D"<div nowrap style=3D'cursor:\"hand\"; padding: 1 6 1 6;' =
";
 sMenu +=3D "onmouseover=3D'this.style.background=3D\"orangered\";" ;
 sMenu +=3D "this.style.color=3D\"wheat\";' ";
 sMenu +=3D "onmouseout=3D'this.style.background=3D\"wheat\"; ";
 sMenu +=3D "this.style.color=3D\"orangered\";' ";
 sMenu +=3D "onclick=3D'parent.open(\"";
 sMenu +=3D link + "\",\"";
 sMenu +=3D linkTarget + "\")'>";
 sMenu +=3D caption;
 sMenu +=3D "</div>";
 return sMenu;
}

function ToggleView(sender,target,sender2,target2)
{
 if(document.getElementById(target).style.display=3D=3D"none")
 {
  document.getElementById(target).style.display=3D"block";
  if(document.getElementById(target2)!=3Dundefined)
  {
   =
document.getElementById(sender2).value=3Ddocument.getElementById(sender2)=
.value.replace("Hide","Show");
   document.getElementById(target2).style.display=3D"none";
  }
   =
document.getElementById(sender).value=3Ddocument.getElementById(sender).v=
alue.replace("Show","Hide");
 }
 else
 {
  document.getElementById(target).style.display=3D"none";
   =
document.getElementById(sender).value=3Ddocument.getElementById(sender).v=
alue.replace("Hide","Show");
 }
}

function SetCounter(sender)
{
 document.getElementById(sender).innerHTML=3D"<img =
src=3D\"http://www.counting4free.com/cgi-bin/counter.pl?id=3D26143\" =
align=3D'right'>";
}
------=_NextPart_000_0000_01C8AF11.12FDB1E0
Content-Type: application/octet-stream
Content-Transfer-Encoding: 7bit
Content-Location: http://www.mddotnetrix.pwp.blueyonder.co.uk/imageload.js

function loadImage(sender,image)
{
 document.getElementById(sender).src=image;
}
------=_NextPart_000_0000_01C8AF11.12FDB1E0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://pagead2.googlesyndication.com/pagead/show_ads.js

(function(){=0A=
var f=3Ddocument,j=3Dnavigator,l=3Dwindow;function da(){var =
b=3Df.cookie,a=3DMath.round((new =
Date).getTime()/1000),c=3Db.indexOf("__utma=3D")>-1,e=3Db.indexOf("__utmb=
=3D")>-1,d=3Db.indexOf("__utmc=3D")>-1,g,i=3D{};if(c){g=3Db.split("__utma=
=3D")[1].split(";")[0].split(".");i.sid=3D(!e||!d?a:g[4])+"";i.vid=3Dg[1]=
+"."+g[2];i.from_cookie=3Dtrue}else{i.sid=3Dl&&l.gaGlobal&&l.gaGlobal.sid=
?l.gaGlobal.sid:a+"";i.vid=3Dl&&l.gaGlobal&&l.gaGlobal.vid?l.gaGlobal.vid=
:(n()^ea())*2147483647+"."+a;i.from_cookie=3Dfalse}i.hid=3Dl&&l.gaGlobal&=
&l.gaGlobal.hid?=0A=
l.gaGlobal.hid:n();l.gaGlobal=3Di;return i}function n(){return =
Math.round(Math.random()*2147483647)}function ea(){var =
b=3Df.cookie?f.cookie:"",a=3Dl.history.length,c,e,d=3D[j.appName,j.versio=
n,j.language?j.language:j.browserLanguage,j.platform,j.userAgent,j.javaEn=
abled()?1:0].join("");if(l.screen)d+=3Dl.screen.width+"x"+l.screen.height=
+l.screen.colorDepth;else =
if(l.java){e=3Djava.awt.Toolkit.getDefaultToolkit().getScreenSize();d+=3D=
e.screen.width+"x"+e.screen.height}d+=3Db;d+=3Df.referrer?f.referrer:"";c=
=3Dd.length;=0A=
while(a>0)d+=3Da--^c++;return fa(d)}function fa(b){var =
a=3D1,c=3D0,e,d;if(!(b=3D=3Dundefined||b=3D=3D"")){a=3D0;for(e=3Db.length=
-1;e>=3D0;e--){d=3Db.charCodeAt(e);a=3D(a<<6&268435455)+d+(d<<14);c=3Da&2=
66338304;a=3Dc!=3D0?a^c>>21:a}}return a};var =
s=3D{google_ad_channel:"channel",google_ad_host:"host",google_ad_host_tie=
r_id:"ht_id",google_ad_region:"region",google_ad_section:"region",google_=
ad_type:"ad_type",google_adtest:"adtest",google_alternate_ad_url:"alterna=
te_ad_url",google_alternate_color:"alt_color",google_bid:"bid",google_cit=
y:"gcs",google_color_bg:"color_bg",google_color_border:"color_border",goo=
gle_color_line:"color_line",google_color_link:"color_link",google_color_t=
ext:"color_text",google_color_url:"color_url",google_contents:"contents",=0A=
google_country:"gl",google_cust_age:"cust_age",google_cust_ch:"cust_ch",g=
oogle_cust_gender:"cust_gender",google_cust_id:"cust_id",google_cust_inte=
rests:"cust_interests",google_cust_job:"cust_job",google_cust_l:"cust_l",=
google_cust_lh:"cust_lh",google_cust_u_url:"cust_u_url",google_disable_vi=
deo_autoplay:"disable_video_autoplay",google_ed:"ed",google_encoding:"oe"=
,google_feedback:"feedback_link",google_flash_version:"flash",google_gl:"=
gl",google_hints:"hints",google_kw:"kw",google_kw_type:"kw_type",=0A=
google_language:"hl",google_referrer_url:"ref",google_region:"gr",google_=
reuse_colors:"reuse_colors",google_safe:"adsafe",google_targeting:"target=
ing",google_ui_features:"ui"},u=3D{google_ad_format:"format",google_ad_ou=
tput:"output",google_ad_callback:"callback",google_ad_override:"google_ad=
_override",google_ad_slot:"slotname",google_analytics_uacct:"ga_wpids",go=
ogle_correlator:"correlator",google_cpa_choice:"cpa_choice",google_image_=
size:"image_size",google_last_modified_time:"lmt",google_max_num_ads:"num=
_ads",=0A=
google_max_radlink_len:"max_radlink_len",google_num_radlinks:"num_radlink=
s",google_num_radlinks_per_unit:"num_radlinks_per_unit",google_only_ads_w=
ith_video:"only_ads_with_video",google_page_location:"loc",google_page_ur=
l:"url",google_rl_dest_url:"rl_dest_url",google_rl_filtering:"rl_filterin=
g",google_rl_mode:"rl_mode",google_rt:"rt",google_skip:"skip"};function =
A(b){return s[b]||u[b]||null};function =
B(){}B.prototype.c=3Dfunction(){};B.prototype.e=3Dfunction(){};B.prototyp=
e.o=3Dfunction(){};var E=3Dnull;function =
G(){this.b=3Dthis.m();this.g=3Dfalse;if(!this.b){this.g=3Dthis.i();if(!th=
is.g)E.e("Browser does not allow =
cookies")}}G.prototype.f=3D"__gads=3D";G.prototype.d=3D"GoogleAdServingTe=
st=3D";G.prototype.l=3Dfunction(){return =
this.b};G.prototype.setCookieInfo=3Dfunction(b){this.a=3Db._cookies_[0];i=
f(this.a!=3Dnull){this.b=3Dthis.a._value_;this.n()}};G.prototype.k=3Dfunc=
tion(b){var a=3D(new Date).valueOf(),c=3Dnew Date;=0A=
c.setTime(a+b);return =
c};G.prototype.j=3Dfunction(b){if(this.b!=3Dnull||!this.g){E.c("Skipping =
fetch cookie call");return}var =
a=3Ddocument.domain,c=3D"http://partner.googleadservices.com/gampad/cooki=
e.js?callback=3D_GA_googleCookieHelper.setCookieInfo&client=3D"+H(b)+"&do=
main=3D"+H(a);E.c("Issuing a fetch cookie call with <a =
href=3D'"+c+"'>"+c+"</a>");document.write("<script src =3D =
'"+c+"'><\/script>")};G.prototype.i=3Dfunction(){document.cookie=3Dthis.d=
+"Good";var b=3Dthis.h(this.d),a=3Db=3D=3D"Good";if(a){var =
c=3Dthis.k(-1);=0A=
document.cookie=3Dthis.d+"; expires=3D"+c.toGMTString()}return =
a};G.prototype.m=3Dfunction(){var =
b=3Dthis.h(this.f);if(b!=3Dnull)E.c("Read first party cookie: "+b);else =
E.e("No first party cookie found");return =
b};G.prototype.h=3Dfunction(b){var =
a=3Ddocument.cookie,c=3Da.indexOf(b),e=3Dnull;if(c!=3D-1){var =
d=3Dc+b.length,g=3Da.indexOf(";",d);if(g=3D=3D-1)g=3Da.length;e=3Da.subst=
ring(d,g)}return =
e};G.prototype.n=3Dfunction(){if(this.a=3D=3Dnull)E.e("Skipping cookie =
creation: no cookie info");else if(this.b=3D=3Dnull)E.o("Skipping cookie =
creation: no cookie value");=0A=
else{var b=3Dnew Date;b.setTime(1000*this.a._expires_);var =
a=3Dthis.a._domain_,c=3Dthis.f+this.b+"; expires=3D"+b.toGMTString()+"; =
path=3D"+this.a._path_+"; domain=3D."+a;document.cookie=3Dc;E.c("Written =
cookie: =
"+c)}};window.IDICommon=3Dwindow.IDICommon||(function(){return{getHash:fu=
nction(b){var a=3Db.indexOf("#")+1;return =
a?b.substr(a):""},htmlEscape:function(b){return/[&<>\"]/.test(b)?b.replac=
e(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\"/g,"=
&quot;"):b},makeIframeTag:function(b){var a=3D"<iframe";for(var c in =
b)a+=3D" "+c+'=3D"'+IDICommon.htmlEscape(b[c])+'"';return =
a+"></iframe>"},getIframe:function(b,a){try{return =
b.frames[a]}catch(c){return null}},makeIframeNode:function(b){var =
a=3Ddocument.createElement("iframe");=0A=
for(var c in b)a.setAttribute(c,b[c]);return =
a},appendHiddenIframe:function(b,a){setTimeout(function(){document.body.a=
ppendChild(IDICommon.makeIframeNode({id:b,name:b,src:a,width:0,height:0,f=
rameBorder:0}))},0)},writeHiddenIframe:function(b,a){document.write(IDICo=
mmon.makeIframeTag({id:b,name:b,src:a,width:0,height:0,frameBorder:0}))},=
splitURIComponent:function(b,a){var =
c=3D[],e=3Db.length,d=3D0;while(d<e){var =
g=3Db.substr(d,a),i=3Dg.length;if(d+i<e)for(var =
o=3D1;o<3;++o)if(g.charAt(i-o)=3D=3D"%")g=3Dg.substr(0,i-=3D=0A=
o);c.push(g);d+=3Di}return =
c},MAX_URL_LENGTH:4095,IDI_DEFAULT_POLLING_INTERVAL:1000}})();window.IDIH=
ost=3Dwindow.IDIHost||(function(){var =
b=3Dwindow.location.href.replace(/([^:\/])\/.*$/,"$1/robots.txt"),a=3D"",=
c=3D{},e=3D{},d=3D{},g=3D{},i=3D{};function o(h,k){for(var p in =
k)h[p]=3Dk[p]}function v(h,k){var p=3Dwindow.frames[h];if(p){var =
x;while(x=3DIDICommon.getIframe(p,h+"_"+c[h])){try{if(x.location.href=3D=3D=
"about:blank")break}catch(t){break}d[h]+=3DIDICommon.getHash(x.location.h=
ref);++c[h]}var =
q=3Dd[h].split("$"),y=3Dq.length-1;if(y>0){d[h]=3Dq[y];for(var =
z=3D0;z<y;++z)k(decodeURIComponent(q[z]),h)}}}function r(h){return a||=0A=
h.replace(/([^:\/]\/).*$/,"$1ig/idi_relay")}function =
m(h){window.clearInterval(i[h]);i[h]=3D0}function F(h){b=3Dh}function =
N(h){a=3Dh}function =
O(h,k,p){m(h);i[h]=3Dwindow.setInterval(function(){v(h,k)},typeof =
p=3D=3D"object"&&p.pollingInterval||IDICommon.IDI_DEFAULT_POLLING_INTERVA=
L)}function I(h,k,p){var x;if(typeof =
p=3D=3D"object")x=3Dp.moduleRelayUrl;var t=3De[h];if(isNaN(t))throw new =
Error("Invalid module id");else{var q=3Dtypeof =
x=3D=3D"string"?x:r(g[h]),y=3DencodeURIComponent(k)+"$",z=3DIDICommon.MAX=
_URL_LENGTH-1-q.length,=0A=
C=3DIDICommon.splitURIComponent(y,z),P=3DC.length;for(var =
w=3D0;w<P;++w)IDICommon.appendHiddenIframe(h+"_"+(t+w),q+"#"+C[w]);e[h]+=3D=
P}}function J(h,k,p,x,t){var =
q=3D{frameBorder:0,scrolling:"no"},y,z,C,P,w;if(typeof =
t=3D=3D"object"){y=3Dt.iframeAttrs;z=3Dt.callback;C=3Dt.userPrefs;P=3Dt.p=
ollingInterval;w=3Dt.parentDivId}if(typeof =
y=3D=3D"object")o(q,y);o(q,{id:k,name:k,src:h,width:p,height:x});c[k]=3D0=
;e[k]=3D0;d[k]=3D"";g[k]=3Dh;var Q=3D[];if(typeof =
C=3D=3D"object")for(var D in =
C)Q.push(encodeURIComponent(D)+"=3D"+encodeURIComponent(C[D]));=0A=
if(typeof =
z=3D=3D"function"){Q.push("idi_hr=3D"+encodeURIComponent(b));window.IDIHo=
st.registerListener(k,z,t)}if(Q.length){var =
K=3DQ.join("&");if(q.src.length+1+K.length>IDICommon.MAX_URL_LENGTH){K+=3D=
"$";var =
$=3Dr(h),ka=3DIDICommon.MAX_URL_LENGTH-1-$.length,aa=3DIDICommon.splitURI=
Component(K,ka),ba=3Daa.length;for(var D=3D0;D<ba;++D){var =
U=3Dk+"_"+D,ca=3D$+"#"+aa[D];if(w){var =
V=3Ddocument.getElementById(w);V.innerHTML+=3DIDICommon.makeIframeTag({id=
:U,name:U,src:ca,width:0,height:0,frameBorder:0})}else =
IDICommon.writeHiddenIframe(U,=0A=
ca)}e[k]+=3Dba;K=3D""}q.src+=3D"#"+K}if(w){var =
V=3Ddocument.getElementById(w);V.innerHTML+=3DIDICommon.makeIframeTag(q)}=
else =
document.write(IDICommon.makeIframeTag(q))}return{setHostRelayUrl:F,setMo=
duleRelayUrl:N,getModuleRelayUrl:r,registerListener:O,unregisterListener:=
m,postMessageToModule:I,createModule:J}})();function L(b){return =
b!=3Dnull?'"'+b+'"':'""'}function H(b){return typeof =
encodeURIComponent=3D=3D"function"?encodeURIComponent(b):escape(b)}functi=
on M(b,a){if(b&&a)window.google_ad_url+=3D"&"+b+"=3D"+a}function =
R(b){var a=3Dwindow,c=3DA(b),e=3Da[b];M(c,e)}function =
S(b,a){if(a)M(b,H(a))}function T(b){var =
a=3Dwindow,c=3DA(b),e=3Da[b];S(c,e)}function W(b,a){var =
c=3Dwindow,e=3DA(b),d=3Dc[b];if(e&&d&&typeof =
d=3D=3D"object")d=3Dd[a%d.length];M(e,d)}function ga(b,a){var =
c=3Db.screen,e=3Dnavigator.javaEnabled(),d=3D-a.getTimezoneOffset();if(c)=
{M("u_h",=0A=
c.height);M("u_w",c.width);M("u_ah",c.availHeight);M("u_aw",c.availWidth)=
;M("u_cd",c.colorDepth)}M("u_tz",d);M("u_his",history.length);M("u_java",=
e);if(navigator.plugins)M("u_nplug",navigator.plugins.length);if(navigato=
r.mimeTypes)M("u_nmime",navigator.mimeTypes.length)}function =
ha(b){if(!b.google_enable_first_party_cookie)return;if(E=3D=3Dnull)E=3Dne=
w B;if(b._GA_googleCookieHelper=3D=3Dnull)b._GA_googleCookieHelper=3Dnew =
G;if(!b._google_cookie_fetched){b._google_cookie_fetched=3Dtrue;b._GA_goo=
gleCookieHelper.j(X(b.google_ad_client))}}=0A=
function =
X(b){if(b){b=3Db.toLowerCase();if(b.substring(0,3)!=3D"ca-")b=3D"ca-"+b}r=
eturn b}function =
ia(b){if(b){b=3Db.toLowerCase();if(b.substring(0,9)!=3D"dist-aff-")b=3D"d=
ist-aff-"+b}return b}function ja(b,a){var =
c=3Ddocument.getElementById(b);c.style.height=3Da+"px"}function =
la(b,a,c){window.clearTimeout(c);var =
e=3D/^google_resize_flash_ad_idi\((\d+)\)/,d=3Db.match(e);if(d)ja(a,d[1])=
}function =
ma(b,a,c,e){c=3Dc.substring(0,2000);c=3Dc.replace(/%\w?$/,"");if((b.googl=
e_ad_output=3D=3D"js"||b.google_ad_output=3D=3D"json_html")&&(b.google_ad=
_request_done||=0A=
b.google_radlink_request_done))a.write('<script =
language=3D"JavaScript1.1" src=3D'+L(c)+"><\/script>");else =
if(b.google_ad_output=3D=3D"html"){if(b.name!=3D"google_ads_frame"){if(e!=
=3Dnull)a.write('<div =
id=3D"'+e+'">');if(na(b.google_ad_output,b.google_ad_client)){IDIHost.set=
ModuleRelayUrl("http://pagead2.googlesyndication.com/pagead/idi_relay.htm=
l");var =
d=3D0;if(b.google_num_0ad_slots)d+=3Db.google_num_0ad_slots;if(b.google_n=
um_ad_slots)d+=3Db.google_num_ad_slots;if(b.google_num_sdo_slots)d+=3Db.g=
oogle_num_sdo_slots;=0A=
var g=3D"google_inline_div"+d,i=3D"<div id=3D"+L(g)+' =
style=3D"position:relative;width:'+b.google_ad_width+'px"></div><div =
style=3D"position:relative;width:'+b.google_ad_width+"px;height:"+b.googl=
e_ad_height+'px;z-index:-1"></div>';a.write(i);var =
o=3D"google_frame"+d,v=3Db.setTimeout(function(){IDIHost.unregisterListen=
er(o)},5000);IDIHost.createModule(c,o,b.google_ad_width,b.google_ad_heigh=
t,{callback:function(r,m){la(r,m,v)},pollingInterval:500,iframeAttrs:{sty=
le:"position: absolute;left:0px",marginWidth:"0",=0A=
marginHeight:"0",vspace:"0",hspace:"0",allowTransparency:"true"},parentDi=
vId:g})}else{a.write('<iframe name=3D"google_ads_frame" =
width=3D'+L(b.google_ad_width)+" height=3D"+L(b.google_ad_height)+" =
frameborder=3D"+L(b.google_ad_frameborder)+" src=3D"+L(c)+' =
marginwidth=3D"0" marginheight=3D"0" vspace=3D"0" hspace=3D"0" =
allowtransparency=3D"true" =
scrolling=3D"no">');a.write("</iframe>")}if(e!=3Dnull)a.write("</div>")}}=
else if(b.google_ad_output=3D=3D"textlink")a.write('<script =
language=3D"JavaScript1.1" src=3D'+L(c)+"><\/script>")}=0A=
function oa(b){for(var a in s)b[a]=3Dnull;for(var a in =
u){if(a=3D=3D"google_correlator")continue;b[a]=3Dnull}}function =
pa(b){if(b.google_ad_format)return =
b.google_ad_format.indexOf("_0ads")>0;return =
b.google_ad_output!=3D"html"&&b.google_num_radlinks>0}function =
Y(b){return b&&b.indexOf("_sdo")!=3D-1}function qa(){var =
b=3Dnull,a=3Dwindow,c=3Ddocument,e=3Dnew =
Date,d=3De.getTime(),g=3Da.google_ad_format;if(a.google_cpa_choice!=3Db){=
a.google_ad_url=3D"http://pagead2.googlesyndication.com/cpa/ads?";a.googl=
e_ad_url+=3D"client=3D"+escape(X(a.google_ad_client));=0A=
a.google_ad_region=3D"_google_cpa_region_";R("google_cpa_choice");if(type=
of c.characterSet!=3D"undefined")S("oe",c.characterSet);else if(typeof =
c.charset!=3D"undefined")S("oe",c.charset)}else =
if(Y(g)){a.google_ad_url=3D"http://pagead2.googlesyndication.com/pagead/s=
do?";a.google_ad_url+=3D"client=3D"+escape(ia(a.google_ad_client))}else{a=
.google_ad_url=3D"http://pagead2.googlesyndication.com/pagead/ads?";a.goo=
gle_ad_url+=3D"client=3D"+escape(X(a.google_ad_client))}R("google_ad_host=
");R("google_ad_host_tier_id");var i=3D=0A=
a.google_num_slots_by_client,o=3Da.google_num_slots_by_channel,v=3Da.goog=
le_prev_ad_formats_by_region,r=3Da.google_prev_ad_slotnames_by_region;if(=
a.google_ad_region=3D=3Db&&a.google_ad_section!=3Db)a.google_ad_region=3D=
a.google_ad_section;var =
m=3Da.google_ad_region=3D=3Db?"":a.google_ad_region;if(Y(g)){a.google_num=
_sdo_slots=3Da.google_num_sdo_slots?a.google_num_sdo_slots+1:1;if(a.googl=
e_num_sdo_slots>4)return false}else =
if(pa(a)){a.google_num_0ad_slots=3Da.google_num_0ad_slots?a.google_num_0a=
d_slots+1:1;if(a.google_num_0ad_slots>=0A=
3)return false}else =
if(a.google_cpa_choice=3D=3Db){a.google_num_ad_slots=3Da.google_num_ad_sl=
ots?a.google_num_ad_slots+1:1;if(a.google_num_slots_to_rotate){v[m]=3Db;r=
[m]=3Db;if(a.google_num_slot_to_show=3D=3Db)a.google_num_slot_to_show=3Dd=
%a.google_num_slots_to_rotate+1;if(a.google_num_slot_to_show!=3Da.google_=
num_ad_slots)return false}else =
if(a.google_num_ad_slots>6&&m=3D=3D"")return =
false}M("dt",e.getTime());R("google_language");if(a.google_country)R("goo=
gle_country");else R("google_gl");R("google_region");T("google_city");=0A=
T("google_hints");R("google_safe");R("google_encoding");R("google_last_mo=
dified_time");T("google_alternate_ad_url");R("google_alternate_color");R(=
"google_skip");R("google_targeting");var =
F=3Da.google_ad_client;if(!i[F]){i[F]=3D1;i.length+=3D1}else =
i[F]+=3D1;if(v[m])if(!Y(g)){S("prev_fmts",v[m].toLowerCase());if(i.length=
>1)M("slot",i[F])}if(r[m])S("prev_slotnames",r[m].toLowerCase());if(g&&!a=
.google_ad_slot){S("format",g.toLowerCase());if(!Y(g))v[m]=3Dv[m]?v[m]+",=
"+g:g}if(a.google_ad_slot)r[m]=3Dr[m]?r[m]+","+=0A=
a.google_ad_slot:a.google_ad_slot;R("google_max_num_ads");M("output",a.go=
ogle_ad_output);R("google_adtest");R("google_ad_callback");R("google_ad_s=
lot");T("google_correlator");if(a.google_ad_channel){T("google_ad_channel=
");var N=3D"",O=3Da.google_ad_channel.split(/[+, ]/);for(var =
I=3D0;I<O.length;I++){var J=3DO[I];if(!o[J])o[J]=3D1;else =
N+=3DJ+"+"}S("pv_ch",N)}if(a.google_enable_first_party_cookie)S("cookie",=
a._GA_googleCookieHelper.l());T("google_page_url");W("google_color_bg",d)=
;W("google_color_text",d);W("google_color_link",=0A=
d);W("google_color_url",d);W("google_color_border",d);W("google_color_lin=
e",d);if(a.google_reuse_colors)M("reuse_colors",1);else =
M("reuse_colors",0);R("google_kw_type");T("google_kw");T("google_contents=
");R("google_num_radlinks");R("google_max_radlink_len");R("google_rl_filt=
ering");R("google_rl_mode");R("google_rt");T("google_rl_dest_url");R("goo=
gle_num_radlinks_per_unit");R("google_ad_type");R("google_image_size");R(=
"google_ad_region");R("google_feedback");T("google_referrer_url");T("goog=
le_page_location");=0A=
M("frm",a.google_iframing);R("google_bid");R("google_cust_age");R("google=
_cust_gender");R("google_cust_interests");R("google_cust_id");R("google_c=
ust_job");R("google_cust_u_url");R("google_cust_l");R("google_cust_lh");R=
("google_cust_ch");R("google_ed");T("google_ui_features");T("google_only_=
ads_with_video");T("google_disable_video_autoplay");if(ra(a,c)&&c.body){v=
ar =
h=3Dc.body.scrollHeight,k=3Dc.body.clientHeight;if(k&&h)S("cc",Math.round=
(k*100/h))}da();M("ga_vid",a.gaGlobal.vid);M("ga_sid",a.gaGlobal.sid);=0A=
M("ga_hid",a.gaGlobal.hid);M("ga_fc",a.gaGlobal.from_cookie);T("google_an=
alytics_uacct");R("google_ad_override");R("google_flash_version");ga(a,e)=
;return true}function sa(){var =
b=3Dwindow,a=3Ddocument;ha(b);if(!qa())return;ma(b,a,b.google_ad_url,null=
);oa(b)}function ta(){sa();return true}function ra(b,a){return =
b.top.location=3D=3Da.location}function ua(b,a){var =
c=3Da.documentElement;if(ra(b,a))return =
false;if(b.google_ad_width&&b.google_ad_height){var =
e=3D1,d=3D1;if(b.innerHeight){e=3Db.innerWidth;d=3Db.innerHeight}else =
if(c&&=0A=
c.clientHeight){e=3Dc.clientWidth;d=3Dc.clientHeight}else =
if(a.body){e=3Da.body.clientWidth;d=3Da.body.clientHeight}if(d>2*b.google=
_ad_height||e>2*b.google_ad_width)return false}return true}function =
va(b){var =
a=3Dwindow,c=3Dnull,e=3Da.onerror;a.onerror=3Db;if(a.google_ad_frameborde=
r=3D=3Dc)a.google_ad_frameborder=3D0;if(a.google_ad_output=3D=3Dc)a.googl=
e_ad_output=3D"html";if(Y(a.google_ad_format)){var =
d=3Da.google_ad_format.match(/^(\d+)x(\d+)_.*/);if(d){a.google_ad_width=3D=
parseInt(d[1],10);a.google_ad_height=3DparseInt(d[2],10);=0A=
a.google_ad_output=3D"html"}}if(a.google_ad_format=3D=3Dc&&a.google_ad_ou=
tput=3D=3D"html")a.google_ad_format=3Da.google_ad_width+"x"+a.google_ad_h=
eight;wa(a,document);if(a.google_num_slots_by_channel=3D=3Dc)a.google_num=
_slots_by_channel=3D[];if(a.google_num_slots_by_client=3D=3Dc)a.google_nu=
m_slots_by_client=3D[];if(a.google_prev_ad_formats_by_region=3D=3Dc)a.goo=
gle_prev_ad_formats_by_region=3D[];if(a.google_prev_ad_slotnames_by_regio=
n=3D=3Dc)a.google_prev_ad_slotnames_by_region=3D[];if(a.google_correlator=
=3D=3Dc)a.google_correlator=3D(new Date).getTime();=0A=
if(a.google_adslot_loaded=3D=3Dc)a.google_adslot_loaded=3D{};if(a.google_=
adContentsBySlot=3D=3Dc)a.google_adContentsBySlot=3D{};if(a.google_flash_=
version=3D=3Dc)a.google_flash_version=3Dxa();a.onerror=3De}function =
ya(b){if(b in Z)return Z[b];return =
Z[b]=3Dnavigator.userAgent.toLowerCase().indexOf(b)!=3D-1}var =
Z=3D{};function na(b,a){if(b!=3D"html")return false;var =
c=3D{};c["ca-pub-7027491298716603"]=3Dtrue;c["ca-pub-8344185808443527"]=3D=
true;c["ca-pub-9812682548211238"]=3Dtrue;c["ca-pub-4424308218891706"]=3Dt=
rue;c["ca-pub-6922559858235084"]=3D=0A=
true;c["ca-pub-6477563040863705"]=3Dtrue;c["ca-google"]=3Dtrue;return =
c[X(a)]!=3Dnull}function za(b){var =
a=3D{},c=3Db.split("?"),e=3Dc[c.length-1].split("&");for(var =
d=3D0;d<e.length;d++){var =
g=3De[d].split("=3D");if(g[0])try{a[g[0].toLowerCase()]=3Dg.length>1?(win=
dow.decodeURIComponent?decodeURIComponent(g[1].replace(/\+/g," =
")):unescape(g[1])):""}catch(i){}}return a}function Aa(){var =
b=3Dwindow,a=3Dza(document.URL);if(a.google_ad_override){b.google_ad_over=
ride=3Da.google_ad_override;b.google_adtest=3D"on"}}function =
xa(){if(navigator.plugins&&=0A=
navigator.mimeTypes.length){var b=3Dnavigator.plugins["Shockwave =
Flash"];if(b&&b.description)return =
b.description.replace(/([a-zA-Z]|\s)+/,"").replace(/(\s)+r/,".")}else =
if(navigator.userAgent&&navigator.userAgent.indexOf("Windows =
CE")>=3D0){var a=3D3,c=3D1;while(c)try{c=3Dnew =
ActiveXObject("ShockwaveFlash.ShockwaveFlash."+(a+1));a++}catch(e){c=3Dnu=
ll}return a.toString()}else if(ya("msie")&&!window.opera){var =
c=3Dnull;try{c=3Dnew =
ActiveXObject("ShockwaveFlash.ShockwaveFlash.7")}catch(e){var =
a=3D0;try{c=3Dnew ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");=0A=
a=3D6;c.AllowScriptAccess=3D"always"}catch(e){if(a=3D=3D6)return =
a.toString()}try{c=3Dnew =
ActiveXObject("ShockwaveFlash.ShockwaveFlash")}catch(e){}}if(c!=3Dnull){v=
ar a=3Dc.GetVariable("$version").split(" ")[1];return =
a.replace(/,/g,".")}}return"0"}function Ba(b,a){for(var c in =
a)b["google_"+c]=3Da[c]}function Ca(b,a){if(!a)return b.location;return =
b.referrer}function =
Da(b,a){if(!a&&b.google_referrer_url=3D=3Dnull)return"0";else =
if(a&&b.google_referrer_url=3D=3Dnull)return"1";else =
if(!a&&b.google_referrer_url!=3Dnull)return"2";=0A=
else if(a&&b.google_referrer_url!=3Dnull)return"3";return"4"}function =
Ea(b,a,c,e){b.page_url=3DCa(c,e);b.page_location=3Dnull}function =
Fa(b,a,c,e){b.page_url=3Da.google_page_url;b.page_location=3DCa(c,e)||"EM=
PTY"}function Ga(b,a){var =
c=3D{},e=3Dua(b,a);c.iframing=3DDa(b,e);if(!(!b.google_page_url))Fa(c,b,a=
,e);else =
Ea(c,b,a,e);c.last_modified_time=3Da.location=3D=3Dc.page_url?Date.parse(=
a.lastModified)/1000:null;c.referrer_url=3De?b.google_referrer_url:(b.goo=
gle_page_url&&b.google_referrer_url?b.google_referrer_url:a.referrer);=0A=
return c}function Ha(b){var =
a=3D{},c=3Db.URL.substring(b.URL.lastIndexOf("http"));a.iframing=3Dnull;a=
.page_url=3Dc;a.page_location=3Db.location;a.last_modified_time=3Dnull;a.=
referrer_url=3Dc;return a}function wa(b,a){var =
c;c=3Db.google_page_url=3D=3Dnull&&Ia[a.domain]?Ha(a):Ga(b,a);Ba(b,c)}var=
 Ia=3D{};Ia["ad.yieldmanager.com"]=3Dtrue;Aa();va(ta);sa();=0A=
})()=0A=

------=_NextPart_000_0000_01C8AF11.12FDB1E0
Content-Type: multipart/alternative;
	boundary="----=_NextPart_001_0009_01C8AF11.13130EA0"


------=_NextPart_001_0009_01C8AF11.13130EA0
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://dotnetrix.co.uk/tabcontrols.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Frameset//EN">
<HTML><HEAD><TITLE>Dot Net Tips & Tricks</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Diso-8859-1">
<META content=3D"A few tips and tricks for Visual Studio in VB and C#"=20
name=3Ddescription>
<META=20
content=3Dvs,net,dotnet,vb,c#,tabcontrol,tabpage,theme,visual,styles,xp,o=
ffice,menu,alpha,bitmap,button,alpha,studio,radiobutton,radiogroup,transp=
arent,control,usercontrol,custom,check,checked,dotnet=20
name=3Dkeywords>
<META content=3D"MSHTML 6.00.6001.18023" name=3DGENERATOR>
<META content=3D"=A9 2003 NetBenefit" name=3Dcopyright></HEAD><FRAMESET =
border=3D0=20
frameSpacing=3D0 rows=3D100%,* frameBorder=3Dno cols=3D100%><FRAME =
name=3Dmain=20
src=3D"http://www.mddotnetrix.pwp.blueyonder.co.uk/tabcontrols.html"=20
frameBorder=3D0><NOFRAMES></NOFRAMES></FRAMESET></HTML>

------=_NextPart_001_0009_01C8AF11.13130EA0
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.mddotnetrix.pwp.blueyonder.co.uk/tabcontrols.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Welcome to Mick Dohertys site</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Diso-8859-1">
<META content=3Dhttp://schemas.microsoft.com/intellisense/ie5=20
name=3Dvs_targetSchema>
<META=20
content=3D".net, dotnet, c#, csharp, vb, vb.net, tabcontrol, custom =
tabcontrol, tabcontrol backcolor, selectedtab, disabled tab, mirrored =
tabcontrol, close tab, closeable tabcontrol, tabless tabcontrol, =
ownerdraw, contextmenu, tabpage, hide tabpage, visible, tabpage drag, =
drag tab"=20
name=3Dkeywords><LINK=20
href=3D"http://www.mddotnetrix.pwp.blueyonder.co.uk/general.css" =
type=3Dtext/css=20
rel=3DStylesheet>
<SCRIPT language=3Djavascript=20
src=3D"http://www.mddotnetrix.pwp.blueyonder.co.uk/general.js"=20
type=3Dtext/javascript></SCRIPT>

<SCRIPT language=3Djavascript=20
src=3D"http://www.mddotnetrix.pwp.blueyonder.co.uk/imageload.js"=20
type=3Dtext/javascript></SCRIPT>

<SCRIPT>=0A=
  //unfortunately Images download before dhtml loads so this step =0A=
  //is necessary to allow the Navbar to display before Images load. =0A=
  <!--=0A=
   var img1=3D"images/tabcontrol.png";=0A=
   var img2=3D"images/odtabcontrol.png";=0A=
   var img3=3D"images/tabcontrolex01.png";=0A=
   var img4=3D"images/mirrortab.png";=0A=
   var img5=3D"images/tabcontrolscroll.png";=0A=
   function SetImages()=0A=
   {=0A=
    loadImage('image1',img1);=0A=
    loadImage('image2',img2);=0A=
    loadImage('image3',img3);=0A=
    loadImage('image4',img4);=0A=
    loadImage('image5',img5);=0A=
   }=0A=
  -->=0A=
  </SCRIPT>

<META content=3D"MSHTML 6.00.6001.18023" name=3DGENERATOR></HEAD>
<BODY=20
onload=3D"SetNavBar('title1','Mick Dohertys DotNet Tips - =
TabControl');SetCounter('counter');SetImages();">
<DIV id=3Dtitle1>
<TABLE height=3D52 width=3D"100%" bgColor=3Dsilver>
  <TBODY>
  <TR>
    <TH>Navbar will load here</TH></TR></TBODY></TABLE></DIV>
<P></P>
<TABLE width=3D"100%">
  <TBODY>
  <TR vAlign=3Dtop>
    <TD class=3Dbody>
      <DIV class=3Dbody>How to Change the colours of a Tabcontrols =
Header Item.
      <P></P><IMG id=3Dimage1 height=3D100 width=3D589>
      <P></P><SMALL>The first thing to do is to set the TabControls =
DrawMode to=20
      OwnerDrawFixed as shown above. Then simply add the code shown =
below.=20
      </SMALL>
      <P></P><INPUT id=3DTip_1 =
onclick=3D"ToggleView('Tip_1','Tip1','Tip_1C','Tip1C')" type=3Dbutton =
value=3D"Show VB Code">=20
<INPUT id=3DTip_1C =
onclick=3D"ToggleView('Tip_1C','Tip1C','Tip_1','Tip1')" type=3Dbutton =
value=3D"Show C# Code">=20
      <SMALL>I'll leave you the challenge of modifying the code to show =
an=20
      image. </SMALL><!--=0A=
#########################################################################=
##############################################=0A=
### VB Change Colors of HeaderItem=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip1 style=3D"DISPLAY: none">Private Sub =
TabControl1_DrawItem(ByVal sender As Object, ByVal e As =
System.Windows.Forms.DrawItemEventArgs) Handles TabControl1.DrawItem

    <CODE class=3Dvbcomment>'Firstly we'll define some =
parameters.</CODE>
    Dim CurrentTab As TabPage =3D TabControl1.TabPages(e.Index)
    Dim ItemRect As Rectangle =3D TabControl1.GetTabRect(e.Index)
    Dim FillBrush As New SolidBrush(Color.Red)
    Dim TextBrush As New SolidBrush(Color.White)
    Dim sf As New StringFormat
    sf.Alignment =3D StringAlignment.Center
    sf.LineAlignment =3D StringAlignment.Center

    <CODE class=3Dvbcomment>'If we are currently painting the Selected =
TabItem we'll=20
    'change the brush colors and inflate the rectangle.</CODE>
    If CBool(e.State And DrawItemState.Selected) Then
        FillBrush.Color =3D Color.White
        TextBrush.Color =3D Color.Red
        ItemRect.Inflate(2, 2)
    End If

    <CODE class=3Dvbcomment>'Set up rotation for left and right aligned =
tabs</CODE>
    If TabControl1.Alignment =3D TabAlignment.Left Or =
TabControl1.Alignment =3D TabAlignment.Right Then
        Dim RotateAngle As Single =3D 90
        If TabControl1.Alignment =3D TabAlignment.Left Then RotateAngle =
=3D 270
        Dim cp As New PointF(ItemRect.Left + (ItemRect.Width \ 2), =
ItemRect.Top + (ItemRect.Height \ 2))
        e.Graphics.TranslateTransform(cp.X, cp.Y)
        e.Graphics.RotateTransform(RotateAngle)
        ItemRect =3D New Rectangle(-(ItemRect.Height \ 2), =
-(ItemRect.Width \ 2), ItemRect.Height, ItemRect.Width)
    End If

    <CODE class=3Dvbcomment>'Next we'll paint the TabItem with our Fill =
Brush</CODE>
    e.Graphics.FillRectangle(FillBrush, ItemRect)

    <CODE class=3Dvbcomment>'Now draw the text.</CODE>
    e.Graphics.DrawString(CurrentTab.Text, e.Font, TextBrush, =
RectangleF.op_Implicit(ItemRect), sf)

    <CODE class=3Dvbcomment>'Reset any Graphics rotation</CODE>
    e.Graphics.ResetTransform()

    <CODE class=3Dvbcomment>'Finally, we should Dispose of our =
brushes.</CODE>
    FillBrush.Dispose()
    TextBrush.Dispose()

End Sub</PRE><!--=0A=
#########################################################################=
##############################################=0A=
### C# Change Colors of HeaderItem=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip1C style=3D"DISPLAY: none">private void =
tabControl1_DrawItem(object sender, =
System.Windows.Forms.DrawItemEventArgs e)
{
    TabPage CurrentTab =3D tabControl1.TabPages[e.Index];
    Rectangle ItemRect =3D tabControl1.GetTabRect(e.Index);
    SolidBrush FillBrush =3D new SolidBrush(Color.Red);
    SolidBrush TextBrush =3D new SolidBrush(Color.White);
    StringFormat sf =3D new StringFormat();
    sf.Alignment =3D StringAlignment.Center;
    sf.LineAlignment =3D StringAlignment.Center;

    <CODE class=3Dvbcomment>//If we are currently painting the Selected =
TabItem we'll
    //change the brush colors and inflate the rectangle.</CODE>
    if (System.Convert.ToBoolean(e.State &amp; DrawItemState.Selected))
    {
        FillBrush.Color =3D Color.White;
        TextBrush.Color =3D Color.Red;
        ItemRect.Inflate(2, 2);
    }

    <CODE class=3Dvbcomment>//Set up rotation for left and right aligned =
tabs</CODE>
    if (tabControl1.Alignment =3D=3D TabAlignment.Left || =
tabControl1.Alignment =3D=3D TabAlignment.Right)
    {
        float RotateAngle =3D 90;
        if (tabControl1.Alignment =3D=3D TabAlignment.Left)
            RotateAngle =3D 270;
        PointF cp =3D new PointF(ItemRect.Left + (ItemRect.Width / 2), =
ItemRect.Top + (ItemRect.Height / 2));
        e.Graphics.TranslateTransform(cp.X, cp.Y);
        e.Graphics.RotateTransform(RotateAngle);
        ItemRect =3D new Rectangle(-(ItemRect.Height / 2), =
-(ItemRect.Width / 2), ItemRect.Height, ItemRect.Width);
    }

    <CODE class=3Dvbcomment>//Next we'll paint the TabItem with our Fill =
Brush</CODE>
    e.Graphics.FillRectangle(FillBrush, ItemRect);

    <CODE class=3Dvbcomment>//Now draw the text.</CODE>
    e.Graphics.DrawString(CurrentTab.Text, e.Font, TextBrush, =
RectangleF.op_Implicit(ItemRect), sf);

    <CODE class=3Dvbcomment>//</CODE>Reset any Graphics rotation
    e.Graphics.ResetTransform();

    <CODE class=3Dvbcomment>//Finally, we should Dispose of our =
brushes.</CODE>
    FillBrush.Dispose();
    TextBrush.Dispose();
}</PRE>
      <HR>
      A Completely OwnerDraw TabControl.
      <P></P><IMG id=3Dimage2 height=3D98 width=3D798>
      <P></P><SMALL>A little more work involved here than in the =
previous case,=20
      but definately worth it. Add a new UserControl to your project and =
replace=20
      the code with that shown below. As you can see we have made the =
BackColor=20
      property of the TabControl Visible in the Designer and put a =
custom=20
      background behind Transparent Tabpages.<BR>This control has been =
updated=20
      to incorporate a modified version of the SelectedIndexChanging =
event in <A=20
      =
href=3D"http://groups.google.co.uk/groups?hl=3Den&amp;lr=3D&amp;ie=3DUTF-=
8&amp;th=3D35eda5cb0b831b3c&amp;rnum=3D3">Matt=20
      Hinz</A> and <A=20
      =
href=3D"http://www.onteorasoftware.com/downloads/onteoratabcontrol.zip">K=
en=20
      Tuckers</A> Tabcontrol source.<BR>The project needs a custom =
designer to=20
      get the Design time painting to behave properly, but that's =
something for=20
      a later project.<BR>You'll find TabControlEx on my <A=20
      =
href=3D"http://www.mddotnetrix.pwp.blueyonder.co.uk/controls.html">Contro=
ls</A>=20
      page with all the work already done.
      <P></P>For more complete examples see the following articles on=20
      codeproject:<BR><A=20
      =
href=3D"http://www.codeproject.com/cs/miscctrl/flattabcontrol.asp">http:/=
/www.codeproject.com/cs/miscctrl/flattabcontrol.asp</A><BR><A=20
      =
href=3D"http://www.codeproject.com/dotnet/CustomTabControl.asp">http://ww=
w.codeproject.com/dotnet/CustomTabControl.asp</A>=20
      </SMALL>
      <P></P><SMALL><INPUT id=3DTip_2 =
onclick=3D"ToggleView('Tip_2','Tip2','Tip_2C','Tip2C')" type=3Dbutton =
value=3D"Show VB Code">=20
<INPUT id=3DTip_2C =
onclick=3D"ToggleView('Tip_2C','Tip2C','Tip_2','Tip2')" type=3Dbutton =
value=3D"Show C# Code">=20
      Modify the appearance to reflect the style you want. </SMALL><!--=0A=
#########################################################################=
##############################################=0A=
### VB Completely OwnerDraw TabControl=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip2 style=3D"DISPLAY: none">Imports System.ComponentModel
Imports System.Runtime.InteropServices
Imports System.Reflection

Public Class TabControl
    Inherits System.Windows.Forms.TabControl

#Region " Windows Form Designer generated code "

    Public Sub New()
        MyBase.New()

        <CODE class=3Dvbcomment>'This call is required by the Windows =
Form Designer.</CODE>
        InitializeComponent()

        <CODE class=3Dvbcomment>'Add any initialization after the =
InitializeComponent() call</CODE>
        setstyle(ControlStyles.AllPaintingInWmPaint Or _
                ControlStyles.DoubleBuffer Or _
                ControlStyles.ResizeRedraw Or _
                ControlStyles.UserPaint, True)

    End Sub

    <CODE class=3Dvbcomment>'UserControl1 overrides dispose to clean up =
the component list.</CODE>
    Protected Overloads Overrides Sub Dispose(ByVal disposing As =
Boolean)
        If disposing Then
            If Not (components Is Nothing) Then
                components.Dispose()
            End If
        End If
        MyBase.Dispose(disposing)
    End Sub

    <CODE class=3Dvbcomment>'Required by the Windows Form =
Designer</CODE>
    Private components As System.ComponentModel.IContainer

    <CODE class=3Dvbcomment>'NOTE: The following procedure is required =
by the Windows Form Designer
    'It can be modified using the Windows Form Designer. =20
    'Do not modify it using the code editor.</CODE>
    &lt;System.Diagnostics.DebuggerStepThrough()&gt; Private Sub =
InitializeComponent()
        components =3D New System.ComponentModel.Container
    End Sub

#End Region

#Region " InterOP "

    &lt;StructLayout(LayoutKind.Sequential)&gt; _
    Private Structure NMHDR
        Public HWND As Int32
        Public idFrom As Int32
        Public code As Int32
        Public Overloads Function ToString() As String
            Return String.Format("Hwnd: {0}, ControlID: {1}, Code: {2}", =
HWND, idFrom, code)
        End Function
    End Structure

    Private Const TCN_FIRST As Int32 =3D &amp;HFFFFFFFFFFFFFDDA&amp;
    Private Const TCN_SELCHANGING As Int32 =3D (TCN_FIRST - 2)

    Private Const WM_USER As Int32 =3D &amp;H400&amp;
    Private Const WM_NOTIFY As Int32 =3D &amp;H4E&amp;
    Private Const WM_REFLECT As Int32 =3D WM_USER + &amp;H1C00&amp;

#End Region

#Region " BackColor Manipulation "

    <CODE class=3Dvbcomment>'As well as exposing the property to the =
Designer we want it to behave just like any other=20
    'controls BackColor property so we need some clever =
manipulation.</CODE>
    Private m_Backcolor As Color =3D Color.Empty
    &lt;Browsable(True), _
    Description("The background color used to display text and graphics =
in a control.")&gt; _
    Public Overrides Property BackColor() As Color
        Get
            If m_Backcolor.Equals(Color.Empty) Then
                If Parent Is Nothing Then
                    Return Control.DefaultBackColor
                Else
                    Return Parent.BackColor
                End If
            End If
            Return m_Backcolor
        End Get
        Set(ByVal Value As Color)
            If m_Backcolor.Equals(Value) Then Return
            m_Backcolor =3D Value
            Invalidate()
            <CODE class=3Dvbcomment>'Let the Tabpages know that the =
backcolor has changed.</CODE>
            MyBase.OnBackColorChanged(EventArgs.Empty)
        End Set
    End Property
    Public Function ShouldSerializeBackColor() As Boolean
        Return Not m_Backcolor.Equals(Color.Empty)
    End Function
    Public Overrides Sub ResetBackColor()
        m_Backcolor =3D Color.Empty
        Invalidate()
    End Sub

#End Region

    Protected Overrides Sub OnParentBackColorChanged(ByVal e As =
System.EventArgs)
        MyBase.OnParentBackColorChanged(e)
        Invalidate()
    End Sub

    Protected Overrides Sub OnSelectedIndexChanged(ByVal e As =
System.EventArgs)
        MyBase.OnSelectedIndexChanged(e)
        Invalidate()
    End Sub

    Protected Overrides Sub OnPaint(ByVal e As =
System.Windows.Forms.PaintEventArgs)
        MyBase.OnPaint(e)
        e.Graphics.Clear(BackColor)
        Dim r As Rectangle =3D Me.ClientRectangle
        If TabCount &lt;=3D 0 Then Return
        <CODE class=3Dvbcomment>'Draw a custom background for =
Transparent TabPages</CODE>
        r =3D SelectedTab.Bounds
        Dim sf As New StringFormat
        sf.Alignment =3D StringAlignment.Center
        sf.LineAlignment =3D StringAlignment.Center
        Dim DrawFont As New Font(Font.FontFamily, 24, FontStyle.Regular, =
GraphicsUnit.Pixel)
        ControlPaint.DrawStringDisabled(e.Graphics, "Micks Ownerdraw =
TabControl", DrawFont, BackColor, RectangleF.op_Implicit(r), sf)
        DrawFont.Dispose()
        <CODE class=3Dvbcomment>'Draw a border around TabPage</CODE>
        r.Inflate(3, 3)
        Dim tp As TabPage =3D TabPages(SelectedIndex)
        Dim PaintBrush As New SolidBrush(tp.BackColor)
        e.Graphics.FillRectangle(PaintBrush, r)
        ControlPaint.DrawBorder(e.Graphics, r, PaintBrush.Color, =
ButtonBorderStyle.Outset)
        <CODE class=3Dvbcomment>'Draw the Tabs</CODE>
        For index As Integer =3D 0 To TabCount - 1
            tp =3D TabPages(index)
            r =3D GetTabRect(index)
            Dim bs As ButtonBorderStyle =3D ButtonBorderStyle.Outset
            If index =3D SelectedIndex Then bs =3D =
ButtonBorderStyle.Inset
            PaintBrush.Color =3D tp.BackColor
            e.Graphics.FillRectangle(PaintBrush, r)
            ControlPaint.DrawBorder(e.Graphics, r, PaintBrush.Color, bs)
            PaintBrush.Color =3D tp.ForeColor

            <CODE class=3Dvbcomment>'Set up rotation for left and right =
aligned tabs</CODE>
            If Alignment =3D TabAlignment.Left Or Alignment =3D =
TabAlignment.Right Then
                Dim RotateAngle As Single =3D 90
                If Alignment =3D TabAlignment.Left Then RotateAngle =3D =
270
                Dim cp As New PointF(r.Left + (r.Width \ 2), r.Top + =
(r.Height \ 2))
                e.Graphics.TranslateTransform(cp.X, cp.Y)
                e.Graphics.RotateTransform(RotateAngle)
                r =3D New Rectangle(-(r.Height \ 2), -(r.Width \ 2), =
r.Height, r.Width)
            End If
            <CODE class=3Dvbcomment>'Draw the Tab Text</CODE>
            If tp.Enabled Then
                e.Graphics.DrawString(tp.Text, Font, PaintBrush, =
RectangleF.op_Implicit(r), sf)
            Else
                ControlPaint.DrawStringDisabled(e.Graphics, tp.Text, =
Font, tp.BackColor, RectangleF.op_Implicit(r), sf)
            End If

            e.Graphics.ResetTransform()

        Next
        PaintBrush.Dispose()
    End Sub

    &lt;Description("Occurs as a tab is being changed.")&gt; _
    Public Event SelectedIndexChanging As =
SelectedTabPageChangeEventHandler

    Protected Overrides Sub WndProc(ByRef m As =
System.Windows.Forms.Message)
        If m.Msg =3D (WM_REFLECT + WM_NOTIFY) Then
            Dim hdr As NMHDR =3D =
DirectCast(Marshal.PtrToStructure(m.LParam, GetType(NMHDR)), NMHDR)
            If hdr.code =3D TCN_SELCHANGING Then
                Dim tp As TabPage =3D =
TestTab(Me.PointToClient(Cursor.Position))
                If Not tp Is Nothing Then
                    Dim e As New TabPageChangeEventArgs(Me.SelectedTab, =
tp)
                    RaiseEvent SelectedIndexChanging(Me, e)
                    If e.Cancel OrElse tp.Enabled =3D False Then
                        m.Result =3D New IntPtr(1)
                        Return
                    End If
                End If
            End If
        End If
        MyBase.WndProc(m)
    End Sub

    Private Function TestTab(ByVal pt As Point) As TabPage
        For index As Integer =3D 0 To TabCount - 1
            If GetTabRect(index).Contains(pt.X, pt.Y) Then
                Return TabPages(index)
            End If
        Next
        Return Nothing
    End Function

End Class

#Region " EventArgs Class's "

Public Class TabPageChangeEventArgs
    Inherits EventArgs

    Private _Selected As TabPage
    Private _PreSelected As TabPage
    Public Cancel As Boolean =3D False

    Public ReadOnly Property CurrentTab() As TabPage
        Get
            Return _Selected
        End Get
    End Property

    Public ReadOnly Property NextTab() As TabPage
        Get
            Return _PreSelected
        End Get
    End Property

    Public Sub New(ByVal CurrentTab As TabPage, ByVal NextTab As =
TabPage)
        _Selected =3D CurrentTab
        _PreSelected =3D NextTab
    End Sub

End Class

Public Delegate Sub SelectedTabPageChangeEventHandler(ByVal sender As =
Object, ByVal e As TabPageChangeEventArgs)

#End Region</PRE><!--=0A=
#########################################################################=
##############################################=0A=
### C# Completely OwnerDraw TabControl=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip2C style=3D"DISPLAY: none">using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Windows.Forms;
using System.Runtime.InteropServices;

namespace Dotnetrix_Samples
{
    <CODE class=3Dvbcomment>/// &lt;summary&gt;
    /// Summary description for TabControl.
    /// &lt;/summary&gt;</CODE>
    public class TabControl : System.Windows.Forms.TabControl
    {
        <CODE class=3Dvbcomment>/// &lt;summary&gt;=20
        /// Required designer variable.
        /// &lt;/summary&gt;</CODE>
        private System.ComponentModel.Container components =3D null;

        public TabControl()
        {
            <CODE class=3Dvbcomment>// This call is required by the =
Windows.Forms Form Designer.</CODE>
            InitializeComponent();

            <CODE class=3Dvbcomment>// TODO: Add any initialization =
after the InitializeComponent call</CODE>
            SetStyle(ControlStyles.AllPaintingInWmPaint | =
ControlStyles.DoubleBuffer | ControlStyles.ResizeRedraw | =
ControlStyles.UserPaint, true);

        }


        <CODE class=3Dvbcomment>/// &lt;summary&gt;=20
        /// Clean up any resources being used.
        /// &lt;/summary&gt;</CODE>
        protected override void Dispose( bool disposing )
        {
            if( disposing )
            {
                if(components !=3D null)
                {
                    components.Dispose();
                }
            }
            base.Dispose( disposing );
        }


        #region Component Designer generated code
        <CODE class=3Dvbcomment>/// &lt;summary&gt;=20
        /// Required method for Designer support - do not modify=20
        /// the contents of this method with the code editor.
        /// &lt;/summary&gt;</CODE>
        private void InitializeComponent()
        {
            components =3D new System.ComponentModel.Container();
        }
        #endregion

        #region Interop

        [StructLayout(LayoutKind.Sequential)]
            private struct NMHDR
        {
            public IntPtr HWND;
            public uint idFrom;
            public int code;
            public override String ToString()
            {
                return String.Format("Hwnd: {0}, ControlID: {1}, Code: =
{2}", HWND, idFrom, code);
            }
        }
       =20
        private const int TCN_FIRST =3D 0 - 550;                =20
        private const int TCN_SELCHANGING =3D (TCN_FIRST - 2);
       =20
        private const int WM_USER =3D 0x400;
        private const int WM_NOTIFY =3D 0x4E;
        private const int WM_REFLECT =3D WM_USER + 0x1C00;
       =20
        #endregion

        #region BackColor Manipulation

        <CODE class=3Dvbcomment>//As well as exposing the property to =
the Designer we want it to behave just like any other=20
        //controls BackColor property so we need some clever =
manipulation.</CODE>

        private Color m_Backcolor =3D Color.Empty;
        [Browsable(true),Description("The background color used to =
display text and graphics in a control.")]
        public override Color BackColor
        {
            get
            {
                if (m_Backcolor.Equals(Color.Empty))
                {
                    if (Parent =3D=3D null)
                        return Control.DefaultBackColor;
                    else
                        return Parent.BackColor;
                }
                return m_Backcolor;
            }
            set
            {
                if (m_Backcolor.Equals(value)) return;
                m_Backcolor =3D value;
                Invalidate();
                <CODE class=3Dvbcomment>//Let the Tabpages know that the =
backcolor has changed.</CODE>
                base.OnBackColorChanged(EventArgs.Empty);
            }
        }
        public bool ShouldSerializeBackColor()
        {
            return !m_Backcolor.Equals(Color.Empty);
        }
        public override void ResetBackColor()
        {
            m_Backcolor =3D Color.Empty;
            Invalidate();
        }

        #endregion

        protected override void OnParentBackColorChanged(EventArgs e)
        {
            base.OnParentBackColorChanged (e);
            Invalidate();
        }


        protected override void OnSelectedIndexChanged(EventArgs e)
        {
            base.OnSelectedIndexChanged (e);
            Invalidate();
        }


        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint (e);
            e.Graphics.Clear(BackColor);
            Rectangle r =3D ClientRectangle;
            if (TabCount &lt;=3D 0) return;
            <CODE class=3Dvbcomment>//Draw a custom background for =
Transparent TabPages</CODE>
            r =3D SelectedTab.Bounds;
            StringFormat sf =3D new StringFormat();
            sf.Alignment =3D StringAlignment.Center;
            sf.LineAlignment =3D StringAlignment.Center;
            Font DrawFont =3D new Font(Font.FontFamily, 24, =
FontStyle.Regular, GraphicsUnit.Pixel);
            ControlPaint.DrawStringDisabled(e.Graphics, "Micks Ownerdraw =
TabControl", DrawFont, BackColor, (RectangleF)r, sf);
            DrawFont.Dispose();
            <CODE class=3Dvbcomment>//Draw a border around =
TabPage</CODE>
            r.Inflate(3, 3);
            TabPage tp =3D TabPages[SelectedIndex];
            SolidBrush PaintBrush =3D new SolidBrush(tp.BackColor);
            e.Graphics.FillRectangle(PaintBrush, r);
            ControlPaint.DrawBorder(e.Graphics, r, PaintBrush.Color, =
ButtonBorderStyle.Outset);
            <CODE class=3Dvbcomment>//Draw the Tabs</CODE>
            for (int index =3D 0; index &lt;=3D TabCount - 1; index++)
            {
                tp =3D TabPages[index];
                r =3D GetTabRect(index);
                ButtonBorderStyle bs =3D ButtonBorderStyle.Outset;
                if (index =3D=3D SelectedIndex) bs =3D =
ButtonBorderStyle.Inset;
                PaintBrush.Color =3D tp.BackColor;
                e.Graphics.FillRectangle(PaintBrush, r);
                ControlPaint.DrawBorder(e.Graphics, r, PaintBrush.Color, =
bs);
                PaintBrush.Color =3D tp.ForeColor;

                <CODE class=3Dvbcomment>//Set up rotation for left and =
right aligned tabs</CODE>
                if (Alignment =3D=3D TabAlignment.Left || Alignment =
=3D=3D TabAlignment.Right)
                {
                    float RotateAngle =3D 90;
                    if (Alignment =3D=3D TabAlignment.Left) RotateAngle =
=3D 270;
                    PointF cp =3D new PointF(r.Left + (r.Width &gt;&gt; =
1), r.Top + (r.Height &gt;&gt; 1));
                    e.Graphics.TranslateTransform(cp.X, cp.Y);
                    e.Graphics.RotateTransform(RotateAngle);
                    r =3D new Rectangle(-(r.Height &gt;&gt; 1), =
-(r.Width &gt;&gt; 1), r.Height, r.Width);
                }
                <CODE class=3Dvbcomment>//Draw the Tab Text</CODE>
                if (tp.Enabled)
                    e.Graphics.DrawString(tp.Text, Font, PaintBrush, =
(RectangleF)r, sf);
                else
                    ControlPaint.DrawStringDisabled(e.Graphics, tp.Text, =
Font, tp.BackColor, (RectangleF)r, sf);
               =20
                e.Graphics.ResetTransform();
            }

            PaintBrush.Dispose();

        }


        [Description("Occurs as a tab is being changed.")]
        public event SelectedTabPageChangeEventHandler =
SelectedIndexChanging;

        protected override void WndProc(ref Message m)
        {
            if (m.Msg =3D=3D (WM_REFLECT + WM_NOTIFY))
            {
                NMHDR hdr =3D (NMHDR)(Marshal.PtrToStructure(m.LParam, =
typeof(NMHDR)));
                if (hdr.code =3D=3D TCN_SELCHANGING)
                {
                    TabPage tp =3D =
TestTab(PointToClient(Cursor.Position));
                    if (tp !=3D null)
                    {
                        TabPageChangeEventArgs e =3D new =
TabPageChangeEventArgs(SelectedTab, tp);
                        if (SelectedIndexChanging !=3D null)
                            SelectedIndexChanging(this, e);
                        if (e.Cancel || tp.Enabled =3D=3D false)
                        {
                            m.Result =3D new IntPtr(1);
                            return;
                        }
                    }
                }
            }
            base.WndProc (ref m);
        }


        private TabPage TestTab(Point pt)
        {
            for (int index =3D 0; index &lt;=3D TabCount - 1; index++)
            {
                if (GetTabRect(index).Contains(pt.X, pt.Y))
                    return TabPages[index];
            }
            return null;
        }
       =20
    }


    public class TabPageChangeEventArgs : EventArgs
    {
        private TabPage _Selected =3D null;
        private TabPage _PreSelected =3D null;
        public bool Cancel =3D false;

        public TabPage CurrentTab
        {
            get
            {
                return _Selected;
            }
        }


        public  TabPage NextTab
        {
            get
            {
                return _PreSelected;
            }
        }


        public TabPageChangeEventArgs(TabPage CurrentTab, TabPage =
NextTab)
        {
            _Selected =3D CurrentTab;
            _PreSelected =3D NextTab;
        }


    }


    public delegate void SelectedTabPageChangeEventHandler(Object =
sender, TabPageChangeEventArgs e);

}</PRE>
      <HR>
      Associate a ContextMenu with the TabItem headers of a Tabcontrol.
      <P></P><SMALL>23 June -2006: Updated so that looping through =
tabpagess is=20
      no longer required.</SMALL>
      <P></P><INPUT id=3DTip_3 =
onclick=3D"ToggleView('Tip_3','Tip3','Tip_3C','Tip3C')" type=3Dbutton =
value=3D"Show VB Code">=20
<INPUT id=3DTip_3C =
onclick=3D"ToggleView('Tip_3C','Tip3C','Tip_3','Tip3')" type=3Dbutton =
value=3D"Show C# Code">=20
<!--=0A=
#########################################################################=
##############################################=0A=
### VB Context Menu with TabItems=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip3 style=3D"DISPLAY: none">    &lt;Flags()&gt; _
    Private Enum TCHITTESTFLAGS
        TCHT_NOWHERE =3D 1
        TCHT_ONITEMICON =3D 2
        TCHT_ONITEMLABEL =3D 4
        TCHT_ONITEM =3D TCHT_ONITEMICON Or TCHT_ONITEMLABEL
    End Enum

    Private Const TCM_HITTEST As Int32 =3D &amp;H130D

    =
&lt;System.Runtime.InteropServices.StructLayout(System.Runtime.InteropSer=
vices.LayoutKind.Sequential)&gt; _
    Private Structure TCHITTESTINFO
        Public pt As Point
        Public flags As TCHITTESTFLAGS
        Public Sub New(ByVal x As Int32, ByVal y As Int32)
            pt =3D New Point(x, y)
        End Sub
    End Structure

    &lt;System.Runtime.InteropServices.DllImport("user32.dll")&gt; _
    Private Shared Function SendMessage(ByVal hwnd As IntPtr, ByVal msg =
As Int32, ByVal wParam As IntPtr, ByRef lParam As TCHITTESTINFO) As =
Int32
    End Function

    Private Sub TabControl1_MouseDown(ByVal sender As Object, ByVal e As =
System.Windows.Forms.MouseEventArgs) Handles TabControl1.MouseDown
        If e.Button =3D MouseButtons.Right Then
            Dim HTI As New TCHITTESTINFO(e.X, e.Y)
            Dim hotTab As TabPage =3D =
TabControl1.TabPages(SendMessage(TabControl1.Handle, TCM_HITTEST, =
IntPtr.Zero, HTI))
            TabControl1.ContextMenu =3D hotTab.ContextMenu
        End If
    End Sub

    Private Sub TabControl1_MouseUp(ByVal sender As Object, ByVal e As =
System.Windows.Forms.MouseEventArgs) Handles TabControl1.MouseUp
        TabControl1.ContextMenu =3D Nothing
    End Sub</PRE><!--=0A=
#########################################################################=
##############################################=0A=
### C# Context Menu with TabItems=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip3C style=3D"DISPLAY: none">    [Flags()]
    private enum TCHITTESTFLAGS
    {
        TCHT_NOWHERE =3D 1,
        TCHT_ONITEMICON =3D 2,
        TCHT_ONITEMLABEL =3D 4,
        TCHT_ONITEM =3D TCHT_ONITEMICON | TCHT_ONITEMLABEL
    }

    private const int TCM_HITTEST =3D 0x130D;
       =20
    =
[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServic=
es.LayoutKind.Sequential)]
    private struct TCHITTESTINFO
    {
        public Point pt;
        public TCHITTESTFLAGS flags;
        public TCHITTESTINFO(int x, int y)
        {
            pt =3D new Point(x, y);
            flags =3D TCHITTESTFLAGS.TCHT_ONITEM;
        }
    }
       =20
    [System.Runtime.InteropServices.DllImport("user32.dll")]
    private static extern int SendMessage(IntPtr hwnd, int msg, IntPtr =
wParam, ref TCHITTESTINFO lParam);

    private void tabControl1_MouseDown(object sender, =
System.Windows.Forms.MouseEventArgs e)
    {
        if (e.Button =3D=3D MouseButtons.Right)
        {
            TCHITTESTINFO HTI =3D new TCHITTESTINFO(e.X, e.Y);
            TabPage hotTab =3D =
tabControl1.TabPages[SendMessage(tabControl1.Handle, TCM_HITTEST, =
IntPtr.Zero,ref HTI)];
            tabControl1.ContextMenu =3D hotTab.ContextMenu;
        }
    }

    private void tabControl1_MouseUp(object sender, =
System.Windows.Forms.MouseEventArgs e)
    {
        tabControl1.ContextMenu =3D null;
    }</PRE>
      <HR>
      Hide and Show Tabpages in a Tabcontrol.
      <P></P><SMALL>The Visible property has not been implemented on the =

      TabControl, and there is no Insert method.<BR>The following =
functions are=20
      a workaround. </SMALL>
      <P></P><INPUT id=3DTip_4 =
onclick=3D"ToggleView('Tip_4','Tip4','Tip_4C','Tip4C')" type=3Dbutton =
value=3D"Show VB Code">=20
<INPUT id=3DTip_4C =
onclick=3D"ToggleView('Tip_4C','Tip4C','Tip_4','Tip4')" type=3Dbutton =
value=3D"Show C# Code">=20
<!--=0A=
#########################################################################=
##############################################=0A=
### VB Hide/Show TabPages=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip4 style=3D"DISPLAY: none">Private Sub HideTabPage(ByVal =
tp As TabPage)
    If TabControl1.TabPages.Contains(tp) Then =
TabControl1.TabPages.Remove(tp)
End Sub

Private Sub ShowTabPage(ByVal tp As TabPage)
    ShowTabPage(tp, TabControl1.TabPages.Count)
End Sub

Private Sub ShowTabPage(ByVal tp As TabPage, ByVal index As Integer)
    If TabControl1.TabPages.Contains(tp) Then Return
    InsertTabPage(tp, index)
End Sub

Private Sub InsertTabPage(ByVal [tabpage] As TabPage, ByVal [index] As =
Integer)
    If [index] &lt; 0 Or [index] &gt; TabControl1.TabCount Then
        Throw New ArgumentException("Index out of Range.")
    End If
    TabControl1.TabPages.Add([tabpage])
    If [index] &lt; TabControl1.TabCount - 1 Then
        Do While TabControl1.TabPages.IndexOf([tabpage]) &lt;&gt; =
[index]
            SwapTabPages([tabpage], =
(TabControl1.TabPages(TabControl1.TabPages.IndexOf([tabpage]) - 1)))
        Loop
    End If
    TabControl1.SelectedTab =3D [tabpage]
End Sub

Private Sub SwapTabPages(ByVal tp1 As TabPage, ByVal tp2 As TabPage)
    If TabControl1.TabPages.Contains(tp1) =3D False Or =
TabControl1.TabPages.Contains(tp2) =3D False Then
        Throw New ArgumentException("TabPages must be in the TabCotrols =
TabPageCollection.")
    End If
    Dim Index1 As Integer =3D TabControl1.TabPages.IndexOf(tp1)
    Dim Index2 As Integer =3D TabControl1.TabPages.IndexOf(tp2)
    TabControl1.TabPages(Index1) =3D tp2
    TabControl1.TabPages(Index2) =3D tp1

    <CODE class=3Dvbcomment>'Uncomment the following section to overcome =
bugs in the Compact Framework
    'TabControl1.SelectedIndex =3D TabControl1.SelectedIndex=20
    'Dim tp1Text, tp2Text As String
    'tp1Text =3D tp1.Text
    'tp2Text =3D tp2.Text
    'tp1.Text=3Dtp2Text
    'tp2.Text=3Dtp1Text</CODE>

End Sub</PRE><!--=0A=
#########################################################################=
##############################################=0A=
### C# Hide/Show TabPages=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip4C style=3D"DISPLAY: none">private void =
HideTabPage(TabPage tp)
{
    if (tabControl1.TabPages.Contains(tp))
        tabControl1.TabPages.Remove(tp);
}


private void ShowTabPage(TabPage tp)
{
    ShowTabPage(tp, tabControl1.TabPages.Count);
}


private void ShowTabPage(TabPage tp , int index)
{
    if (tabControl1.TabPages.Contains(tp)) return;
    InsertTabPage(tp, index);
}


private void InsertTabPage(TabPage tabpage, int index)
{
    if (index &lt; 0 || index &gt; tabControl1.TabCount)
        throw new ArgumentException("Index out of Range.");
    tabControl1.TabPages.Add(tabpage);
    if (index &lt; tabControl1.TabCount - 1)
        do=20
        {
            SwapTabPages(tabpage, =
(tabControl1.TabPages[tabControl1.TabPages.IndexOf(tabpage) - 1]));
        }
        while (tabControl1.TabPages.IndexOf(tabpage) !=3D index);
    tabControl1.SelectedTab =3D tabpage;
}


private void SwapTabPages(TabPage tp1, TabPage tp2)
{
    if (tabControl1.TabPages.Contains(tp1) =3D=3D false || =
tabControl1.TabPages.Contains(tp2) =3D=3D false)
        throw new ArgumentException("TabPages must be in the TabControls =
TabPageCollection.");
          =20
    int Index1 =3D tabControl1.TabPages.IndexOf(tp1);
    int Index2 =3D tabControl1.TabPages.IndexOf(tp2);
    tabControl1.TabPages[Index1] =3D tp2;
    tabControl1.TabPages[Index2] =3D tp1;

    <CODE class=3Dvbcomment>//Uncomment the following section to =
overcome bugs in the Compact Framework
    //tabControl1.SelectedIndex =3D tabControl1.SelectedIndex;=20
    //string tp1Text, tp2Text;
    //tp1Text =3D tp1.Text;
    //tp2Text =3D tp2.Text;
    //tp1.Text=3Dtp2Text;
    //tp2.Text=3Dtp1Text;</CODE>

}</PRE>
      <HR>
      An Alternative approach to TabPage Navigation.
      <P></P><SMALL>As well as a customised Navigation System this =
option allows=20
      you to Enable Disable TabPages without the need to use a modified=20
      TabControl.<BR>This tip is mainly property manipulation.
      <P></P>For a better solution see the PanelManager control on my <A =

      =
href=3D"http://www.mddotnetrix.pwp.blueyonder.co.uk/custom.html">Custom=20
      Controls</A> page. </SMALL>
      <P></P><INPUT id=3DTip_5 =
onclick=3D"ToggleView('Tip_5','Tip5','Tip_5C','Tip5C')" type=3Dbutton =
value=3D"Show VB Code">=20
<INPUT id=3DTip_5C =
onclick=3D"ToggleView('Tip_5C','Tip5C','Tip_5','Tip5')" type=3Dbutton =
value=3D"Show C# Code">=20
      <SMALL>Enjoy! </SMALL><!--=0A=
#########################################################################=
##############################################=0A=
### VB Alternative Navigation=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip5 style=3D"DISPLAY: none"><CODE =
class=3Dvbcomment>'TabControl Settings:
'    TabControl.Appearance =3D Button
'    TabControl.SizeMode =3D Fixed.
'    TabControl.ItemSize =3D 0,1
'    TabControl.Alignment =3D Top

'Now add controls for Navigation.
'You can use any control of your choice i.e. Toolbar or Buttons.
'For the purpose of this tip I have a TabControl with 5 Tabpages and for
'navigation I am using a Horizontal Scrollbar with the following =
settings:
'    Minimum =3D 0
'    Maximum =3D 4=20
'    SmallChange =3D 1
'    LargeChange =3D 1=20
'a scrollbar is not really a good choice for navigation, but it serves =
to show how versatile this method is.
</CODE>
Private Sub HScrollBar1_Scroll(ByVal sender As System.Object, ByVal e As =
System.Windows.Forms.ScrollEventArgs) Handles HScrollBar1.Scroll
    TabControl1.SelectedIndex =3D HScrollBar1.Value
End Sub</PRE><!--=0A=
#########################################################################=
##############################################=0A=
### C# Alternative Navigation=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip5C style=3D"DISPLAY: none"><CODE =
class=3Dvbcomment>//TabControl Settings:
//    TabControl.Appearance =3D Buttons
//    TabControl.SizeMode =3D Fixed.
//    TabControl.ItemSize =3D 0,1
//    TabControl.Alignment =3D Top

//Now add controls for Navigation.
//You can use any control of your choice i.e. Toolbar or Buttons.
//For the purpose of this tip I have a TabControl with 5 Tabpages and =
for
//navigation I am using a Horizontal Scrollbar with the following =
settings:
//    Minimum =3D 0
//    Maximum =3D 4=20
//    SmallChange =3D 1
//    LargeChange =3D 1=20
//a scrollbar is not really a good choice for navigation, but it serves =
to show how versatile this method is.</CODE>

private void hScrollBar1_Scroll(object sender, =
System.Windows.Forms.ScrollEventArgs e)
{
   tabControl1.SelectedIndex =3D hScrollBar1.Value;
}</PRE>
      <HR>
      Tabpage order has changed.
      <P></P><SMALL>This is not random. The tabpages appear in their=20
      zOrder.<BR>I do not know why the zOrder changes but it =
does.<BR>The simple=20
      solution to reapplying the zOrder is, starting from the first =
tabitem and=20
      working your way to the last, select each tabpage in turn, in the =
order in=20
      which they should appear, (make sure the tabpage is selected and =
not the=20
      tabcontrol) and right click the tabpage. A menu will appear and =
you should=20
      select SendToBack. You may need to close and reopen the form =
designer to=20
      see the result in the IDE but it will be correct at runtime. =
</SMALL>
      <HR>
      Reposition TabItems at Runtime.
      <P></P><SMALL>If you want the ability to Drag Tabs around at =
runtime then=20
      this code will do it for you.<BR>Add a TabControl (with the =
AllowDrop=20
      property set to True) and the code below to your form.<BR>This =
code is=20
      based upon code submitted to CodeProject by Paul Auger. The =
original is <A=20
      =
href=3D"http://www.codeproject.com/cs/miscctrl/draggabletabcontrol.asp">h=
ere</A>.<BR></SMALL>
      <P></P><INPUT id=3DTip_6 =
onclick=3D"ToggleView('Tip_6','Tip6','Tip_6C','Tip6C')" type=3Dbutton =
value=3D"Show VB Code">=20
<INPUT id=3DTip_6C =
onclick=3D"ToggleView('Tip_6C','Tip6C','Tip_6','Tip6')" type=3Dbutton =
value=3D"Show C# Code">=20
      <SMALL>Assumes your Tabcontrol is named TabControl1.</SMALL> <!--=0A=
#########################################################################=
##############################################=0A=
### VB Drag TabItems=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip6 style=3D"DISPLAY: none">Private DragStartPosition As =
Point =3D Point.Empty

Private Sub TabControl1_MouseDown(ByVal sender As Object, ByVal e As =
System.Windows.Forms.MouseEventArgs) Handles TabControl1.MouseDown
    DragStartPosition =3D New Point(e.X, e.Y)
End Sub

Private Sub TabControl1_MouseMove(ByVal sender As Object, ByVal e As =
System.Windows.Forms.MouseEventArgs) Handles TabControl1.MouseMove

    If e.Button &lt;&gt; MouseButtons.Left Then Return

    Dim r As Rectangle =3D New Rectangle(DragStartPosition, Size.Empty)
    r.Inflate(SystemInformation.DragSize)

    Dim tp As TabPage =3D HoverTab()

    If Not tp Is Nothing Then
        If Not r.Contains(e.X, e.Y) Then
            TabControl1.DoDragDrop(tp, DragDropEffects.All)
        End If
    End If

    DragStartPosition =3D Point.Empty

End Sub

Private Sub TabControl1_DragOver(ByVal sender As Object, ByVal e As =
System.Windows.Forms.DragEventArgs) Handles TabControl1.DragOver

    Dim hover_Tab As TabPage =3D HoverTab()
    If hover_Tab Is Nothing Then
        e.Effect =3D DragDropEffects.None
    Else
        If e.Data.GetDataPresent(GetType(TabPage)) Then

            e.Effect =3D DragDropEffects.Move
            Dim drag_tab As TabPage =3D =
DirectCast(e.Data.GetData(GetType(TabPage)), TabPage)

            If hover_Tab Is drag_tab Then Return

            Dim TabRect As Rectangle =3D =
TabControl1.GetTabRect(TabControl1.TabPages.IndexOf(hover_Tab))
            TabRect.Inflate(-3, -3)
            If TabRect.Contains(TabControl1.PointToClient(New Point(e.X, =
e.Y))) Then
                SwapTabPages(drag_tab, hover_Tab)
                TabControl1.SelectedTab =3D drag_tab
            End If
        End If
    End If

End Sub

Private Function HoverTab() As TabPage
    For index As Int32 =3D 0 To TabControl1.TabCount - 1
        If =
TabControl1.GetTabRect(index).Contains(TabControl1.PointToClient(Cursor.P=
osition)) Then
            Return TabControl1.TabPages(index)
        End If
    Next
End Function

Private Sub SwapTabPages(ByVal tp1 As TabPage, ByVal tp2 As TabPage)
    Dim Index1 As Integer =3D TabControl1.TabPages.IndexOf(tp1)
    Dim Index2 As Integer =3D TabControl1.TabPages.IndexOf(tp2)
    TabControl1.TabPages(Index1) =3D tp2
    TabControl1.TabPages(Index2) =3D tp1
End Sub
  </PRE><!--=0A=
#########################################################################=
##############################################=0A=
### C# Drag TabItems=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip6C style=3D"DISPLAY: none">private Point =
DragStartPosition =3D Point.Empty;

private void tabControl1_MouseDown(object sender, =
System.Windows.Forms.MouseEventArgs e)
{
    DragStartPosition =3D new Point(e.X, e.Y);
}


private void tabControl1_MouseMove(object sender, =
System.Windows.Forms.MouseEventArgs e)
{
    if (e.Button !=3D MouseButtons.Left) return;
         =20
    Rectangle r =3D new Rectangle(DragStartPosition, Size.Empty);
    r.Inflate(SystemInformation.DragSize);
           =20
    TabPage tp =3D HoverTab();
           =20
    if (tp !=3D null)
    {
        if (!r.Contains(e.X, e.Y))
            tabControl1.DoDragDrop(tp, DragDropEffects.All);
    }
    DragStartPosition =3D Point.Empty;
}


private void tabControl1_DragOver(object sender, =
System.Windows.Forms.DragEventArgs e)
{
    TabPage hover_Tab =3D HoverTab();
    if (hover_Tab =3D=3D null)
        e.Effect =3D DragDropEffects.None;
    else
    {
        if (e.Data.GetDataPresent(typeof(TabPage)))
        {
            e.Effect =3D DragDropEffects.Move;
            TabPage drag_tab =3D =
(TabPage)e.Data.GetData(typeof(TabPage));

            if (hover_Tab =3D=3D drag_tab) return;
                   =20
            Rectangle TabRect=3D =
tabControl1.GetTabRect(tabControl1.TabPages.IndexOf(hover_Tab));
            TabRect.Inflate(-3, -3);
            if (TabRect.Contains(tabControl1.PointToClient(new =
Point(e.X, e.Y))))
            {
                SwapTabPages(drag_tab, hover_Tab);
                tabControl1.SelectedTab =3D drag_tab;
            }
        }
    }
}


private TabPage HoverTab()
{
    for (int index =3D 0; index &lt;=3D tabControl1.TabCount - 1; =
index++)
    {
        if =
(tabControl1.GetTabRect(index).Contains(tabControl1.PointToClient(Cursor.=
Position)))
            return tabControl1.TabPages[index];
    }
    return null;
}


private void SwapTabPages(TabPage tp1, TabPage tp2)
{
    int Index1 =3D tabControl1.TabPages.IndexOf(tp1);
    int Index2 =3D tabControl1.TabPages.IndexOf(tp2);
    tabControl1.TabPages[Index1] =3D tp2;
    tabControl1.TabPages[Index2] =3D tp1;
}</PRE>
      <HR>
      Add Mnemonic support to TabPages.
      <P></P><SMALL>You must resort to drawing the Tabitems yourself to =
get the=20
      underlined character to show.<BR>This is a very basic ownerdraw=20
      example.<BR>Set the Forms KeyPreview Property to True.<BR>Set the=20
      TabControls DrawMode Property to OwnerDrawFixed and add the code =
below to=20
      your form. </SMALL>
      <P></P><INPUT id=3DTip_7 =
onclick=3D"ToggleView('Tip_7','Tip7','Tip_7C','Tip7C')" type=3Dbutton =
value=3D"Show VB Code">=20
<INPUT id=3DTip_7C =
onclick=3D"ToggleView('Tip_7C','Tip7C','Tip_7','Tip7')" type=3Dbutton =
value=3D"Show C# Code">=20
      <SMALL>Assumes your Tabcontrol is named TabControl1.</SMALL> <!--=0A=
#########################################################################=
##############################################=0A=
### VB Mnemonic Support=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip7 style=3D"DISPLAY: none">Private Sub =
TabControl1_DrawItem(ByVal sender As Object, ByVal e As =
System.Windows.Forms.DrawItemEventArgs) Handles TabControl1.DrawItem
    Dim tc As TabControl =3D DirectCast(sender, TabControl)
    Dim sf As New StringFormat
    sf.Alignment =3D StringAlignment.Center
    sf.LineAlignment =3D StringAlignment.Center
    sf.HotkeyPrefix =3D Drawing.Text.HotkeyPrefix.Show
    If tc.SelectedIndex =3D e.Index Then
        e.Graphics.FillRectangle(SystemBrushes.Control, e.Bounds)
    End If
    e.Graphics.DrawString(tc.TabPages(e.Index).Text, tc.Font, =
SystemBrushes.ControlText, RectangleF.op_Implicit(e.Bounds), sf)
    sf.Dispose()
End Sub

Protected Overrides Function ProcessMnemonic(ByVal charCode As Char) As =
Boolean
    For Each tp As TabPage In TabControl1.TabPages
        If IsMnemonic(charCode, tp.Text) Then
            TabControl1.SelectedTab =3D tp
            Return True
        End If
    Next
    Return MyBase.ProcessMnemonic(charCode)
End Function</PRE><!--=0A=
#########################################################################=
##############################################=0A=
### C# Mnemonic Support=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip7C style=3D"DISPLAY: none">private void =
tabControl1_DrawItem(object sender, =
System.Windows.Forms.DrawItemEventArgs e)
{
    System.Windows.Forms.TabControl tc =3D =
(System.Windows.Forms.TabControl)sender;
    StringFormat sf =3D new StringFormat();
    sf.Alignment =3D StringAlignment.Center;
    sf.LineAlignment =3D StringAlignment.Center;
    sf.HotkeyPrefix =3D System.Drawing.Text.HotkeyPrefix.Show;
    if (tc.SelectedIndex =3D=3D e.Index)
        e.Graphics.FillRectangle(SystemBrushes.Control, e.Bounds);
    e.Graphics.DrawString(tc.TabPages[e.Index].Text, tc.Font, =
SystemBrushes.ControlText, e.Bounds, sf);
    sf.Dispose();
}


protected override bool ProcessMnemonic(char charCode)
{
    foreach (TabPage tp in tabControl1.TabPages)
    {
        if (IsMnemonic(charCode, tp.Text))
        {
            tabControl1.SelectedTab =3D tp;
            return true;
        }
    }
    return base.ProcessMnemonic (charCode);
}</PRE>
      <HR>
<!--=0A=
#########################################################################=
##############################################=0A=
### VB TabControlEx=0A=
#########################################################################=
##############################################=0A=
-->TabControl=20
      using Custom TabPages.
      <P></P><IMG id=3Dimage3 height=3D66 width=3D260>
      <P></P><SMALL>This was one of the first projects I tackled in =
dotnet. The=20
      object was to have the tabpages support WindowsXP Visual Style. =
Adding=20
      visual style to an inherited TabPage was simple and after a few =
attempts I=20
      got the TabControl to accept the custom Tabpages via the =
Collection=20
      Editor.<BR>Well since then I have learned a lot and I decided that =
I would=20
      rewrite the control. My goal this time was to get the =
DesignerVerbs to add=20
      the customised Tabpages as well as add an Insert verb. This turned =
out to=20
      be quite a challenge, since the TabControl Designer would not =
detect mouse=20
      clicks on any part of the control that was not a TabPage or =
TabItem. When=20
      I finally found the solution to this problem, as is usually the =
case, it=20
      was very simple to overcome. While I was at it I added an=20
      OnselectedIndexChanging event so that Tabpage changes may be =
cancelled,=20
      and a HotTab variable so you can check which tabitem the cursor is =

      currently over. It would have been nice to add Mnemonic support, =
but that=20
      would involve taking full responsibility for painting the =
TabControl. If=20
      I'm going to do this then I may as well write the control from =
scratch.=20
      </SMALL>
      <P></P><INPUT id=3DTip_8 =
onclick=3D"ToggleView('Tip_8','Tip8','Tip_8C','Tip8C')" type=3Dbutton =
value=3D"Show VB Code">=20
<INPUT id=3DTip_8C =
onclick=3D"ToggleView('Tip_8C','Tip8C','Tip_8','Tip8')" type=3Dbutton =
value=3D"Show C# Code">=20
<PRE id=3DTip8 style=3D"DISPLAY: none">Imports System.ComponentModel
Imports System.Drawing.Design
Imports System.ComponentModel.Design
Imports System.Runtime.InteropServices

Namespace Controls

#Region " TabControlEx Class "

    &lt;ToolboxBitmap(GetType(System.Windows.Forms.TabControl)), _
    Designer(GetType(Designers.TabControlExDesigner))&gt; _
    Public Class TabControlEx
        Inherits System.Windows.Forms.TabControl

        Public Event SelectedIndexChanging As TabControlExEventHandler
        Public HotTab As TabPage =3D Nothing

#Region " Windows Form Designer generated code "

        Public Sub New()
            MyBase.New()

            <CODE class=3Dvbcomment>'This call is required by the =
Windows Form Designer.</CODE>
            InitializeComponent()

            <CODE class=3Dvbcomment>'Add any initialization after the =
InitializeComponent() call</CODE>

        End Sub

        <CODE class=3Dvbcomment>'UserControl1 overrides dispose to clean =
up the component list.</CODE>
        Protected Overloads Overrides Sub Dispose(ByVal disposing As =
Boolean)
            If disposing Then
                If Not (components Is Nothing) Then
                    components.Dispose()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

        <CODE class=3Dvbcomment>'Required by the Windows Form =
Designer</CODE>
        Private components As System.ComponentModel.IContainer

        <CODE class=3Dvbcomment>'NOTE: The following procedure is =
required by the Windows Form Designer
        'It can be modified using the Windows Form Designer. =20
        'Do not modify it using the code editor.</CODE>
        &lt;System.Diagnostics.DebuggerStepThrough()&gt; _
        Private Sub InitializeComponent()
            components =3D New System.ComponentModel.Container
        End Sub

#End Region

#Region " Properties "

        &lt;Editor(GetType(TabpageExCollectionEditor), =
GetType(UITypeEditor))&gt; _
        Public Shadows ReadOnly Property TabPages() As TabPageCollection
            Get
                Return MyBase.TabPages
            End Get
        End Property

#End Region

#Region " TabpageExCollectionEditor "

        Friend Class TabpageExCollectionEditor
            Inherits CollectionEditor

            Public Sub New(ByVal type As System.Type)
                MyBase.new(type)
            End Sub

            Protected Overrides Function CreateCollectionItemType() As =
System.Type
                Return GetType(TabPageEx)
            End Function

        End Class

#End Region

#Region " Interop for SelectedIndexChanging event "

        &lt;StructLayout(LayoutKind.Sequential)&gt; _
        Private Structure NMHDR
            Public HWND As Int32
            Public idFrom As Int32
            Public code As Int32
            Public Overloads Function ToString() As String
                Return String.Format("Hwnd: {0}, ControlID: {1}, Code: =
{2}", HWND, idFrom, code)
            End Function
        End Structure

        Private Const TCN_FIRST As Int32 =3D &amp;HFFFFFFFFFFFFFDDA&amp;
        Private Const TCN_SELCHANGING As Int32 =3D (TCN_FIRST - 2)

        Private Const WM_USER As Int32 =3D &amp;H400&amp;
        Private Const WM_NOTIFY As Int32 =3D &amp;H4E&amp;
        Private Const WM_REFLECT As Int32 =3D WM_USER + &amp;H1C00&amp;

#End Region

#Region " SelectedIndexChanging event Implementation "
        Protected Overrides Sub WndProc(ByRef m As =
System.Windows.Forms.Message)
            If m.Msg =3D (WM_REFLECT + WM_NOTIFY) Then
                Dim hdr As NMHDR =3D =
DirectCast(Marshal.PtrToStructure(m.LParam, GetType(NMHDR)), NMHDR)
                If hdr.code =3D TCN_SELCHANGING Then
                    If Not HotTab Is Nothing Then
                        Dim e As New TabControlExEventArgs(HotTab, =
Me.Controls.IndexOf(HotTab))
                        RaiseEvent SelectedIndexChanging(Me, e)
                        If e.Cancel OrElse HotTab.Enabled =3D False Then
                            m.Result =3D New IntPtr(1)
                            Return
                        End If
                    End If
                End If
            End If
            MyBase.WndProc(m)
        End Sub

#End Region

#Region " HotTab Immplementation "

        Protected Overrides Sub OnMouseMove(ByVal e As =
System.Windows.Forms.MouseEventArgs)
            MyBase.OnMouseMove(e)
            HotTab =3D TestTab(New Point(e.X, e.Y))
        End Sub

#End Region

#Region " Custom Methods "

        Public Sub InsertTabPage(ByVal [tabpage] As TabPage, ByVal =
[index] As Integer)

            If [index] &lt; 0 Or [index] &gt; TabCount Then
                Throw New ArgumentException("Index out of Range.")
            End If

            TabPages.Add([tabpage])
            If [index] &lt; TabCount - 1 Then
                Do
                    SwapTabPages([tabpage], =
(TabPages(TabPages.IndexOf([tabpage]) - 1)))
                Loop Until TabPages.IndexOf([tabpage]) =3D [index]
            End If

            SelectedTab =3D [tabpage]

        End Sub

        Public Sub SwapTabPages(ByVal tp1 As TabPage, ByVal tp2 As =
TabPage)
            If TabPages.Contains(tp1) =3D False Or =
TabPages.Contains(tp2) =3D False Then
                Throw New ArgumentException("TabPages must be in the =
TabCotrols TabPageCollection.")
            End If
            Dim Index1 As Integer =3D TabPages.IndexOf(tp1)
            Dim Index2 As Integer =3D TabPages.IndexOf(tp2)
            TabPages(Index1) =3D tp2
            TabPages(Index2) =3D tp1
        End Sub

        Private Function TestTab(ByVal pt As Point) As TabPage
            For index As Integer =3D 0 To TabCount - 1
                If GetTabRect(index).Contains(pt.X, pt.Y) Then
                    Return TabPages(index)
                End If
            Next
            Return Nothing
        End Function

#End Region

    End Class

#Region " SelectedIndexChanging EventArgs Class/Delegate "

    Public Class TabControlExEventArgs
        Inherits EventArgs

        Private m_TabPage As TabPage =3D Nothing
        Private m_TabPageIndex As Integer =3D -1
        Public Cancel As Boolean =3D False

        Public ReadOnly Property [TabPage]() As TabPage
            Get
                Return m_TabPage
            End Get
        End Property

        Public ReadOnly Property [TabPageIndex]() As Integer
            Get
                Return m_TabPageIndex
            End Get
        End Property

        Public Sub New(ByVal [TabPage] As TabPage, ByVal [TabPageIndex] =
As Integer)
            m_TabPage =3D [TabPage]
            m_TabPageIndex =3D [TabPageIndex]
        End Sub

    End Class

    Public Delegate Sub TabControlExEventHandler(ByVal sender As Object, =
ByVal e As TabControlExEventArgs)

#End Region

#End Region

#Region " TabPageEx Class "

    =
&lt;Designer(GetType(System.Windows.Forms.Design.ScrollableControlDesigne=
r))&gt; _
    Public Class TabPageEx
        Inherits TabPage

#Region " API Declares "

        &lt;DllImport("Comctl32.dll", =
CallingConvention:=3DCallingConvention.Cdecl)&gt; _
        Private Overloads Shared Function DllGetVersion(ByRef pdvi As =
DLLVERSIONINFO) As Integer
        End Function

        &lt;DllImport("uxtheme.dll", =
CallingConvention:=3DCallingConvention.Cdecl)&gt; _
        Private Overloads Shared Function IsAppThemed() As Boolean
        End Function

        &lt;DllImport("uxtheme.dll", =
CallingConvention:=3DCallingConvention.Cdecl, =
CharSet:=3DCharSet.Unicode)&gt; _
        Private Overloads Shared Function OpenThemeData(ByVal hwnd As =
IntPtr, ByVal pszClassList As String) As IntPtr
        End Function

        &lt;DllImport("uxtheme.dll", =
CallingConvention:=3DCallingConvention.Cdecl)&gt; _
        Private Overloads Shared Function GetThemePartSize(ByVal hTheme =
As IntPtr, ByVal hdc As IntPtr, ByVal iPartId As Integer, ByVal iStateId =
As Integer, ByRef prc As Rectangle, ByVal eSize As THEMESIZE, ByRef psz =
As Size) As Integer
        End Function

        &lt;DllImport("uxtheme.dll", =
CallingConvention:=3DCallingConvention.Cdecl)&gt; _
        Private Overloads Shared Function DrawThemeBackground(ByVal =
hTheme As IntPtr, ByVal hdc As IntPtr, ByVal iPartId As Integer, ByVal =
iStateId As Integer, ByRef pRect As Rectangle, ByVal pClipRect As =
IntPtr) As Integer
        End Function

        &lt;DllImport("uxtheme.dll", =
CallingConvention:=3DCallingConvention.Cdecl)&gt; _
        Private Overloads Shared Function CloseThemeData(ByVal htheme As =
IntPtr) As Integer
        End Function

        Private Structure DLLVERSIONINFO
            Friend cbSize As Integer
            Friend dwMajorVersion As Integer
            Friend dwMinorVersion As Integer
            Friend dwBuildNumber As Integer
            Friend dwPlatformID As Integer
            Public Sub New(ByVal ctrl As Control)
                cbSize =3D Marshal.SizeOf(GetType(DLLVERSIONINFO))
            End Sub
        End Structure

        Private Enum THEMESIZE As Integer
            TS_MIN
            TS_TRUE
            TS_DRAW
        End Enum

        Private Const TABP_BODY As Integer =3D 10
        Private Const WM_THEMECHANGED As Integer =3D &amp;H31A

#End Region

#Region " Properties "

        Private bStyled As Boolean =3D True
        Private m_Brush As Brush

        Private ReadOnly Property AppIsXPThemed() As Boolean
            <CODE class=3Dvbcomment>'IsAppThemed will return True if the =
App is not using visual=20
            'Styles but It's TitleBar is drawn with Visual Style(i.e. a
            'manifest resource has not been supplied). To overcome this
            'problem we must also check which version of ComCtl32.dll is
            'being used. Since ComCtl32.dll version 6 is exclusive to
            'WindowsXP, we do not need to check the OSVersion.</CODE>

            Get
                Dim dllVer As New DLLVERSIONINFO(Me)
                DllGetVersion(dllVer)
                If dllVer.dwMajorVersion &gt;=3D 6 Then Return =
IsAppThemed()
            End Get

        End Property

        &lt;Category("Appearance"), _
        Description("Enables/Disables Visual Styles on the TabPage. =
Valid only in WidowsXP."), _
        DefaultValue(True)&gt; _
        Public Property EnableVisualStyles() As Boolean
            Get
                Return bStyled
            End Get
            Set(ByVal Value As Boolean)
                If bStyled =3D Value Then Return
                bStyled =3D Value
                Invalidate(True)
            End Set
        End Property

#End Region

#Region " Windows Form Designer generated code "

        Public Sub New()
            MyBase.New()

            <CODE class=3Dvbcomment>'This call is required by the =
Windows Form Designer.</CODE>
            InitializeComponent()

            <CODE class=3Dvbcomment>'Add any initialization after the =
InitializeComponent() call</CODE>

        End Sub

        Public Sub New(ByVal Text As String)
            MyBase.New()
            MyBase.Text =3D Text
        End Sub

        <CODE class=3Dvbcomment>'UserControl1 overrides dispose to clean =
up the component list.</CODE>
        Protected Overloads Overrides Sub Dispose(ByVal disposing As =
Boolean)
            If disposing Then
                If Not (components Is Nothing) Then
                    components.Dispose()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

        <CODE class=3Dvbcomment>'Required by the Windows Form =
Designer</CODE>
        Private components As System.ComponentModel.IContainer

        <CODE class=3Dvbcomment>'NOTE: The following procedure is =
required by the Windows Form Designer
        'It can be modified using the Windows Form Designer. =20
        'Do not modify it using the code editor.</CODE>
        &lt;System.Diagnostics.DebuggerStepThrough()&gt; _
        Private Sub InitializeComponent()
            components =3D New System.ComponentModel.Container
        End Sub

#End Region

        Protected Overrides Sub OnPaintBackground(ByVal pevent As =
System.Windows.Forms.PaintEventArgs)

            If EnableVisualStyles And AppIsXPThemed Then
                If m_Brush Is Nothing Then SetTabBrush()
                <CODE class=3Dvbcomment>'Paint the TabPage with our =
Brush.</CODE>
                pevent.Graphics.FillRectangle(m_Brush, =
Me.ClientRectangle)
            Else
                <CODE class=3Dvbcomment>'Call the default Paint =
Event.</CODE>
                MyBase.OnPaintBackground(pevent)
            End If

        End Sub

        Private Sub SetTabBrush()
            Dim hdc As IntPtr
            Dim hTheme As IntPtr
            Dim sz As Size
            Dim bmp As Bitmap
            Dim lColor As Integer
            Dim h As Integer =3D Height

            <CODE class=3Dvbcomment>'Open the theme data for the Tab =
Class. </CODE>
            hTheme =3D OpenThemeData(Handle, "TAB")

            <CODE class=3Dvbcomment>'Get the size of the Active Theme's =
TabPage Bitmap.</CODE>
            GetThemePartSize(hTheme, IntPtr.Zero, TABP_BODY, 0, =
DisplayRectangle, THEMESIZE.TS_TRUE, sz)

            <CODE class=3Dvbcomment>'If the TabPage is taller than the =
bitmap then we'll get a
            'nasty block efect so we'll check for that and =
correct.</CODE>
            If h &gt; sz.Height Then sz.Height =3D h
            <CODE class=3Dvbcomment>'Create a new bitmap of the correct =
size.</CODE>
            bmp =3D New Bitmap(sz.Width, sz.Height)
            <CODE class=3Dvbcomment>'Create a Graphics object from our =
bitmap so we can=20
            'draw to it.</CODE>
            Dim g As Graphics =3D Graphics.FromImage(bmp)

            <CODE class=3Dvbcomment>'Get the handle to the Graphics =
Object's DC for API usage.</CODE>
            hdc =3D g.GetHdc <CODE class=3Dvbcomment>'Hidden member of =
Graphics</CODE>

            Dim bmpRect As New Rectangle(0, 0, sz.Width, sz.Height)
            <CODE class=3Dvbcomment>'Draw to the Bitmaps Graphics =
Object.</CODE>
            DrawThemeBackground(hTheme, hdc, TABP_BODY, 0, bmpRect, =
IntPtr.Zero)

            <CODE class=3Dvbcomment>'Release the DC to Windows.</CODE>
            g.ReleaseHdc(hdc) <CODE class=3Dvbcomment>'Hidden member of =
Graphics</CODE>

            <CODE class=3Dvbcomment>'Close the theme data for the Tab =
Class.</CODE>
            CloseThemeData(hTheme)

            <CODE class=3Dvbcomment>'Create a BitmapBrush.</CODE>
            m_Brush =3D New TextureBrush(bmp)

            <CODE class=3Dvbcomment>'Clean Up</CODE>
            bmp.Dispose()
            g.Dispose()

        End Sub

        Private Sub TabpageEx_Disposed(ByVal sender As Object, ByVal e =
As System.EventArgs) Handles MyBase.Disposed
            <CODE class=3Dvbcomment>'Get rid of the brush if we created =
one.</CODE>
            If Not m_Brush Is Nothing Then
                m_Brush.Dispose()
            End If
        End Sub

        Protected Overrides Sub OnResize(ByVal eventargs As =
System.EventArgs)
            MyBase.OnResize(eventargs)
            If AppIsXPThemed Then SetTabBrush()
        End Sub

        Protected Overrides Sub WndProc(ByRef m As =
System.Windows.Forms.Message)
            MyBase.WndProc(m)
            If m.Msg =3D WM_THEMECHANGED Then
                SetTabBrush()
            End If
        End Sub

        <CODE class=3Dvbcomment>''Have to take responsibility for =
drawing TabItems for this method to be useful.
        'Protected Overrides Function ProcessMnemonic(ByVal charCode As =
Char) As Boolean
        '    If IsMnemonic(charCode, Text) Then
        '        DirectCast(Parent, TabControl).SelectedTab =3D Me
        '        Return True
        '    End If
        '    Return False
        'End Function</CODE>

    End Class

#End Region

End Namespace

Namespace Designers

    Friend Class TabControlExDesigner
        Inherits System.Windows.Forms.Design.ParentControlDesigner

#Region " Private Instance Variables "

        Private m_verbs As DesignerVerbCollection =3D New =
DesignerVerbCollection
        Private m_DesignerHost As IDesignerHost
        Private m_SelectionService As ISelectionService

#End Region

        Public Sub New()
            MyBase.New()

            Dim verb1 As New DesignerVerb("Add Tab", AddressOf =
OnAddPage)
            Dim verb2 As New DesignerVerb("Insert Tab", AddressOf =
OnInsertPage)
            Dim verb3 As New DesignerVerb("Remove Tab", AddressOf =
OnRemovePage)
            m_verbs.AddRange(New DesignerVerb() {verb1, verb2, verb3})

        End Sub

#Region " Properties "

        Public Overrides ReadOnly Property Verbs() As =
System.ComponentModel.Design.DesignerVerbCollection
            Get
                If m_verbs.Count =3D 3 Then
                    Dim MyControl As Controls.TabControlEx =3D =
CType(Me.Control, Controls.TabControlEx)
                    If MyControl.TabCount &gt; 0 Then
                        m_verbs(1).Enabled =3D True
                        m_verbs(2).Enabled =3D True
                    Else
                        m_verbs(1).Enabled =3D False
                        m_verbs(2).Enabled =3D False
                    End If
                End If
                Return m_verbs
            End Get
        End Property

        Public ReadOnly Property DesignerHost() As IDesignerHost
            Get
                If m_DesignerHost Is Nothing Then
                    m_DesignerHost =3D =
DirectCast(GetService(GetType(IDesignerHost)), IDesignerHost)
                End If
                Return m_DesignerHost
            End Get
        End Property

        Public ReadOnly Property SelectionService() As ISelectionService
            Get
                If m_SelectionService Is Nothing Then
                    m_SelectionService =3D =
DirectCast(getservice(GetType(ISelectionService)), ISelectionService)
                End If
                Return m_SelectionService
            End Get
        End Property

#End Region

        Sub OnAddPage(ByVal sender As Object, ByVal e As EventArgs)

            Dim ParentControl As Controls.TabControlEx =3D =
DirectCast(Control, Controls.TabControlEx)
            Dim oldTabs As Control.ControlCollection =3D =
ParentControl.Controls

            =
RaiseComponentChanging(TypeDescriptor.GetProperties(ParentControl)("TabPa=
ges"))

            Dim P As Controls.TabPageEx =3D =
DirectCast(DesignerHost.CreateComponent(GetType(Controls.TabPageEx)), =
Controls.TabPageEx)
            P.Text =3D P.Name
            ParentControl.TabPages.Add(P)

            =
RaiseComponentChanged(TypeDescriptor.GetProperties(ParentControl)("TabPag=
es"), oldTabs, ParentControl.TabPages)
            ParentControl.SelectedTab =3D P

            SetVerbs()

        End Sub

        Sub OnInsertPage(ByVal sender As Object, ByVal e As EventArgs)

            Dim ParentControl As Controls.TabControlEx =3D =
DirectCast(Control, Controls.TabControlEx)
            Dim oldTabs As Control.ControlCollection =3D =
ParentControl.Controls
            Dim Index As Integer =3D ParentControl.SelectedIndex

            =
RaiseComponentChanging(TypeDescriptor.GetProperties(ParentControl)("TabPa=
ges"))

            Dim P As Controls.TabPageEx =3D =
DirectCast(DesignerHost.CreateComponent(GetType(Controls.TabPageEx)), =
Controls.TabPageEx)
            P.Text =3D P.Name

            Dim tpc(ParentControl.TabCount) As TabPage
            <CODE class=3Dvbcomment>'Starting at our Insert Position, =
store and remove all the tabpages.</CODE>
            For i As Integer =3D Index To ParentControl.TabCount - 1
                tpc(i) =3D ParentControl.TabPages(Index)
                =
ParentControl.TabPages.Remove(ParentControl.TabPages(Index))
            Next
            <CODE class=3Dvbcomment>'add the tabpage to be =
inserted.</CODE>
            ParentControl.TabPages.Add(P)
            <CODE class=3Dvbcomment>'then re-add the original =
tabpages.</CODE>
            For i As Integer =3D Index To UBound(tpc) - 1
                ParentControl.TabPages.Add(tpc(i))
            Next

            =
RaiseComponentChanged(TypeDescriptor.GetProperties(ParentControl)("TabPag=
es"), oldTabs, ParentControl.TabPages)
            ParentControl.SelectedTab =3D P

            SetVerbs()

        End Sub

        Sub OnRemovePage(ByVal sender As Object, ByVal e As EventArgs)

            Dim ParentControl As Controls.TabControlEx =3D =
DirectCast(Control, Controls.TabControlEx)
            Dim oldTabs As Control.ControlCollection =3D =
ParentControl.Controls

            If ParentControl.SelectedIndex &lt; 0 Then Return

            =
RaiseComponentChanging(TypeDescriptor.GetProperties(ParentControl)("TabPa=
ges"))

            =
DesignerHost.DestroyComponent(ParentControl.TabPages(ParentControl.Select=
edIndex))

            =
RaiseComponentChanged(TypeDescriptor.GetProperties(ParentControl)("TabPag=
es"), oldTabs, ParentControl.TabPages)

            SelectionService.SetSelectedComponents(New IComponent() =
{ParentControl}, SelectionTypes.Normal)

            SetVerbs()

        End Sub

        Private Sub SetVerbs()

            Dim ParentControl As Controls.TabControlEx =3D =
DirectCast(Control, Controls.TabControlEx)

            Select Case ParentControl.TabPages.Count
                Case 0
                    Verbs(1).Enabled =3D False
                    Verbs(2).Enabled =3D False
                Case 1
                    Verbs(1).Enabled =3D False
                    Verbs(2).Enabled =3D True
                Case Else
                    Verbs(1).Enabled =3D True
                    Verbs(2).Enabled =3D True
            End Select

        End Sub

        Private Const WM_NCHITTEST As Integer =3D &amp;H84

        Private Const HTTRANSPARENT As Integer =3D -1
        Private Const HTCLIENT As Integer =3D 1

        Protected Overrides Sub WndProc(ByRef m As Message)
            MyBase.WndProc(m)
            If m.Msg =3D WM_NCHITTEST Then
                <CODE class=3Dvbcomment>'select tabcontrol when =
Tabcontrol clicked outside of TabItem.</CODE>
                If m.Result.ToInt32 =3D HTTRANSPARENT Then
                    m.Result =3D IntPtr.op_Explicit(HTCLIENT)
                End If
            End If

        End Sub

        Private Enum TabControlHitTest
            TCHT_NOWHERE =3D 1
            TCHT_ONITEMICON =3D 2
            TCHT_ONITEMLABEL =3D 4
            TCHT_ONITEM =3D TCHT_ONITEMICON Or TCHT_ONITEMLABEL
        End Enum

        Private Const TCM_HITTEST As Int32 =3D &amp;H130D

        Private Structure TCHITTESTINFO
            Public pt As Point
            Public flags As TabControlHitTest
        End Structure

        Protected Overrides Function GetHitTest(ByVal point As =
System.Drawing.Point) As Boolean

            If (Me.SelectionService.PrimarySelection Is Me.Control) Then
                Dim hti As New TCHITTESTINFO

                hti.pt =3D Me.Control.PointToClient(point)

                Dim m As New Message
                m.HWnd =3D Me.Control.Handle
                m.Msg =3D TCM_HITTEST

                Dim lparam As IntPtr =3D =
Marshal.AllocHGlobal(Marshal.SizeOf(hti))
                Marshal.StructureToPtr(hti, lparam, False)
                m.LParam =3D lparam

                MyBase.WndProc(m)
                Marshal.FreeHGlobal(lparam)

                If m.Result.ToInt32 &lt;&gt; -1 Then
                    Return hti.flags &lt;&gt; =
TabControlHitTest.TCHT_NOWHERE
                End If

            End If

            Return False

        End Function


        Protected Overrides Sub OnPaintAdornments(ByVal pe As =
System.Windows.Forms.PaintEventArgs)
            <CODE class=3Dvbcomment>'Don't want DrawGrid dots.</CODE>
        End Sub

        <CODE class=3Dvbcomment>'Fix the AllSizable selectiorule on =
DockStyle.Fill</CODE>
        Public Overrides ReadOnly Property SelectionRules() As =
System.Windows.Forms.Design.SelectionRules
            Get
                If Me.Control.Dock =3D DockStyle.Fill Then
                    Return =
System.Windows.Forms.Design.SelectionRules.Visible
                End If
                Return MyBase.SelectionRules
            End Get
        End Property

    End Class

End Namespace</PRE><!--=0A=
#########################################################################=
##############################################=0A=
### C# TabControlEx=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip8C style=3D"DISPLAY: none">using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Windows.Forms;
using System.Drawing.Design;
using System.ComponentModel.Design;
using System.Runtime.InteropServices;

namespace Dotnetrix_Samples
{
    #region TabControlEx Class

    <CODE class=3Dvbcomment>/// &lt;summary&gt;
    /// Summary description for TabControlEx.
    /// &lt;/summary&gt;</CODE>
    [ToolboxBitmap(typeof(System.Windows.Forms.TabControl)),
    Designer(typeof(Designers.TabControlExDesigner))]
    public class TabControlEx : System.Windows.Forms.TabControl
    {

        <CODE class=3Dvbcomment>/// &lt;summary&gt;=20
        /// Required designer variable.
        /// &lt;/summary&gt;</CODE>
        private System.ComponentModel.Container components =3D null;

        public TabControlEx()
        {
            <CODE class=3Dvbcomment>// This call is required by the =
Windows.Forms Form Designer.</CODE>
            InitializeComponent();

            <CODE class=3Dvbcomment>// TODO: Add any initialization =
after the InitializeComponent call</CODE>

        }


        <CODE class=3Dvbcomment>/// &lt;summary&gt;=20
        /// Clean up any resources being used.
        /// &lt;/summary&gt;</CODE>
        protected override void Dispose( bool disposing )
        {
            if( disposing )
            {
                if(components !=3D null)
                {
                    components.Dispose();
                }
            }
            base.Dispose( disposing );
        }


        public event TabControlExEventHandler SelectedIndexChanging;
        public TabPage HotTab =3D null;

        #region Component Designer generated code
        <CODE class=3Dvbcomment>/// &lt;summary&gt;
        /// Required method for Designer support - do not modify=20
        /// the contents of this method with the code editor.
        /// &lt;/summary&gt;</CODE>
        private void InitializeComponent()
        {
            components =3D new System.ComponentModel.Container();
        }


        #endregion

        #region Properties

        [Editor(typeof(TabpageExCollectionEditor), =
typeof(UITypeEditor))]
        public new TabPageCollection TabPages
        {
            get
            {
                return base.TabPages;
            }
        }

       =20
        #endregion

        #region TabpageExCollectionEditor

        internal class TabpageExCollectionEditor : CollectionEditor
        {
            public TabpageExCollectionEditor(System.Type type): =
base(type)
            {
            }
           =20
            protected override Type CreateCollectionItemType()
            {
                return typeof(TabPageEx);
            }
        }
       =20
        #endregion

        #region Interop for SelectedIndexChanging event=20

        [StructLayout(LayoutKind.Sequential)]
            private struct NMHDR
        {
            public IntPtr HWND;
            public uint idFrom;
            public int code;
            public override String ToString()
            {
                return String.Format("Hwnd: {0}, ControlID: {1}, Code: =
{2}", HWND, idFrom, code);
            }
        }
       =20
        private const int TCN_FIRST =3D 0 - 550;                =20
        private const int TCN_SELCHANGING =3D (TCN_FIRST - 2);
       =20
        private const int WM_USER =3D 0x400;
        private const int WM_NOTIFY =3D 0x4E;
        private const int WM_REFLECT =3D WM_USER + 0x1C00;
       =20
        #endregion

        #region SelectedIndexChanging event Implementation
     =20
        protected override void WndProc(ref Message m)
        {
            if (m.Msg =3D=3D (WM_REFLECT + WM_NOTIFY))
            {
                NMHDR hdr =3D (NMHDR)(Marshal.PtrToStructure(m.LParam, =
typeof(NMHDR)));
                if (hdr.code =3D=3D TCN_SELCHANGING)
                {
                    if (HotTab !=3D null)
                    {
                        TabControlExEventArgs e =3D new =
TabControlExEventArgs(HotTab, Controls.IndexOf(HotTab));
                        if (SelectedIndexChanging !=3D null)
                            SelectedIndexChanging(this, e);
                        if (e.Cancel || !HotTab.Enabled)
                        {
                            m.Result =3D new IntPtr(1);
                            return;
                        }
                    }
                }
            }
            base.WndProc (ref m);
        }


        #endregion

        #region HotTab Immplementation

        protected override void OnMouseMove(MouseEventArgs e)
        {
            base.OnMouseMove (e);
            HotTab =3D TestTab(new Point(e.X, e.Y));
        }

       =20
        #endregion

        #region Custom Methods

        public void InsertTabPage(TabPage tabpage, int index)
        {
            if (index &lt; 0 || index &gt; TabCount)
                throw new ArgumentException("Index out of Range.");
           =20
            TabPages.Add(tabpage);
           =20
            if (index &lt; TabCount - 1)
            {
                do
                    SwapTabPages(tabpage, =
(TabPages[TabPages.IndexOf(tabpage) - 1]));
                while (TabPages.IndexOf(tabpage) !=3D index);
            }

            SelectedTab =3D tabpage;
        }
       =20

        public void SwapTabPages(TabPage tp1, TabPage tp2)
        {
            if (!TabPages.Contains(tp1) || !TabPages.Contains(tp2) )
                throw new ArgumentException("TabPages must be in the =
TabCotrols TabPageCollection.");
            int Index1 =3D TabPages.IndexOf(tp1);
            int Index2 =3D TabPages.IndexOf(tp2);
            TabPages[Index1] =3D tp2;
            TabPages[Index2] =3D tp1;
        }


        private TabPage TestTab(Point pt)
        {
            for (int index =3D 0; index &lt;=3D TabCount - 1; index++)
            {
                if (GetTabRect(index).Contains(pt.X, pt.Y))
                    return TabPages[index];
            }
            return null;
        }


        #endregion

    }

    #region SelectedIndexChanging EventArgs Class/Delegate

    public class TabControlExEventArgs : EventArgs
    {
        private TabPage m_TabPage =3D null;
        private int m_TabPageIndex =3D -1;
        public bool Cancel =3D false;
       =20
        public TabPage tabPage
        {
            get
            {
                return m_TabPage;
            }
        }
       =20

        public  int TabPageIndex
        {
            get
            {
                return m_TabPageIndex;
            }
        }
       =20

        public  TabControlExEventArgs(TabPage tabPage, int TabPageIndex)
        {
            m_TabPage =3D tabPage;
            m_TabPageIndex =3D TabPageIndex;
        }
       =20
       =20
    }


    public delegate void TabControlExEventHandler(Object sender, =
TabControlExEventArgs e);

    #endregion

    #endregion

    #region TabPageEx Class

    =
[Designer(typeof(System.Windows.Forms.Design.ScrollableControlDesigner))]=

    public class TabPageEx : TabPage
    {
        #region API Declares

        [DllImport("Comctl32.dll", =
CallingConvention=3DCallingConvention.Cdecl)]
        private static extern int DllGetVersion(ref DLLVERSIONINFO =
pdvi);

        [DllImport("uxtheme.dll", =
CallingConvention=3DCallingConvention.Cdecl)]
        private static extern bool IsAppThemed();

        [DllImport("uxtheme.dll", =
CallingConvention=3DCallingConvention.Cdecl, CharSet=3DCharSet.Unicode)]
        private static extern IntPtr OpenThemeData(IntPtr hwnd, String =
pszClassList);

        [DllImport("uxtheme.dll", =
CallingConvention=3DCallingConvention.Cdecl)]
        private static extern int GetThemePartSize(IntPtr hTheme, IntPtr =
hdc, int iPartId, int iStateId, ref Rectangle prc, THEMESIZE eSize, ref =
Size psz);

        [DllImport("uxtheme.dll", =
CallingConvention=3DCallingConvention.Cdecl)]
        private static extern int DrawThemeBackground(IntPtr hTheme, =
IntPtr hdc, int iPartId, int iStateId, ref Rectangle pRect, IntPtr =
pClipRect);

        [DllImport("uxtheme.dll", =
CallingConvention=3DCallingConvention.Cdecl)]
        private static extern int CloseThemeData(IntPtr htheme);

        private struct DLLVERSIONINFO
        {
            public int cbSize;
            public int dwMajorVersion;
            public int dwMinorVersion;
            public int dwBuildNumber;
            public int dwPlatformID;
            public DLLVERSIONINFO(Control ctrl)
            {
                cbSize =3D Marshal.SizeOf(typeof(DLLVERSIONINFO));
                dwMajorVersion =3D 0;
                dwMinorVersion =3D 0;
                dwBuildNumber =3D 0;
                dwPlatformID =3D 0;
            }
        }


        private enum THEMESIZE
        {
            TS_MIN,
            TS_TRUE,
            TS_DRAW
        }
       =20

        private const int TABP_BODY =3D 10;
        private const int WM_THEMECHANGED=3D 0x31A;
       =20
        #endregion

        #region Properties

        private bool bStyled =3D true;
        private Brush m_Brush;

        private bool AppIsXPThemed
        {
            <CODE class=3Dvbcomment>//IsAppThemed will return True if =
the App is not using visual
            //Styles but It's TitleBar is drawn with Visual Style(i.e. a
            //manifest resource has not been supplied). To overcome this
            //problem we must also check which version of ComCtl32.dll =
is
            //being used. Since ComCtl32.dll version 6 is exclusive to
            //WindowsXP, we do not need to check the OSVersion.</CODE>
            get
            {
                DLLVERSIONINFO dllVer =3D new DLLVERSIONINFO(this);
                DllGetVersion(ref dllVer);
                if (dllVer.dwMajorVersion &gt;=3D 6) return =
IsAppThemed();
                return false;
            }
        }


        [Category("Appearance")]
        [Description("Enables/Disables Visual Styles on the TabPage. =
Valid only in WidowsXP.")]
        [DefaultValue(true)]
        public bool EnableVisualStyles
        {
            get
            {
                return bStyled;
            }
            set
            {
                if (bStyled =3D=3D value) return;
                bStyled =3D value;
                Invalidate(true);
            }
        }


        #endregion

        <CODE class=3Dvbcomment>/// &lt;summary&gt;
        /// Required designer variable.
        /// &lt;/summary&gt;</CODE>
        private System.ComponentModel.Container components =3D null;

        public TabPageEx()
        {
            <CODE class=3Dvbcomment>// This call is required by the =
Windows.Forms Form Designer.</CODE>
            InitializeComponent();

            <CODE class=3Dvbcomment>// TODO: Add any initialization =
after the InitializeComponent call</CODE>

        }

        public TabPageEx(String Text) : base()
        {
            base.Text =3D Text;
        }


        <CODE class=3Dvbcomment>/// &lt;summary&gt;=20
        /// Clean up any resources being used.
        /// &lt;/summary&gt;</CODE>
        protected override void Dispose( bool disposing )
        {
            if( disposing )
            {
                if(components !=3D null)
                {
                    components.Dispose();
                }
            }
            base.Dispose( disposing );
        }


        #region Component Designer generated code

        <CODE class=3Dvbcomment>/// &lt;summary&gt;=20
        /// Required method for Designer support - do not modify=20
        /// the contents of this method with the code editor.
        /// &lt;/summary&gt;</CODE>
        private void InitializeComponent()
        {
            components =3D new System.ComponentModel.Container();
            this.Disposed +=3D new EventHandler(TabpageEx_Disposed);
        }


        #endregion

        protected override void OnPaintBackground(PaintEventArgs pevent)
        {
            if (EnableVisualStyles &amp;&amp; AppIsXPThemed)
            {
                if (m_Brush =3D=3D null) SetTabBrush();
                <CODE class=3Dvbcomment>//Paint the TabPage with our =
Brush.</CODE>
                pevent.Graphics.FillRectangle(m_Brush, ClientRectangle);
            }
            else
                <CODE class=3Dvbcomment>//Call the default Paint =
Event.</CODE>
            base.OnPaintBackground (pevent);

        }


        private void SetTabBrush()
        {
            IntPtr hdc;
            IntPtr hTheme;
            Size sz =3D new Size(0,0);=20
            Bitmap bmp;
            int h =3D Height;

            <CODE class=3Dvbcomment>//Open the theme data for the Tab =
Class.</CODE>
            hTheme =3D OpenThemeData(Handle, "TAB");

            <CODE class=3Dvbcomment>//Get the size of the Active Theme's =
TabPage Bitmap.</CODE>
            Rectangle displayrect =3D DisplayRectangle;
            GetThemePartSize(hTheme, IntPtr.Zero, TABP_BODY, 0, ref =
displayrect, THEMESIZE.TS_TRUE, ref sz);

            <CODE class=3Dvbcomment>//If the TabPage is taller than the =
bitmap then we'll get a
            //nasty block efect so we'll check for that and =
correct.</CODE>
            if (h &gt; sz.Height) sz.Height =3D h;
            <CODE class=3Dvbcomment>//Create a new bitmap of the correct =
size.</CODE>
            bmp =3D new Bitmap(sz.Width, sz.Height);
            <CODE class=3Dvbcomment>//Create a Graphics object from our =
bitmap so we can
            //draw to it.</CODE>
            Graphics g =3D Graphics.FromImage(bmp);

            <CODE class=3Dvbcomment>//Get the handle to the Graphics =
Object's DC for API usage.</CODE>
            hdc =3D g.GetHdc(); <CODE class=3Dvbcomment>//Hidden member =
of Graphics</CODE>

            Rectangle bmpRect =3D new Rectangle(0, 0, sz.Width, =
sz.Height);
            <CODE class=3Dvbcomment>//Draw to the Bitmaps Graphics =
Object.</CODE>
            DrawThemeBackground(hTheme, hdc, TABP_BODY, 0,ref bmpRect, =
IntPtr.Zero);

            <CODE class=3Dvbcomment>//Release the DC to Windows.</CODE>
            g.ReleaseHdc(hdc); <CODE class=3Dvbcomment>//Hidden member =
of Graphics</CODE>

            <CODE class=3Dvbcomment>//Close the theme data for the Tab =
Class.</CODE>
            CloseThemeData(hTheme);

            <CODE class=3Dvbcomment>//Create a BitmapBrush.</CODE>
            m_Brush =3D new TextureBrush(bmp);

            <CODE class=3Dvbcomment>//Clean Up</CODE>
            bmp.Dispose();
            g.Dispose();

        }


        private void TabpageEx_Disposed(Object sender, System.EventArgs =
e)
        {
            <CODE class=3Dvbcomment>//Get rid of the brush if we created =
one.</CODE>
            if (m_Brush !=3D null) m_Brush.Dispose();
        }


        protected override void OnResize(EventArgs e)
        {
            base.OnResize (e);
            if (AppIsXPThemed) SetTabBrush();
        }


        protected override void WndProc(ref Message m)
        {
            base.WndProc (ref m);
            if (m.Msg =3D=3D WM_THEMECHANGED)
                SetTabBrush();
        }


        <CODE class=3Dvbcomment>//Have to take responsibility for =
drawing TabItems for this method to be useful.
        //Protected Overrides Function ProcessMnemonic(ByVal charCode As =
Char) As Boolean
        //    If IsMnemonic(charCode, Text) Then
        //        DirectCast(Parent, TabControl).SelectedTab =3D Me
        //        Return True
        //    End If
        //    Return False
        //End Function</CODE>

    }

    #endregion

}


namespace Designers
{

    internal class TabControlExDesigner : =
System.Windows.Forms.Design.ParentControlDesigner
    {

        #region Private Instance Variables

        private DesignerVerbCollection m_verbs =3D new =
DesignerVerbCollection();
        private IDesignerHost m_DesignerHost;
        private ISelectionService m_SelectionService;
       =20
        #endregion

        public TabControlExDesigner():base()
        {
            DesignerVerb verb1 =3D new DesignerVerb("Add Tab", new =
EventHandler(OnAddPage));
            DesignerVerb verb2 =3D new DesignerVerb("Insert Tab", new =
EventHandler(OnInsertPage));
            DesignerVerb verb3 =3D new DesignerVerb("Remove Tab", new =
EventHandler(OnRemovePage));
            m_verbs.AddRange(new DesignerVerb[] {verb1, verb2, verb3});
        }


        #region Properties

        public override DesignerVerbCollection Verbs
        {
            get
            {
                if (m_verbs.Count =3D=3D 3)
                {
                    Dotnetrix_Samples.TabControlEx MyControl =3D =
(Dotnetrix_Samples.TabControlEx)Control;
                    if (MyControl.TabCount &gt; 0 )
                    {
                        m_verbs[1].Enabled =3D true;
                        m_verbs[2].Enabled =3D true;
                    }
                    else
                    {
                        m_verbs[1].Enabled =3D false;
                        m_verbs[2].Enabled =3D false;
                    }
                }
                return m_verbs;
            }
        }


        public IDesignerHost DesignerHost
        {
            get
            {
                if (m_DesignerHost =3D=3D null)
                    m_DesignerHost =3D =
(IDesignerHost)(GetService(typeof(IDesignerHost)));

                return m_DesignerHost;
            }
        }


        public ISelectionService SelectionService
        {
            get
            {
                if (m_SelectionService =3D=3D null)
                    m_SelectionService =3D =
(ISelectionService)(this.GetService(typeof(ISelectionService)));
                return m_SelectionService;
            }
        }


        #endregion

        void OnAddPage(Object sender, EventArgs e)
        {
            Dotnetrix_Samples.TabControlEx ParentControl =3D =
(Dotnetrix_Samples.TabControlEx)Control;
            Control.ControlCollection oldTabs =3D =
ParentControl.Controls;
           =20
            =
RaiseComponentChanging(TypeDescriptor.GetProperties(ParentControl)["TabPa=
ges"]);
           =20
            Dotnetrix_Samples.TabPageEx P =3D =
(Dotnetrix_Samples.TabPageEx)(DesignerHost.CreateComponent(typeof(Dotnetr=
ix_Samples.TabPageEx)));
            P.Text =3D P.Name;
            ParentControl.TabPages.Add(P);
           =20
            =
RaiseComponentChanged(TypeDescriptor.GetProperties(ParentControl)["TabPag=
es"], oldTabs, ParentControl.TabPages);
            ParentControl.SelectedTab =3D P;
           =20
            SetVerbs();
           =20
        }


        void OnInsertPage(Object sender, EventArgs e)
        {
            Dotnetrix_Samples.TabControlEx ParentControl =3D =
(Dotnetrix_Samples.TabControlEx)Control;
            Control.ControlCollection oldTabs =3D =
ParentControl.Controls;
            int Index =3D ParentControl.SelectedIndex;
          =20
            =
RaiseComponentChanging(TypeDescriptor.GetProperties(ParentControl)["TabPa=
ges"]);

            Dotnetrix_Samples.TabPageEx P =3D =
(Dotnetrix_Samples.TabPageEx)(DesignerHost.CreateComponent(typeof(Dotnetr=
ix_Samples.TabPageEx)));
            P.Text =3D P.Name;
           =20
            Dotnetrix_Samples.TabPageEx[] tpc =3D new =
Dotnetrix_Samples.TabPageEx[ParentControl.TabCount];
            <CODE class=3Dvbcomment>//Starting at our Insert Position, =
store and remove all the tabpages.</CODE>
            for (int i =3D Index; i &lt;=3D tpc.Length-1; i++)
            {
                tpc[i] =3D =
(Dotnetrix_Samples.TabPageEx)ParentControl.TabPages[Index];
                =
ParentControl.TabPages.Remove(ParentControl.TabPages[Index]);
            }
            <CODE class=3Dvbcomment>//add the tabpage to be =
inserted.</CODE>
            ParentControl.TabPages.Add(P);
            <CODE class=3Dvbcomment>//then re-add the original =
tabpages.</CODE>
            for (int i =3D Index; i &lt;=3D tpc.Length-1; i++)
            {
                ParentControl.TabPages.Add(tpc[i]);
            }

            =
RaiseComponentChanged(TypeDescriptor.GetProperties(ParentControl)["TabPag=
es"], oldTabs, ParentControl.TabPages);
            ParentControl.SelectedTab =3D P;
           =20
            SetVerbs();
           =20
        }


        void OnRemovePage(Object sender, EventArgs e)
        {
            Dotnetrix_Samples.TabControlEx ParentControl  =3D =
(Dotnetrix_Samples.TabControlEx)Control;
            Control.ControlCollection oldTabs =3D =
ParentControl.Controls;
           =20
            if (ParentControl.SelectedIndex &lt; 0) return;
           =20
            =
RaiseComponentChanging(TypeDescriptor.GetProperties(ParentControl)["TabPa=
ges"]);           =20

            =
DesignerHost.DestroyComponent(ParentControl.TabPages[ParentControl.Select=
edIndex]);
           =20
            =
RaiseComponentChanged(TypeDescriptor.GetProperties(ParentControl)["TabPag=
es"], oldTabs, ParentControl.TabPages);
           =20
            SelectionService.SetSelectedComponents(new IComponent[] =
{ParentControl}, SelectionTypes.Normal);
           =20
            SetVerbs();
           =20
        }


        private void SetVerbs()
        {
            Dotnetrix_Samples.TabControlEx ParentControl =3D =
(Dotnetrix_Samples.TabControlEx)Control;
           =20
            switch (ParentControl.TabPages.Count)
            {
                case 0:
                    Verbs[1].Enabled =3D false;
                    Verbs[2].Enabled =3D false;
                    break;
                case 1:
                    Verbs[1].Enabled =3D false;
                    Verbs[2].Enabled =3D true;
                    break;
                default:
                    Verbs[1].Enabled =3D true;
                    Verbs[2].Enabled =3D true;
                    break;
            }
        }

        private const int WM_NCHITTEST =3D 0x84;
       =20
        private const int HTTRANSPARENT =3D -1;
        private const int HTCLIENT =3D 1;
       =20
        protected override void WndProc(ref Message m)
        {
            base.WndProc (ref m);
            if (m.Msg =3D=3D WM_NCHITTEST)
            {
                <CODE class=3Dvbcomment>//select tabcontrol when =
Tabcontrol clicked outside of TabItem.</CODE>
                if (m.Result.ToInt32() =3D=3D HTTRANSPARENT)
                    m.Result =3D (IntPtr)HTCLIENT;
            }

        }

        private enum TabControlHitTest
        {
            TCHT_NOWHERE =3D 1,
            TCHT_ONITEMICON =3D 2,
            TCHT_ONITEMLABEL =3D 4,
            TCHT_ONITEM =3D TCHT_ONITEMICON | TCHT_ONITEMLABEL
        }
       =20
        private const int TCM_HITTEST =3D 0x130D;
       =20
        private struct TCHITTESTINFO
        {
            public Point pt;
            public TabControlHitTest flags;
        }
       =20
        protected override bool GetHitTest(Point point)
        {
            if (this.SelectionService.PrimarySelection =3D=3D =
this.Control)
            {
                TCHITTESTINFO hti =3Dnew TCHITTESTINFO();
             =20
                hti.pt =3D this.Control.PointToClient(point);
                hti.flags =3D 0;

                Message m =3D new Message();
                m.HWnd =3D this.Control.Handle;
                m.Msg =3D TCM_HITTEST;
               =20
                IntPtr lparam =3D =
Marshal.AllocHGlobal(Marshal.SizeOf(hti));
                Marshal.StructureToPtr(hti, lparam, false);
                m.LParam =3D lparam;
               =20
                base.WndProc(ref m);
                Marshal.FreeHGlobal(lparam);
               =20
                if (m.Result.ToInt32() !=3D -1)
                    return hti.flags !=3D =
TabControlHitTest.TCHT_NOWHERE;
               =20
            }

            return false;
        }
      =20

        protected override void OnPaintAdornments(PaintEventArgs pe)
        {
            <CODE class=3Dvbcomment>//Don't want DrawGrid dots.</CODE>
        }


        <CODE class=3Dvbcomment>//Fix the AllSizable selectiorule on =
DockStyle.Fill</CODE>
        public override System.Windows.Forms.Design.SelectionRules =
SelectionRules
        {
            get
            {
                if (Control.Dock =3D=3D DockStyle.Fill)
                    return =
System.Windows.Forms.Design.SelectionRules.Visible;
                return base.SelectionRules;
            }
        }


    }

}</PRE>
      <HR>
      Mirrored TabControl.
      <P></P><IMG id=3Dimage4 height=3D119 width=3D284>
      <P></P><SMALL>Enable the display of TabItems on your TabControl =
from=20
      RightToLeft. </SMALL>
      <P></P><INPUT id=3DTip_9 =
onclick=3D"ToggleView('Tip_9','Tip9','Tip_9C','Tip9C')" type=3Dbutton =
value=3D"Show VB Code">=20
<INPUT id=3DTip_9C =
onclick=3D"ToggleView('Tip_9C','Tip9C','Tip_9','Tip9')" type=3Dbutton =
value=3D"Show C# Code">=20
<!--=0A=
#########################################################################=
##############################################=0A=
### VB TabControlEx=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip9 style=3D"DISPLAY: none">Imports System.ComponentModel

Public Class MirroredTabControl
    Inherits System.Windows.Forms.TabControl

#Region " Windows Form Designer generated code "

    Public Sub New()
        MyBase.New()

        <CODE class=3Dvbcomment>'This call is required by the Windows =
Form Designer.</CODE>
        InitializeComponent()

        <CODE class=3Dvbcomment>'Add any initialization after the =
InitializeComponent() call</CODE>

    End Sub

    <CODE class=3Dvbcomment>'UserControl overrides dispose to clean up =
the component list.</CODE>
    Protected Overloads Overrides Sub Dispose(ByVal disposing As =
Boolean)
        If disposing Then
            If Not (components Is Nothing) Then
                components.Dispose()
            End If
        End If
        MyBase.Dispose(disposing)
    End Sub

    <CODE class=3Dvbcomment>'Required by the Windows Form =
Designer</CODE>
    Private components As System.ComponentModel.IContainer

    <CODE class=3Dvbcomment>'NOTE: The following procedure is required =
by the Windows Form Designer
    'It can be modified using the Windows Form Designer. =20
    'Do not modify it using the code editor.</CODE>
    &lt;System.Diagnostics.DebuggerStepThrough()&gt; Private Sub =
InitializeComponent()
        components =3D New System.ComponentModel.Container
    End Sub

#End Region

    Protected Overrides ReadOnly Property CreateParams() As =
System.Windows.Forms.CreateParams
        Get
            Dim cp As CreateParams =3D MyBase.CreateParams
            Const WS_EX_LAYOUTRTL As Integer =3D &amp;H400000
            Const WS_EX_NOINHERITLAYOUT As Integer =3D &amp;H100000
            If Me.Mirror Then
                cp.ExStyle +=3D WS_EX_LAYOUTRTL Or WS_EX_NOINHERITLAYOUT
            End If
            Return cp
        End Get
    End Property

    Private m_Mirror As Boolean =3D False

    &lt;DefaultValue(False)&gt; _
    Public Property Mirror() As Boolean
        Get
            Return m_Mirror
        End Get
        Set(ByVal Value As Boolean)
            If m_Mirror =3D Value Then Return
            m_Mirror =3D Value
            MyBase.UpdateStyles()
        End Set
    End Property

End Class
</PRE><!--=0A=
#########################################################################=
##############################################=0A=
### C# Mirrored TabControl=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip9C style=3D"DISPLAY: none">using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Windows.Forms;

namespace Dotnetrix_Samples
{
    <CODE class=3Dvbcomment>/// &lt;summary&gt;
    /// Summary description for MirroredTabControl.
    /// &lt;/summary&gt;</CODE>
    public class MirroredTabControl : System.Windows.Forms.TabControl
    {
        <CODE class=3Dvbcomment>/// &lt;summary&gt;=20
        /// Required designer variable.
        /// &lt;/summary&gt;</CODE>
        private System.ComponentModel.Container components =3D null;

        public MirroredTabControl()
        {
            <CODE class=3Dvbcomment>// This call is required by the =
Windows.Forms Form Designer.</CODE>
            InitializeComponent();

            <CODE class=3Dvbcomment>// TODO: Add any initialization =
after the InitializeComponent call</CODE>

        }

        <CODE class=3Dvbcomment>/// &lt;summary&gt;=20
        /// Clean up any resources being used.
        /// &lt;/summary&gt;</CODE>
        protected override void Dispose( bool disposing )
        {
            if( disposing )
            {
                if(components !=3D null)
                {
                    components.Dispose();
                }
            }
            base.Dispose( disposing );
        }

        #region Component Designer generated code
        <CODE class=3Dvbcomment>/// &lt;summary&gt;=20
        /// Required method for Designer support - do not modify=20
        /// the contents of this method with the code editor.
        /// &lt;/summary&gt;</CODE>
        private void InitializeComponent()
        {
            components =3D new System.ComponentModel.Container();
        }
        #endregion

        protected override CreateParams CreateParams
        {
            get
            {
                const int WS_EX_LAYOUTRTL  =3D 0x400000;
                const int WS_EX_NOINHERITLAYOUT =3D 0x100000;
                CreateParams cp =3D base.CreateParams;
                if (this.Mirror)
                    cp.ExStyle =3D =
cp.ExStyle|WS_EX_LAYOUTRTL|WS_EX_NOINHERITLAYOUT;
                return cp;
            }
        }


private bool m_Mirror =3D false;

        [DefaultValue(false)]
        public bool Mirror
        {
            get
            {
                return m_Mirror;
            }
            set
            {
                if (m_Mirror =3D=3D value) return;
                m_Mirror =3D value;
                base.UpdateStyles();
            }
        }


    }
}</PRE>
      <HR>
      Prevent users navigating TabControl via Ctrl+Tab and =
Ctrl+Shift+Tab.
      <P></P><SMALL>Add the following code to your Form. </SMALL>
      <P></P><INPUT id=3DTip_10 =
onclick=3D"ToggleView('Tip_10','Tip10','Tip_10C','Tip10C')" =
type=3Dbutton value=3D"Show VB Code">=20
<INPUT id=3DTip_10C =
onclick=3D"ToggleView('Tip_10C','Tip10C','Tip_10','Tip10')" =
type=3Dbutton value=3D"Show C# Code">=20
<!--=0A=
#########################################################################=
##############################################=0A=
### VB TabControl No Navigate Keys=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip10 style=3D"DISPLAY: none">Protected Overrides Function =
ProcessCmdKey(ByRef msg As Message, _
                                           ByVal keyData As Keys) As =
Boolean
    If TypeOf ActiveControl Is TabControl Then
        If CBool(keyData And Keys.Control Or Keys.Tab) Then
            Return True
        End If
    End If
    Return MyBase.ProcessCmdKey(msg, keyData)
End Function
</PRE><!--=0A=
#########################################################################=
##############################################=0A=
### C# TabControl No Navigate Keys=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip10C style=3D"DISPLAY: none">protected override bool =
ProcessCmdKey(ref Message msg, Keys keyData)
{
    if (ActiveControl is TabControl)
    {
        if (System.Convert.ToBoolean(keyData &amp; Keys.Tab | =
Keys.Control))
            return true;
    }
    return base.ProcessCmdKey (ref msg, keyData);
}</PRE>
      <HR>
      Add SelectedIndexChanging Event.
      <P></P><SMALL>The following class adds a SelectedIndexChanging =
event to a=20
      TabControl. As well as dissallowing selection of a disabled tab =
via=20
      keyboard or mouse, you can now cancel a change of tabpage. =
</SMALL>
      <P></P><INPUT id=3DTip_11 =
onclick=3D"ToggleView('Tip_11','Tip11','Tip_11C','Tip11C')" =
type=3Dbutton value=3D"Show VB Code">=20
<INPUT id=3DTip_11C =
onclick=3D"ToggleView('Tip_11C','Tip11C','Tip_11','Tip11')" =
type=3Dbutton value=3D"Show C# Code">=20
      <SMALL>Does not include code to draw disabled tabs.</SMALL> <!--=0A=
#########################################################################=
##############################################=0A=
### VB TabControl DisabledTAb=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip11 style=3D"DISPLAY: none">Imports System.ComponentModel

Public Class TabControlEX
    Inherits System.Windows.Forms.TabControl

#Region " Windows Form Designer generated code "

    Public Sub New()
        MyBase.New()

        <CODE class=3Dvbcomment>'This call is required by the Windows =
Form Designer.</CODE>
        InitializeComponent()

        <CODE class=3Dvbcomment>'Add any initialization after the =
InitializeComponent() call</CODE>

    End Sub

    <CODE class=3Dvbcomment>'UserControl overrides dispose to clean up =
the component list.</CODE>
    Protected Overloads Overrides Sub Dispose(ByVal disposing As =
Boolean)
        If disposing Then
            If Not (components Is Nothing) Then
                components.Dispose()
            End If
        End If
        MyBase.Dispose(disposing)
    End Sub

    <CODE class=3Dvbcomment>'Required by the Windows Form =
Designer</CODE>
    Private components As System.ComponentModel.IContainer

    <CODE class=3Dvbcomment>'NOTE: The following procedure is required =
by the Windows Form Designer
    'It can be modified using the Windows Form Designer. =20
    'Do not modify it using the code editor.</CODE>
    &lt;System.Diagnostics.DebuggerStepThrough()&gt; Private Sub =
InitializeComponent()
        components =3D New System.ComponentModel.Container
    End Sub

#End Region

    &lt;Description("Occurs as a tab is being changed.")&gt; _
    Public Event SelectedIndexChanging As =
SelectedTabPageChangeEventHandler

    Protected Overrides Sub WndProc(ByRef m As =
System.Windows.Forms.Message)
        <CODE class=3Dvbcomment>'Tab Selection via mouse button occurs =
before OnMouseDown()
        'so we need to catch it here instead.</CODE>
        If m.Msg =3D &amp;H201 Then <CODE =
class=3Dvbcomment>'WM_MouseDown</CODE>=20
            Dim tp As TabPage =3D TestTab(New Point(m.LParam.ToInt32))
            If Not tp Is Nothing Then
                If tp.Enabled =3D False Then
                    Return
                Else
                    Dim ev As New TabPageChangeEventArgs(SelectedTab, =
tp)
                    OnSelectedIndexChanging(ev)
                    Return
                End If
            End If
        End If

        MyBase.WndProc(m)

    End Sub

    Protected Overrides Sub OnKeyDown(ByVal ke As =
System.Windows.Forms.KeyEventArgs)
        If ke.KeyValue &gt;=3D 37 AndAlso ke.KeyValue &lt;=3D 40 Then
            ke.Handled =3D True

            Dim tp As TabPage =3D Nothing
            Dim r As Rectangle =3D GetTabRect(SelectedIndex)
            Dim pt As Point

            Dim foundNextTab As Boolean =3D False

            Do
                If ke.KeyCode =3D Keys.Left Then
                    pt =3D New Point(r.Left - 3, r.Top)
                ElseIf ke.KeyCode =3D Keys.Up Then
                    pt =3D New Point(r.Left, r.Top - 3)
                ElseIf ke.KeyCode =3D Keys.Right Then
                    pt =3D New Point(r.Right + 3, r.Top)
                Else
                    pt =3D New Point(r.Left, r.Bottom + 3)
                End If

                tp =3D TestTab(pt)
                If Not tp Is Nothing Then
                    foundNextTab =3D tp.Enabled
                    r =3D GetTabRect(TabPages.IndexOf(tp))
                End If

            Loop While Not tp Is Nothing AndAlso foundNextTab =3D False

            If tp Is Nothing Then
                tp =3D GetNextEnabledTab(ke.KeyValue &gt; 38, False)
            End If

            If Not tp Is Nothing AndAlso Not tp Is SelectedTab Then
                Dim ev As New TabPageChangeEventArgs(SelectedTab, tp)
                OnSelectedIndexChanging(ev)
            End If
        End If

        MyBase.OnKeyDown(ke)
    End Sub

    Protected Overrides Function ProcessCmdKey(ByRef msg As =
System.Windows.Forms.Message, ByVal keyData As =
System.Windows.Forms.Keys) As Boolean
        If keyData =3D (Keys.Tab Or Keys.Control) OrElse keyData =3D =
(Keys.Tab Or Keys.Shift Or Keys.Control) Then
            Dim tp As TabPage =3D GetNextEnabledTab((keyData And =
Keys.Shift) =3D Keys.None, True)
            If Not tp Is Nothing Then
                If tp Is SelectedTab =3D False Then
                    Dim ev As New TabPageChangeEventArgs(SelectedTab, =
tp)
                    OnSelectedIndexChanging(ev)
                End If
                Return True
            End If
        End If
        Return MyBase.ProcessCmdKey(msg, keyData)
    End Function

    Protected Overridable Sub OnSelectedIndexChanging(ByVal e As =
TabPageChangeEventArgs)
        RaiseEvent SelectedIndexChanging(Me, e)
        If e.Cancel =3D False Then
            SelectedTab =3D e.NextTab
        End If
    End Sub

    Private Function TestTab(ByVal pt As Point) As TabPage
        For index As Int32 =3D 0 To TabCount - 1
            If GetTabRect(index).Contains(pt.X, pt.Y) Then
                Return TabPages(index)
            End If
        Next
        Return Nothing
    End Function

    Private Function GetNextEnabledTab(ByVal forward As Boolean, ByVal =
wrap As Boolean) As TabPage
        If forward Then
            For index As Int32 =3D SelectedIndex + 1 To TabCount - 1
                If TabPages(index).Enabled Then
                    Return TabPages(index)
                End If
            Next
            If wrap Then
                For index As Int32 =3D 0 To SelectedIndex
                    If TabPages(index).Enabled Then
                        Return TabPages(index)
                    End If
                Next
            End If
        Else
            For index As Int32 =3D SelectedIndex - 1 To 0 Step -1
                If TabPages(index).Enabled Then
                    Return TabPages(index)
                End If
            Next
            If (wrap) Then
                For index As Int32 =3D TabCount - 1 To SelectedIndex =
Step -1
                    If TabPages(index).Enabled Then
                        Return TabPages(index)
                    End If
                Next
            End If
        End If

        Return Nothing

    End Function

End Class

Public Class TabPageChangeEventArgs : Inherits EventArgs
    Private _Selected As TabPage
    Private _PreSelected As TabPage
    Public Cancel As Boolean =3D False

    Public ReadOnly Property CurrentTab() As TabPage
        Get
            Return _Selected
        End Get
    End Property

    Public ReadOnly Property NextTab() As TabPage
        Get
            Return _PreSelected
        End Get
    End Property

    Public Overrides Function ToString() As String
        Return String.Format("CurrentTab: {0}, NextTab: {1}", =
_Selected.ToString(), _PreSelected.ToString())
    End Function

    Public Sub New(ByVal CurrentTab As TabPage, ByVal NextTab As =
TabPage)
        _Selected =3D CurrentTab
        _PreSelected =3D NextTab
    End Sub

End Class

Public Delegate Sub SelectedTabPageChangeEventHandler(ByVal sender As =
Object, ByVal e As TabPageChangeEventArgs)
</PRE><!--=0A=
#########################################################################=
##############################################=0A=
### C# TabControl DisabledTAb=0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip11C style=3D"DISPLAY: none">using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace Dotnetrix_Samples
{
    <CODE class=3Dvbcomment>/// &lt;summary&gt;
    /// Summary description for TabControlEX.
    /// &lt;/summary&gt;</CODE>
    public class TabControlEX : System.Windows.Forms.TabControl
    {
        <CODE class=3Dvbcomment>/// &lt;summary&gt;=20
        /// Required designer variable.
        /// &lt;/summary&gt;</CODE>
        private System.ComponentModel.Container components =3D null;

        public TabControlEX()
        {
            <CODE class=3Dvbcomment>// This call is required by the =
Windows.Forms Form Designer.</CODE>
            InitializeComponent();

            <CODE class=3Dvbcomment>// TODO: Add any initialization =
after the InitializeComponent call</CODE>

        }


        <CODE class=3Dvbcomment>/// &lt;summary&gt;=20
        /// Clean up any resources being used.
        /// &lt;/summary&gt;</CODE>
        protected override void Dispose( bool disposing )
        {
            if( disposing )
            {
                if(components !=3D null)
                {
                    components.Dispose();
                }
            }
            base.Dispose( disposing );
        }


        #region Component Designer generated code
        <CODE class=3Dvbcomment>/// &lt;summary&gt;=20
        /// Required method for Designer support - do not modify=20
        /// the contents of this method with the code editor.
        /// &lt;/summary&gt;</CODE>
        private void InitializeComponent()
        {
            components =3D new System.ComponentModel.Container();
        }
        #endregion

        [Description("Occurs as a tab is being changed.")]
        public event SelectedTabPageChangeEventHandler =
SelectedIndexChanging;

        protected override void WndProc(ref Message m)
        {
            <CODE class=3Dvbcomment>//Tab Selection via mouse button =
occurs before OnMouseDown()
            //so we need to catch it here instead.</CODE>
            if (m.Msg =3D=3D 0x201)<CODE =
class=3Dvbcomment>//WM_MOUSEDOWN</CODE>
            {
                TabPage tp =3D TestTab(new Point(m.LParam.ToInt32()));
                    if (tp !=3D null)
                    {
                        if (tp.Enabled =3D=3D false)
                            return;
                        else
                        {
                            TabPageChangeEventArgs ev =3D new =
TabPageChangeEventArgs(SelectedTab, tp);
                            OnSelectedIndexChanging(ev);
                            return;
                        }
                    }
            }
            base.WndProc (ref m);
        }
       =20

        protected override void OnKeyDown(KeyEventArgs e)
        {
            if (e.KeyValue &gt;=3D37 &amp;&amp; e.KeyValue &lt;=3D40)
            {
                e.Handled=3Dtrue;

                TabPage tp =3D null;
                Rectangle r =3D GetTabRect(SelectedIndex);
                Point pt;

                bool foundNextTab =3D false;
                do=20
                {
                    if (e.KeyCode =3D=3D Keys.Left)
                        pt =3D new Point(r.Left - 3, r.Top);
                    else if (e.KeyCode =3D=3D Keys.Up)
                        pt =3D new Point(r.Left, r.Top - 3);
                    else if (e.KeyCode =3D=3D Keys.Right)
                        pt =3D new Point(r.Right + 3, r.Top);
                    else
                        pt =3D new Point(r.Left, r.Bottom + 3);
               =20
                    tp =3D TestTab(pt);
                    if (tp !=3D null)
                    {
                        foundNextTab =3D tp.Enabled;
                        r =3D GetTabRect(TabPages.IndexOf(tp));
                    }

                }while (tp !=3D null &amp;&amp; !foundNextTab);

                if (tp =3D=3D null)
                    tp =3D GetNextEnabledTab(e.KeyValue &gt; 38, false);

                if (tp !=3D null &amp;&amp; tp !=3D SelectedTab)
                {
                    TabPageChangeEventArgs ev =3D new =
TabPageChangeEventArgs(SelectedTab, tp);
                    OnSelectedIndexChanging(ev);
                }
            }
       =20
            base.OnKeyDown(e);
        }


        protected override bool ProcessCmdKey(ref Message msg, Keys =
keyData)
        {
            if ((keyData =3D=3D (Keys.Tab | Keys.Control)) || (keyData =
=3D=3D (Keys.Tab | Keys.Shift | Keys.Control)))
            {
                TabPage tp =3D GetNextEnabledTab((keyData &amp; =
Keys.Shift) =3D=3D Keys.None ,true);
                if (tp !=3D null)
                    if (tp !=3D SelectedTab)
                    {
                        TabPageChangeEventArgs ev =3D new =
TabPageChangeEventArgs(SelectedTab, tp);
                        OnSelectedIndexChanging(ev);
                    }
                return true;
            }
            return base.ProcessCmdKey (ref msg, keyData);
        }


        protected virtual void =
OnSelectedIndexChanging(TabPageChangeEventArgs e)
        {
            if (SelectedIndexChanging !=3D null)
                SelectedIndexChanging(this, e);
            if( !e.Cancel)
                SelectedTab =3D e.NextTab;
        }


        private TabPage TestTab(Point pt)
        {
            for (int index =3D 0; index &lt;=3D TabCount - 1; index++)
                if (GetTabRect(index).Contains(pt.X, pt.Y))
                    return TabPages[index];
            return null;
        }
       =20

        private TabPage GetNextEnabledTab(bool forward, bool wrap)
        {
            if (forward)
            {
                for (int index =3D SelectedIndex + 1; index &lt; =
TabCount; index++)
                    if (TabPages[index].Enabled)
                        return TabPages[index];

                if (wrap)
                    for (int index =3D 0; index &lt; SelectedIndex; =
index++)
                        if (TabPages[index].Enabled)
                            return TabPages[index];
            }
            else
            {
                for (int index =3D SelectedIndex - 1; index &gt;=3D0; =
index--)
                    if (TabPages[index].Enabled)
                        return TabPages[index];

                if (wrap)
                    for (int index =3D TabCount - 1; index &gt; =
SelectedIndex; index--)
                        if (TabPages[index].Enabled)
                            return TabPages[index];
            }
            return null;
        }


    }


    public class TabPageChangeEventArgs : EventArgs
    {
        private TabPage _Selected =3D null;
        private TabPage _PreSelected =3D null;
        public bool Cancel =3D false;

        public TabPage CurrentTab
        {
            get{return _Selected;}
        }


        public  TabPage NextTab
        {
            get{return _PreSelected;}
        }


        public override String ToString()
        {
            return String.Format("CurrentTab: {0}, NextTab: =
{1}",_Selected.ToString(),_PreSelected.ToString());
        }

        public TabPageChangeEventArgs(TabPage CurrentTab, TabPage =
NextTab)
        {
            _Selected =3D CurrentTab;
            _PreSelected =3D NextTab;
        }

    }


    public delegate void SelectedTabPageChangeEventHandler(Object =
sender, TabPageChangeEventArgs e);

}</PRE>
      <HR>
      Add a HideTabs property to turn on/off the Tabs
      <P></P><SMALL>I don't know why I didn't think to try this earlier. =
This=20
      also fixes the problem of tabpages not being displayed correctly =
when=20
      Alignment is set to anything other than Top and Appearance is not =
Normal.=20
      I have left the Border around the edge at 4 (when HideTabs is =
False), but=20
      you may wish to change this for the Button Appearance.
      <P></P></SMALL><INPUT id=3DTip_12 =
onclick=3D"ToggleView('Tip_12','Tip12','Tip_12C','Tip12C')" =
type=3Dbutton value=3D"Show VB Code">=20
<INPUT id=3DTip_12C =
onclick=3D"ToggleView('Tip_12C','Tip12C','Tip_12','Tip12')" =
type=3Dbutton value=3D"Show C# Code">=20
<!--=0A=
#########################################################################=
##############################################=0A=
### VB Hide Tabs =0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip12 style=3D"DISPLAY: none">Imports System.ComponentModel

Namespace Dotnetrix.Samples.VB

    &lt;ToolboxBitmap(GetType(System.Windows.Forms.TabControl))&gt; _
    Public Class TabControl
        Inherits System.Windows.Forms.TabControl

        Private m_HideTabs As Boolean

        &lt;DefaultValue(False), =
RefreshProperties(RefreshProperties.All)&gt; _
        Public Property HideTabs() As Boolean
            Get
                Return m_HideTabs
            End Get
            Set(ByVal Value As Boolean)
                If m_HideTabs =3D Value Then Return
                m_HideTabs =3D Value
                If Value =3D True Then Me.Multiline =3D True
                Me.UpdateStyles()
            End Set
        End Property

        &lt;RefreshProperties(RefreshProperties.All)&gt; _
        Public Overloads Property Multiline() As Boolean
            Get
                If Me.HideTabs Then Return True
                Return MyBase.Multiline
            End Get
            Set(ByVal Value As Boolean)
                If Me.HideTabs Then
                    MyBase.Multiline =3D True
                Else
                    MyBase.Multiline =3D Value
                End If
            End Set
        End Property

        Public Overrides ReadOnly Property DisplayRectangle() As =
System.Drawing.Rectangle
            Get
                If Me.HideTabs Then
                    Return New Rectangle(0, 0, Width, Height)
                Else
                    Dim tabStripHeight, itemHeight As Int32
=20
                    If Me.Alignment &lt;=3D TabAlignment.Bottom Then
                        itemHeight =3D Me.ItemSize.Height
                    Else
                        itemHeight =3D Me.ItemSize.Width
                    End If

                    If Me.Appearance =3D TabAppearance.Normal Then
                        tabStripHeight =3D 5 + (itemHeight * =
Me.RowCount)
                    Else
                        tabStripHeight =3D (3 + itemHeight) * =
Me.RowCount
                    End If
                    Select Case Me.Alignment
                        Case TabAlignment.Top
                            Return New Rectangle(4, tabStripHeight, =
Width - 8, Height - tabStripHeight - 4)
                        Case TabAlignment.Bottom
                            Return New Rectangle(4, 4, Width - 8, Height =
- tabStripHeight - 4)
                        Case TabAlignment.Left
                            Return New Rectangle(tabStripHeight, 4, =
Width - tabStripHeight - 4, Height - 8)
                        Case TabAlignment.Right
                            Return New Rectangle(4, 4, Width - =
tabStripHeight - 4, Height - 8)
                    End Select
                End If
            End Get
        End Property

    End Class

End Namespace</PRE><!--=0A=
#########################################################################=
##############################################=0A=
### C# Hide Tabs =0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip12C style=3D"DISPLAY: none">using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace Dotnetrix.Samples.CSharp
{
    [ToolboxBitmap(typeof(System.Windows.Forms.TabControl))]
    public class TabControl : System.Windows.Forms.TabControl
    {
        private bool m_HideTabs =3D false;
       =20
        [DefaultValue(false)]
        [RefreshProperties(RefreshProperties.All)]
        public bool HideTabs
        {
            get{return m_HideTabs;}
            set
            {
                if (m_HideTabs =3D=3D value) return;
                m_HideTabs =3D value;
                if (value =3D=3D true) this.Multiline =3D true;
                this.UpdateStyles();
            }
        }
       =20
        [RefreshProperties(RefreshProperties.All)]
        public new bool Multiline=20
        {
            get
            {
                if (this.HideTabs) return true;
                return base.Multiline;
            }
            set
            {
               if (this.HideTabs)
                    base.Multiline =3D true;
                else
                    base.Multiline =3D value;
            }
        }
       =20
        public override System.Drawing.Rectangle DisplayRectangle
        {
            get
            {
                if (this.HideTabs)
                    return new Rectangle(0, 0, Width, Height);
                else
                {
                    int tabStripHeight, itemHeight;

                    if (this.Alignment &lt;=3D TabAlignment.Bottom)
                        itemHeight =3D this.ItemSize.Height;
                    else
                        itemHeight =3D this.ItemSize.Width;

                    if (this.Appearance =3D=3D TabAppearance.Normal)
                        tabStripHeight =3D 5 + (itemHeight * =
this.RowCount);
                    else
                        tabStripHeight =3D (3 + itemHeight) * =
this.RowCount;

                    switch (this.Alignment)
                    {
                        case TabAlignment.Bottom:
                            return new Rectangle(4, 4, Width - 8, Height =
- tabStripHeight - 4);
                        case TabAlignment.Left:
                            return new Rectangle(tabStripHeight, 4, =
Width - tabStripHeight - 4, Height - 8);
                        case TabAlignment.Right:
                            return new Rectangle(4, 4, Width - =
tabStripHeight - 4, Height - 8);
                        default:
                            return new Rectangle(4, tabStripHeight, =
Width - 8, Height - tabStripHeight - 4);
                    }

                }
               =20
            }
           =20
        }
       =20
    }
}</PRE>
      <HR>
      Add a Custom Scroller to TabControl
      <P></P><IMG id=3Dimage5 height=3D37 width=3D335>
      <P></P><SMALL>The following example adds a Custom TabScroller =
class to=20
      TabControl so that we may add a Close Button. For simplicity the=20
      TabScroller class is just 3 buttons placed on a Control but you =
may want=20
      something more complex. Using this same method it is also possible =
to just=20
      move the UpDown control to make room for the close button, but =
then you=20
      won't have control over the scroll position.
      <P></P></SMALL><INPUT id=3DTip_13 =
onclick=3D"ToggleView('Tip_13','Tip13','Tip_13C','Tip13C')" =
type=3Dbutton value=3D"Show VB Code">=20
<INPUT id=3DTip_13C =
onclick=3D"ToggleView('Tip_13C','Tip13C','Tip_13','Tip13')" =
type=3Dbutton value=3D"Show C# Code">=20
<!--=0A=
#########################################################################=
##############################################=0A=
### VB TabScroll =0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip13 style=3D"DISPLAY: none">Imports =
System.Security.Permissions
Imports System.Runtime.InteropServices

Namespace Dotnetrix.Samples.VB

    Public Class ClosableTabControl
        Inherits System.Windows.Forms.TabControl

#Region " Windows Form Designer generated code "

        Public Sub New()
            MyBase.New()
        End Sub

        <CODE class=3Dvbcomment>'TabControl overrides dispose to clean =
up the component list.</CODE>
        &lt;PermissionSetAttribute(SecurityAction.Demand, =
Name:=3D"FullTrust")&gt; _
        Protected Overloads Overrides Sub Dispose(ByVal disposing As =
Boolean)
            If disposing Then
                If Not (UpDown Is Nothing) Then
                    UpDown.ReleaseHandle()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

#End Region

#Region " PInvoke Declarations "

        &lt;DllImport("User32", =
CallingConvention:=3DCallingConvention.Cdecl)&gt; _
        Private Shared Function RealGetWindowClass(ByVal hwnd As IntPtr, =
ByVal pszType As System.Text.StringBuilder, ByVal cchType As Integer) As =
Integer
        End Function

        &lt;DllImport("user32")&gt; _
        Private Shared Function SetParent(ByVal hWndChild As IntPtr, =
ByVal hWndNewParent As IntPtr) As IntPtr
        End Function

        &lt;DllImport("user32.dll")&gt; _
        Public Shared Function SendMessage(ByVal hWnd As IntPtr, ByVal =
Msg As Integer, ByVal wParam As IntPtr, ByVal lParam As IntPtr) As =
IntPtr
        End Function

        Private Const WM_Create As Int32 =3D &amp;H1
        Private Const WM_PARENTNOTIFY As Int32 =3D &amp;H210
        Public Const WM_HSCROLL As Int32 =3D &amp;H114

#End Region

        Private UPDown As NativeUpDown
        Private WithEvents Scroller As New TabScroller

        Private ReadOnly Property ScrollPosition() As Int32
            Get
                Dim multiplier As Int32 =3D -1
                Dim tabRect As Rectangle
                Do
                    tabRect =3D GetTabRect(multiplier + 1)
                    multiplier +=3D 1
                Loop While tabRect.Left &lt; 0 AndAlso multiplier &lt; =
Me.TabCount
                Return multiplier
            End Get
        End Property

        &lt;PermissionSetAttribute(SecurityAction.Demand, =
Name:=3D"FullTrust")&gt; _
        Protected Overrides Sub WndProc(ByRef m As =
System.Windows.Forms.Message)

            If m.Msg =3D WM_PARENTNOTIFY Then
                If (m.WParam.ToInt32() And &amp;HFFFF) =3D WM_Create =
Then
                    Dim WindowName As New System.Text.StringBuilder(16)
                    RealGetWindowClass(m.LParam, WindowName, 16)
                    If WindowName.ToString =3D "msctls_updown32" Then
                        <CODE class=3Dvbcomment>'unhook the existing =
updown control as it will be recreated if=20
                        'the tabcontrol is recreated (alignment, visible =
changed etc..)</CODE>
                        If Not UPDown Is Nothing Then
                            UPDown.ReleaseHandle()
                        End If
                        <CODE class=3Dvbcomment>'and hook it.</CODE>
                        UPDown =3D New NativeUpDown
                        UPDown.AssignHandle(m.LParam)

                    End If
                End If
            End If

            MyBase.WndProc(m)

        End Sub

        Protected Overrides Sub OnHandleCreated(ByVal e As =
System.EventArgs)
            MyBase.OnHandleCreated(e)

            If Me.Multiline =3D False Then
                Scroller.Font =3D New Font("Marlett", Me.Font.Size, =
FontStyle.Regular, GraphicsUnit.Pixel, Me.Font.GdiCharSet)
                SetParent(Scroller.Handle, Me.Handle)
            End If

            Me.OnFontChanged(EventArgs.Empty)

        End Sub

        Protected Overrides Sub OnFontChanged(ByVal e As =
System.EventArgs)
            MyBase.OnFontChanged(e)

            Me.Scroller.Font =3D New Font("Marlett", =
Me.Font.SizeInPoints, FontStyle.Regular, GraphicsUnit.Point)
            Me.Scroller.Height =3D Me.ItemSize.Height
            Me.Scroller.Width =3D Me.ItemSize.Height * 3

            Me.OnResize(EventArgs.Empty)

        End Sub

        Protected Overrides Sub OnResize(ByVal e As System.EventArgs)
            MyBase.OnResize(e)
            Invalidate(True)
            If Me.Multiline Then Return
            If Me.Alignment =3D TabAlignment.Top Then
                Scroller.Location =3D New Point(Me.Width - =
Scroller.Width, 2)
            Else
                Scroller.Location =3D New Point(Me.Width - =
Scroller.Width, Me.Height - Scroller.Height - 2)
            End If
        End Sub

        Private Sub Scroller_ScrollLeft(ByVal sender As Object, ByVal e =
As System.EventArgs) Handles Scroller.ScrollLeft
            If Me.TabCount =3D 0 Then Return
            Dim scrollPos As Int32 =3D Math.Max(0, (ScrollPosition - 1) =
* &amp;H10000)
            SendMessage(Me.Handle, WM_HSCROLL, =
IntPtr.op_Explicit(scrollPos Or &amp;H4), IntPtr.Zero)
            SendMessage(Me.Handle, WM_HSCROLL, =
IntPtr.op_Explicit(scrollPos Or &amp;H8), IntPtr.Zero)
        End Sub

        Private Sub Scroller_ScrollRight(ByVal sender As Object, ByVal e =
As System.EventArgs) Handles Scroller.ScrollRight
            If Me.TabCount =3D 0 Then Return
            If GetTabRect(Me.TabCount - 1).Right &lt;=3D =
Me.Scroller.Left Then Return
            Dim scrollPos As Int32 =3D Math.Max(0, (ScrollPosition + 1) =
* &amp;H10000)
            SendMessage(Me.Handle, WM_HSCROLL, =
IntPtr.op_Explicit(scrollPos Or &amp;H4), IntPtr.Zero)
            SendMessage(Me.Handle, WM_HSCROLL, =
IntPtr.op_Explicit(scrollPos Or &amp;H8), IntPtr.Zero)
        End Sub

        Private Sub Scroller_TabClose(ByVal sender As Object, ByVal e As =
System.EventArgs) Handles Scroller.TabClose
            If Not Me.SelectedTab Is Nothing Then
                Me.TabPages.Remove(Me.SelectedTab)
            End If
        End Sub


    End Class

#Region " Custom Scroller with Close Button "

    Friend Class TabScroller
        Inherits System.Windows.Forms.Control

#Region " Windows Form Designer generated code "

        Public Sub New()
            MyBase.New()

            <CODE class=3Dvbcomment>'This call is required by the =
Windows Form Designer.</CODE>
            InitializeComponent()

            <CODE class=3Dvbcomment>'Add any initialization after the =
InitializeComponent() call</CODE>

        End Sub

        <CODE class=3Dvbcomment>'UserControl overrides dispose to clean =
up the component list.</CODE>
        Protected Overloads Overrides Sub Dispose(ByVal disposing As =
Boolean)
            If disposing Then
                If Not (components Is Nothing) Then
                    components.Dispose()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

        <CODE class=3Dvbcomment>'Required by the Windows Form =
Designer</CODE>
        Private components As System.ComponentModel.IContainer

        <CODE class=3Dvbcomment>'NOTE: The following procedure is =
required by the Windows Form Designer
        'It can be modified using the Windows Form Designer. =20
        'Do not modify it using the code editor.</CODE>
        Friend WithEvents LeftScroller As System.Windows.Forms.Button
        Friend WithEvents RightScroller As System.Windows.Forms.Button
        Friend WithEvents CloseButton As System.Windows.Forms.Button
        &lt;System.Diagnostics.DebuggerStepThrough()&gt; Private Sub =
InitializeComponent()
            Me.LeftScroller =3D New System.Windows.Forms.Button
            Me.RightScroller =3D New System.Windows.Forms.Button
            Me.CloseButton =3D New System.Windows.Forms.Button
            Me.SuspendLayout()
            <CODE class=3Dvbcomment>'
            'LeftScroller
            '</CODE>
            Me.LeftScroller.Dock =3D =
System.Windows.Forms.DockStyle.Right
            Me.LeftScroller.FlatStyle =3D =
System.Windows.Forms.FlatStyle.System
            Me.LeftScroller.Location =3D New System.Drawing.Point(0, 0)
            Me.LeftScroller.Name =3D "LeftScroller"
            Me.LeftScroller.Size =3D New System.Drawing.Size(40, 40)
            Me.LeftScroller.TabIndex =3D 0
            Me.LeftScroller.Text =3D "3"
            <CODE class=3Dvbcomment>'
            'RightScroller
            '</CODE>
            Me.RightScroller.Dock =3D =
System.Windows.Forms.DockStyle.Right
            Me.RightScroller.FlatStyle =3D =
System.Windows.Forms.FlatStyle.System
            Me.RightScroller.Location =3D New System.Drawing.Point(40, =
0)
            Me.RightScroller.Name =3D "RightScroller"
            Me.RightScroller.Size =3D New System.Drawing.Size(40, 40)
            Me.RightScroller.TabIndex =3D 1
            Me.RightScroller.Text =3D "4"
            <CODE class=3Dvbcomment>'
            'CloseButton
            '</CODE>
            Me.CloseButton.Dock =3D System.Windows.Forms.DockStyle.Right
            Me.CloseButton.FlatStyle =3D =
System.Windows.Forms.FlatStyle.System
            Me.CloseButton.Location =3D New System.Drawing.Point(80, 0)
            Me.CloseButton.Name =3D "CloseButton"
            Me.CloseButton.Size =3D New System.Drawing.Size(40, 40)
            Me.CloseButton.TabIndex =3D 2
            Me.CloseButton.Text =3D "r"
            <CODE class=3Dvbcomment>'
            'TabScroller
            '</CODE>
            Me.Controls.Add(Me.LeftScroller)
            Me.Controls.Add(Me.RightScroller)
            Me.Controls.Add(Me.CloseButton)
            Me.Font =3D New System.Drawing.Font("Marlett", 8.25!, =
System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, =
CType(2, Byte))
            Me.Name =3D "TabScroller"
            Me.Size =3D New System.Drawing.Size(120, 40)
            Me.ResumeLayout(False)

        End Sub

#End Region

        Public Event TabClose As EventHandler
        Public Event ScrollLeft As EventHandler
        Public Event ScrollRight As EventHandler

        Private Sub TabScroller_Resize(ByVal sender As Object, ByVal e =
As System.EventArgs) Handles MyBase.Resize
            LeftScroller.Width =3D Me.Width \ 3
            RightScroller.Width =3D Me.Width \ 3
            CloseButton.Width =3D Me.Width \ 3
        End Sub

        Private Sub LeftScroller_Click(ByVal sender As Object, ByVal e =
As System.EventArgs) Handles LeftScroller.Click
            RaiseEvent ScrollLeft(Me, EventArgs.Empty)
        End Sub

        Private Sub RightScroller_Click(ByVal sender As Object, ByVal e =
As System.EventArgs) Handles RightScroller.Click
            RaiseEvent ScrollRight(Me, EventArgs.Empty)
        End Sub

        Private Sub CloseButton_Click(ByVal sender As System.Object, =
ByVal e As System.EventArgs) Handles CloseButton.Click
            RaiseEvent TabClose(Me, EventArgs.Empty)
        End Sub

    End Class

#End Region

#Region " UpDown Control Subclasser "

    Friend Class NativeUpDown
        Inherits NativeWindow

        Public Sub New()
            MyBase.new()
        End Sub

        Friend Const WM_DESTROY As Int32 =3D &amp;H2
        Friend Const WM_NCDESTROY As Int32 =3D &amp;H82
        Friend Const WM_WINDOWPOSCHANGING As Int32 =3D &amp;H46

        &lt;StructLayout(LayoutKind.Sequential)&gt; _
        Friend Structure WINDOWPOS
            Implements IDisposable
            Public hwnd As IntPtr
            Public hwndInsertAfter As IntPtr
            Public x As Int32
            Public y As Int32
            Public cx As Int32
            Public cy As Int32
            Public flags As Int32
            Public Sub Dispose() Implements System.IDisposable.Dispose
                hwnd =3D Nothing
                hwndInsertAfter =3D Nothing
            End Sub
        End Structure

        &lt;PermissionSetAttribute(SecurityAction.Demand, =
Name:=3D"FullTrust")&gt; _
        Protected Overrides Sub WndProc(ByRef m As =
System.Windows.Forms.Message)

            If m.Msg =3D WM_DESTROY OrElse m.Msg =3D WM_NCDESTROY Then
                Me.ReleaseHandle()
            ElseIf m.Msg =3D WM_WINDOWPOSCHANGING Then
                <CODE class=3Dvbcomment>'Move the updown control off the =
edge so it's not visible</CODE>
                Dim wp As WINDOWPOS =3D =
DirectCast(m.GetLParam(GetType(WINDOWPOS)), WINDOWPOS)
                wp.x +=3D wp.cx
                Marshal.StructureToPtr(wp, m.LParam, True)
                _bounds =3D New Rectangle(wp.x, wp.y, wp.cx, wp.cy)
            End If

            MyBase.WndProc(m)

        End Sub

        Private _bounds As Rectangle
        Friend ReadOnly Property Bounds() As Rectangle
            Get
                Return _bounds
            End Get
        End Property

    End Class

#End Region

End Namespace</PRE><!--=0A=
#########################################################################=
##############################################=0A=
### C# TabScroll =0A=
#########################################################################=
##############################################=0A=
--><PRE id=3DTip13C style=3D"DISPLAY: none">using System;
using System.Windows.Forms;
using System.Drawing;
using System.Security.Permissions;=20
using System.Runtime.InteropServices;=20

namespace Dotnetrix.Samples.CSharp
{=20
    public class ClosableTabControl : System.Windows.Forms.TabControl=20
    {=20
        #region Windows Form Designer generated code=20

        public ClosableTabControl() : base()
        {
            this.Scroller.ScrollLeft +=3Dnew =
EventHandler(Scroller_ScrollLeft);
            this.Scroller.ScrollRight +=3D new =
EventHandler(Scroller_ScrollRight);
            this.Scroller.TabClose +=3D new =
EventHandler(Scroller_TabClose);
        }

        <CODE class=3Dvbcomment>//TabControl overrides dispose to clean =
up the component list.</CODE>
        [PermissionSetAttribute(SecurityAction.Demand, =
Name=3D"FullTrust")]
        protected override void Dispose( bool disposing )
        {
            if( disposing )
            {
                if (UpDown !=3D null)
                    UpDown.ReleaseHandle();
            }
            base.Dispose(disposing);
        }


        #region  PInvoke Declarations=20
       =20
        [DllImport("User32", =
CallingConvention=3DCallingConvention.Cdecl)]
        private static extern int RealGetWindowClass(IntPtr hwnd, =
System.Text.StringBuilder pszType, int cchType);

        [DllImport("user32")]
        private static extern IntPtr SetParent(IntPtr hWndChild, IntPtr =
hWndNewParent);

        [DllImport("user32.dll")]
        private static extern IntPtr SendMessage(IntPtr hWnd, int Msg, =
IntPtr wParam, IntPtr lParam);
       =20
        private const int WM_Create =3D 0x1;
        private const int WM_PARENTNOTIFY =3D 0x210;
        private const int WM_HSCROLL =3D 0x114;
       =20
        #endregion

        private NativeUpDown UpDown =3D null;
        private TabScroller Scroller =3D new TabScroller();

        private int ScrollPosition
        {
            get
            {
                int multiplier =3D -1;
                Rectangle tabRect;
                do
                {
                    tabRect =3D GetTabRect(multiplier + 1);
                    multiplier ++ ;
                }
                while (tabRect.Left &lt; 0 &amp;&amp; multiplier &lt; =
this.TabCount);
                return multiplier;
            }
        }


        [PermissionSetAttribute(SecurityAction.Demand, =
Name=3D"FullTrust")]
        protected override void WndProc(ref System.Windows.Forms.Message =
m)
        {
            if (m.Msg =3D=3D WM_PARENTNOTIFY)
            {
                if ((ushort)(m.WParam.ToInt32() &amp; 0xFFFF) =3D=3D =
WM_Create)
                {
                    System.Text.StringBuilder WindowName =3D new =
System.Text.StringBuilder(16);
                    RealGetWindowClass(m.LParam, WindowName, 16);
                    if (WindowName.ToString() =3D=3D "msctls_updown32")
                    {
                        <CODE class=3Dvbcomment>//unhook the existing =
updown control as it will be recreated if=20
                        //the tabcontrol is recreated (alignment, =
visible changed etc..)</CODE>
                        if (UpDown !=3D null)
                            UpDown.ReleaseHandle();
                        <CODE class=3Dvbcomment>//and hook it.</CODE>
                        UpDown =3D new NativeUpDown();
                        UpDown.AssignHandle(m.LParam);
                    }
                }
            }
            base.WndProc(ref m);
        }
       =20

        protected override void OnHandleCreated(System.EventArgs e)
        {
            base.OnHandleCreated(e);
            if (this.Multiline =3D=3D false)
            {
                Scroller.Font =3D new Font("Marlett", this.Font.Size, =
FontStyle.Regular, GraphicsUnit.Pixel, this.Font.GdiCharSet);
                SetParent(Scroller.Handle, this.Handle);
            }
            this.OnFontChanged(EventArgs.Empty);
        }


        protected override void OnFontChanged(System.EventArgs e)
        {
            base.OnFontChanged(e);
            this.Scroller.Font =3D new Font("Marlett", =
this.Font.SizeInPoints, FontStyle.Regular, GraphicsUnit.Point);
            this.Scroller.Height =3D this.ItemSize.Height;
            this.Scroller.Width =3D this.ItemSize.Height * 3;
            this.OnResize(EventArgs.Empty);
        }


        protected override void OnResize(System.EventArgs e)
        {
            base.OnResize(e);
            Invalidate(true);
            if (this.Multiline)=20
                return;
            if (this.Alignment =3D=3D TabAlignment.Top)
                Scroller.Location =3D new Point(this.Width - =
Scroller.Width, 2);
            else
                Scroller.Location =3D new Point(this.Width - =
Scroller.Width, this.Height - Scroller.Height - 2);
        }


        private void Scroller_ScrollLeft(Object sender, System.EventArgs =
e)
        {
            if (this.TabCount =3D=3D 0)
                return;
            int scrollPos =3D Math.Max(0, (ScrollPosition - 1) * =
0x10000);
            SendMessage(this.Handle, WM_HSCROLL, (IntPtr)(scrollPos | =
0x4), IntPtr.Zero);
            SendMessage(this.Handle, WM_HSCROLL, (IntPtr)(scrollPos | =
0x8), IntPtr.Zero);
        }


        private void Scroller_ScrollRight(Object sender, =
System.EventArgs e)
        {
            if (this.TabCount =3D=3D 0)
                return;
            if (GetTabRect(this.TabCount - 1).Right &lt;=3D =
this.Scroller.Left)
                return;
            int scrollPos =3D Math.Max(0, (ScrollPosition + 1) * =
0x10000);
            SendMessage(this.Handle, WM_HSCROLL, (IntPtr)(scrollPos | =
0x4), IntPtr.Zero);
            SendMessage(this.Handle, WM_HSCROLL, (IntPtr)(scrollPos | =
0x8), IntPtr.Zero);
        }


        private void Scroller_TabClose(Object sender, System.EventArgs =
e)
        {
            if (this.SelectedTab !=3D null)
                this.TabPages.Remove(this.SelectedTab);
        }


#endregion

=20
    }=20


#region   Custom Scroller with Close Button=20

    internal class TabScroller : System.Windows.Forms.Control
    {

        #region   Windows Form Designer generated code=20
       =20
        public TabScroller() : base()
        {
            <CODE class=3Dvbcomment>//This call is required by the =
Windows Form Designer.</CODE>
            InitializeComponent();
           =20
            <CODE class=3Dvbcomment>//Add any initialization after the =
InitializeComponent() call</CODE>
           =20
        }

       =20
        <CODE class=3Dvbcomment>//TabScroller overrides dispose to clean =
up the component list.</CODE>
        protected override void Dispose( bool disposing )
        {
            if( disposing )
            {
                if (components !=3D null)=20
                {
                    components.Dispose();
                }
            }
            base.Dispose( disposing );
        }

       =20
        <CODE class=3Dvbcomment>//Required by the Windows Form =
Designer</CODE>
        private System.ComponentModel.IContainer components =3D null;


        <CODE class=3Dvbcomment>//NOTE: The following procedure is =
required by the Windows Form Designer
        //It can be modified using the Windows Form Designer. =20
        //Do not modify it using the code editor.</CODE>
        internal System.Windows.Forms.Button LeftScroller;=20
        internal System.Windows.Forms.Button RightScroller;
        internal System.Windows.Forms.Button CloseButton;
        [System.Diagnostics.DebuggerStepThrough()] private void =
InitializeComponent()
        {
            this.LeftScroller =3D new System.Windows.Forms.Button();
            this.RightScroller =3D new System.Windows.Forms.Button();
            this.CloseButton =3D new System.Windows.Forms.Button();
            this.SuspendLayout();
            <CODE class=3Dvbcomment>//
            //LeftScroller
            //</CODE>
            this.LeftScroller.Dock =3D =
System.Windows.Forms.DockStyle.Right;
            this.LeftScroller.FlatStyle =3D =
System.Windows.Forms.FlatStyle.System;
            this.LeftScroller.Location =3D new System.Drawing.Point(0, =
0);
            this.LeftScroller.Name =3D "LeftScroller";
            this.LeftScroller.Size =3D new System.Drawing.Size(40, 40);
            this.LeftScroller.TabIndex =3D 0;
            this.LeftScroller.Text =3D "3";
            this.LeftScroller.Click+=3Dnew =
EventHandler(LeftScroller_Click);
            <CODE class=3Dvbcomment>//
            //RightScroller
            //</CODE>
            this.RightScroller.Dock =3D =
System.Windows.Forms.DockStyle.Right;
            this.RightScroller.FlatStyle =3D =
System.Windows.Forms.FlatStyle.System;
            this.RightScroller.Location =3D new System.Drawing.Point(40, =
0);
            this.RightScroller.Name =3D "RightScroller";
            this.RightScroller.Size =3D new System.Drawing.Size(40, 40);
            this.RightScroller.TabIndex =3D 1;
            this.RightScroller.Text =3D "4";
            this.RightScroller.Click+=3Dnew =
EventHandler(RightScroller_Click);
            <CODE class=3Dvbcomment>//
            //CloseButton
            //</CODE>
            this.CloseButton.Dock =3D =
System.Windows.Forms.DockStyle.Right;
            this.CloseButton.FlatStyle =3D =
System.Windows.Forms.FlatStyle.System;
            this.CloseButton.Location =3D new System.Drawing.Point(80, =
0);
            this.CloseButton.Name =3D "CloseButton";
            this.CloseButton.Size =3D new System.Drawing.Size(40, 40);
            this.CloseButton.TabIndex =3D 2;
            this.CloseButton.Text =3D "r";
            this.CloseButton.Click+=3Dnew =
EventHandler(CloseButton_Click);
            <CODE class=3Dvbcomment>//
            //TabScroller
            //</CODE>
            this.Controls.Add(this.LeftScroller);
            this.Controls.Add(this.RightScroller);
            this.Controls.Add(this.CloseButton);
            this.Font =3D new System.Drawing.Font("Marlett", 8.25f, =
System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, =
(byte)2);
            this.Name =3D "TabScroller";
            this.Size =3D new System.Drawing.Size(120, 40);
            this.Resize+=3Dnew EventHandler(TabScroller_Resize);
            this.ResumeLayout(false);
           =20
        }

        #endregion

        public event EventHandler TabClose;
        public event EventHandler ScrollLeft;
        public event EventHandler ScrollRight;

        private void TabScroller_Resize(Object sender, System.EventArgs =
e)
        {
            LeftScroller.Width =3D this.Width / 3;
            RightScroller.Width =3D this.Width / 3;
            CloseButton.Width =3D this.Width / 3;
        }
       =20
       =20
        private void LeftScroller_Click(Object sender, System.EventArgs =
e)
        {
            if (ScrollLeft !=3D null)
                ScrollLeft(this, EventArgs.Empty);
        }
       =20

        private void RightScroller_Click(Object sender, System.EventArgs =
e)
        {
            if (ScrollRight !=3D null)
                ScrollRight(this, EventArgs.Empty);
        }
       =20

        private void CloseButton_Click(Object sender, System.EventArgs =
e)
        {
            if (TabClose !=3D null)
                TabClose(this, EventArgs.Empty);
        }
       =20

    }

#endregion

#region  UpDown Control Subclasser=20

    internal class NativeUpDown: NativeWindow
    {

        public NativeUpDown() : base(){}
       =20
        private const int WM_DESTROY =3D 0x2;
        private const int WM_NCDESTROY =3D 0x82;
        private const int WM_WINDOWPOSCHANGING =3D 0x46;
       =20
        [StructLayout(LayoutKind.Sequential)]
        private struct WINDOWPOS
        {
            public IntPtr hwnd, hwndInsertAfter;
            public int x ,y ,cx ,cy ,flags;
        }

        [PermissionSetAttribute(SecurityAction.Demand, =
Name=3D"FullTrust")]
        protected override void WndProc(ref System.Windows.Forms.Message =
m)
        {
            if (m.Msg =3D=3D WM_DESTROY || m.Msg =3D=3D WM_NCDESTROY)
                this.ReleaseHandle();
            else if (m.Msg =3D=3D WM_WINDOWPOSCHANGING)
            {
                <CODE class=3Dvbcomment>//Move the updown control off =
the edge so it's not visible</CODE>
                WINDOWPOS wp =3D =
(WINDOWPOS)(m.GetLParam(typeof(WINDOWPOS)));
                wp.x +=3D wp.cx;
                Marshal.StructureToPtr(wp, m.LParam, true);
                _bounds =3D new Rectangle(wp.x, wp.y, wp.cx, wp.cy);
            }
            base.WndProc( ref m);
        }


        private Rectangle _bounds;
        internal Rectangle Bounds
        {
            get{return _bounds;}
        }

    }

#endregion

}</PRE>
      <HR>
      </DIV></TD>
    <TD width=3D120>
      <SCRIPT type=3Dtext/javascript><!--=0A=
    google_ad_client =3D "pub-0015957635717445";=0A=
    google_ad_width =3D 120;=0A=
    google_ad_height =3D 600;=0A=
    google_ad_format =3D "120x600_as";=0A=
    google_ad_type =3D "text_image";=0A=
    google_ad_channel =3D"";=0A=
    google_color_border =3D "FF4500";=0A=
    google_color_bg =3D "FFEBCD";=0A=
    google_color_link =3D "DE7008";=0A=
    google_color_url =3D "E0AD12";=0A=
    google_color_text =3D "8B4513";=0A=
    //--></SCRIPT>

      <SCRIPT =
src=3D"http://pagead2.googlesyndication.com/pagead/show_ads.js"=20
      type=3Dtext/javascript>=0A=
    </SCRIPT>
    </TD></TR></TBODY></TABLE>
<TABLE width=3D"100%">
  <TBODY>
  <TR align=3Dmiddle>
    <TD>
      <SCRIPT type=3Dtext/javascript><!--=0A=
     google_ad_client =3D "pub-0015957635717445";=0A=
     google_ad_width =3D 468;=0A=
     google_ad_height =3D 60;=0A=
     google_ad_format =3D "468x60_as_rimg";=0A=
     google_cpa_choice =3D "CAAQz-ebzgEaCC76Q3EwrJjSKMXC93M";=0A=
     google_ad_channel =3D "";=0A=
     //-->=0A=
    </SCRIPT>

      <SCRIPT =
src=3D"http://pagead2.googlesyndication.com/pagead/show_ads.js"=20
      type=3Dtext/javascript>=0A=
    </SCRIPT>
    </TD></TR></TBODY></TABLE>
<DIV id=3Dcounter style=3D"DISPLAY: none"></DIV></BODY></HTML>

------=_NextPart_001_0009_01C8AF11.13130EA0--

------=_NextPart_000_0000_01C8AF11.12FDB1E0--
